[
  {
    "FullName": "AuditlogService.AuditLogManager",
    "BaseTypes": [
      "Microsoft.Extensions.Hosting.IHostedService",
      "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_messageHandler",
        "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler"
      },
      {
        "Name": "_logPath",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "AuditLogManager",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "messageHandler"
          },
          {
            "Type": "AuditlogService.AuditlogManagerConfig",
            "Name": "config"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messageHandler",
            "Operator": "=",
            "Right": "messageHandler"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_logPath",
            "Operator": "=",
            "Right": "config.LogPath"
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "!Directory.Exists(_logPath)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.Directory",
                    "Name": "CreateDirectory",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "_logPath"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "StartAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Start",
            "Arguments": [
              {
                "Type": "AuditlogService.AuditLogManager",
                "Text": "this"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StopAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Stop"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "HandleMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd HH:mm:ss:ffffff\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Path",
            "Name": "Combine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_logPath"
              },
              {
                "Type": "string",
                "Text": "$\"{DateTime.Now.ToString(\"yyyy-MM-dd\")}-auditlog.txt\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.File",
            "Name": "AppendAllTextAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "logFile"
              },
              {
                "Type": "string",
                "Text": "logMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"{MessageType} - {Body}\""
              },
              {
                "Type": "string",
                "Text": "messageType"
              },
              {
                "Type": "string",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "AuditlogService.AuditlogManagerConfig",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "LogPath",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "AuditlogService.Program",
    "Methods": [
      {
        "Name": "Main",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "AuditlogService.Program",
            "Name": "CreateHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
            "Name": "RunAsync"
          }
        ],
        "Modifiers": 274
      },
      {
        "Name": "CreateHostBuilder",
        "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingHostBuilderExtensions",
            "Name": "UseConsoleLifetime"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogHostBuilderExtensions",
            "Name": "UseSerilog",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>",
                "Text": "(hostContext, loggerConfiguration) =>\r\n                {\r\n                    loggerConfiguration.ReadFrom.Configuration(hostContext.Configuration);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureServices",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection>",
                "Text": "(hostContext, services) =>\r\n                {\r\n                    services.AddTransient<IMessageHandler>((svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Auditlog\", \"\"); ;\r\n                    });\r\n\r\n                    services.AddTransient<AuditlogManagerConfig>((svc) =>\r\n                    {\r\n                        var auditlogConfigSection = hostContext.Configuration.GetSection(\"Auditlog\");\r\n                        string logPath = auditlogConfigSection[\"path\"];\r\n                        return new AuditlogManagerConfig { LogPath = logPath };\r\n                    });\r\n\r\n                    services.AddHostedService<AuditLogManager>();\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureAppConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "(hostContext, config) =>\r\n                {\r\n                    config.AddJsonFile($\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\", optional: false);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureHostConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "configHost =>\r\n                {\r\n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\r\n                    configHost.AddJsonFile(\"hostsettings.json\", optional: true);\r\n                    configHost.AddJsonFile($\"appsettings.json\", optional: false);\r\n                    configHost.AddEnvironmentVariables();\r\n                    configHost.AddEnvironmentVariables(\"PITSTOP_\");\r\n                    configHost.AddCommandLine(args);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.Host",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.FileConfigurationExtensions",
            "Name": "SetBasePath",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"hostsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PITSTOP_\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions",
            "Name": "AddCommandLine",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessageHandler>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessageHandler>",
                "Text": "(svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Auditlog\", \"\"); ;\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Auditlog\", \"\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessageHandler",
            "Name": "RabbitMQMessageHandler",
            "Arguments": [
              {
                "Type": "string",
                "Text": "rabbitMQHost"
              },
              {
                "Type": "string",
                "Text": "rabbitMQUserName"
              },
              {
                "Type": "string",
                "Text": "rabbitMQPassword"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              },
              {
                "Type": "string",
                "Text": "\"Auditlog\""
              },
              {
                "Type": "string",
                "Text": "\"\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<AuditlogManagerConfig>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, AuditlogService.AuditlogManagerConfig>",
                "Text": "(svc) =>\r\n                    {\r\n                        var auditlogConfigSection = hostContext.Configuration.GetSection(\"Auditlog\");\r\n                        string logPath = auditlogConfigSection[\"path\"];\r\n                        return new AuditlogManagerConfig { LogPath = logPath };\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Auditlog\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new AuditlogManagerConfig { LogPath = logPath }"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "AuditlogService.AuditlogManagerConfig",
            "Name": "AuditlogManagerConfig",
            "Arguments": [
              {
                "Type": "string",
                "Text": "LogPath = logPath"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LogPath",
            "Operator": "=",
            "Right": "logPath"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions",
            "Name": "AddHostedService<AuditLogManager>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "hostContext.Configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "hostBuilder"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.CustomerManagementAPI.Controllers.CustomersController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
        "Name": "Route",
        "Arguments": [
          {
            "Name": "\"/api/[controller]\"",
            "Type": "string",
            "Value": "/api/[controller]"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "_messagePublisher",
        "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher"
      },
      {
        "Name": "_dbContext",
        "Type": "Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext"
      }
    ],
    "Constructors": [
      {
        "Name": "CustomersController",
        "Parameters": [
          {
            "Type": "Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext",
            "Name": "dbContext"
          },
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
            "Name": "messagePublisher"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_dbContext",
            "Operator": "=",
            "Right": "dbContext"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messagePublisher",
            "Operator": "=",
            "Right": "messagePublisher"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetAllAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(await _dbContext.Customers.ToListAsync())"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<Pitstop.CustomerManagementAPI.Model.Customer>",
                "Text": "await _dbContext.Customers.ToListAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "ToListAsync"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "GetByCustomerId",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "FirstOrDefaultAsync",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.CustomerManagementAPI.Model.Customer, bool>>",
                "Text": "c => c.CustomerId == customerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "customer == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "NotFound()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "NotFound"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(customer)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "Pitstop.CustomerManagementAPI.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{customerId}\"",
                "Type": "string",
                "Value": "{customerId}"
              },
              {
                "Name": "Name",
                "Type": "string",
                "Value": "GetByCustomerId"
              }
            ]
          }
        ]
      },
      {
        "Name": "RegisterAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.CustomerManagementAPI.Commands.RegisterCustomer",
            "Name": "command",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromBodyAttribute",
                "Name": "FromBody"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.CustomerManagementAPI.Mappers.Mappers",
                    "Name": "MapToCustomer"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.CustomerManagementAPI.Model.Customer>",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "Pitstop.CustomerManagementAPI.Model.Customer",
                        "Text": "customer"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
                    "Name": "SaveChangesAsync"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.CustomerManagementAPI.Mappers.Mappers",
                    "Name": "MapToCustomerRegistered"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
                    "Name": "PublishMessageAsync",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "e.MessageType"
                      },
                      {
                        "Type": "Pitstop.CustomerManagementAPI.Events.CustomerRegistered",
                        "Text": "e"
                      },
                      {
                        "Type": "string",
                        "Text": "\"\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "CreatedAtRoute(\"GetByCustomerId\", new { customerId = customer.CustomerId }, customer)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "CreatedAtRoute",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"GetByCustomerId\""
                      },
                      {
                        "Type": "<anonymous type: string customerId>",
                        "Text": "new { customerId = customer.CustomerId }"
                      },
                      {
                        "Type": "Pitstop.CustomerManagementAPI.Model.Customer",
                        "Text": "customer"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "BadRequest()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "BadRequest"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary",
            "Name": "AddModelError",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"\""
              },
              {
                "Type": "string",
                "Text": "\"Unable to save changes. \" +\r\n                    \"Try again, and if the problem persists \" +\r\n                    \"see your system administrator.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "StatusCode(StatusCodes.Status500InternalServerError)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "StatusCode",
            "Arguments": [
              {
                "Type": "int",
                "Text": "StatusCodes.Status500InternalServerError"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Commands.RegisterVehicle",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterVehicle",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "licenseNumber"
          },
          {
            "Type": "string",
            "Name": "brand"
          },
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "ownerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "licenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "ownerId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Controllers.VehiclesController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
        "Name": "Route",
        "Arguments": [
          {
            "Name": "\"/api/[controller]\"",
            "Type": "string",
            "Value": "/api/[controller]"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "_messagePublisher",
        "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher"
      },
      {
        "Name": "_dbContext",
        "Type": "Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext"
      }
    ],
    "Constructors": [
      {
        "Name": "VehiclesController",
        "Parameters": [
          {
            "Type": "Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext",
            "Name": "dbContext"
          },
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
            "Name": "messagePublisher"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_dbContext",
            "Operator": "=",
            "Right": "dbContext"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messagePublisher",
            "Operator": "=",
            "Right": "messagePublisher"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetAllAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(await _dbContext.Vehicles.ToListAsync())"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<Pitstop.Application.VehicleManagement.Model.Vehicle>",
                "Text": "await _dbContext.Vehicles.ToListAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "ToListAsync"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "GetByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "FirstOrDefaultAsync",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.Application.VehicleManagement.Model.Vehicle, bool>>",
                "Text": "v => v.LicenseNumber == licenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "vehicle == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "NotFound()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "NotFound"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(vehicle)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "Pitstop.Application.VehicleManagement.Model.Vehicle",
                "Text": "vehicle"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{licenseNumber}\"",
                "Type": "string",
                "Value": "{licenseNumber}"
              },
              {
                "Name": "Name",
                "Type": "string",
                "Value": "GetByLicenseNumber"
              }
            ]
          }
        ]
      },
      {
        "Name": "RegisterAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.Application.VehicleManagement.Commands.RegisterVehicle",
            "Name": "command",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromBodyAttribute",
                "Name": "FromBody"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.VehicleManagementAPI.Mappers.Mappers",
                    "Name": "MapToVehicle"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.Application.VehicleManagement.Model.Vehicle>",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "Pitstop.Application.VehicleManagement.Model.Vehicle",
                        "Text": "vehicle"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
                    "Name": "SaveChangesAsync"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.Application.VehicleManagement.Events.VehicleRegistered",
                    "Name": "FromCommand",
                    "Arguments": [
                      {
                        "Type": "Pitstop.Application.VehicleManagement.Commands.RegisterVehicle",
                        "Text": "command"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
                    "Name": "PublishMessageAsync",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "e.MessageType"
                      },
                      {
                        "Type": "Pitstop.Application.VehicleManagement.Events.VehicleRegistered",
                        "Text": "e"
                      },
                      {
                        "Type": "string",
                        "Text": "\"\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "CreatedAtRoute(\"GetByLicenseNumber\", new { licenseNumber = vehicle.LicenseNumber }, vehicle)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "CreatedAtRoute",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"GetByLicenseNumber\""
                      },
                      {
                        "Type": "<anonymous type: string licenseNumber>",
                        "Text": "new { licenseNumber = vehicle.LicenseNumber }"
                      },
                      {
                        "Type": "Pitstop.Application.VehicleManagement.Model.Vehicle",
                        "Text": "vehicle"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "BadRequest()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "BadRequest"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary",
            "Name": "AddModelError",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"\""
              },
              {
                "Type": "string",
                "Text": "\"Unable to save changes. \" +\r\n                    \"Try again, and if the problem persists \" +\r\n                    \"see your system administrator.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "StatusCode(StatusCodes.Status500InternalServerError)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "StatusCode",
            "Arguments": [
              {
                "Type": "int",
                "Text": "StatusCodes.Status500InternalServerError"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.DbContext"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "VehicleManagementDBContext",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.DbContextOptions<Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext>",
            "Name": "options"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Vehicles",
        "Type": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.Application.VehicleManagement.Model.Vehicle>",
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "OnModelCreating",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "builder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Pitstop.Application.VehicleManagement.Model.Vehicle>",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.Application.VehicleManagement.Model.Vehicle, object>>",
                "Text": "m => m.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Vehicle>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Vehicle>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "OnModelCreating",
            "Arguments": [
              {
                "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
                "Text": "builder"
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "MigrateDB",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => Database.Migrate()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions",
            "Name": "Migrate"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Events.VehicleRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "VehicleRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "licenseNumber"
          },
          {
            "Type": "string",
            "Name": "brand"
          },
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "ownerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "licenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "ownerId"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "FromCommand",
        "ReturnType": "Pitstop.Application.VehicleManagement.Events.VehicleRegistered",
        "Parameters": [
          {
            "Type": "Pitstop.Application.VehicleManagement.Commands.RegisterVehicle",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new VehicleRegistered(\r\n                Guid.NewGuid(),\r\n                command.LicenseNumber,\r\n                command.Brand,\r\n                command.Type,\r\n                command.OwnerId\r\n            )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Application.VehicleManagement.Events.VehicleRegistered",
            "Name": "VehicleRegistered",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "string",
                "Text": "command.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "command.Brand"
              },
              {
                "Type": "string",
                "Text": "command.Type"
              },
              {
                "Type": "string",
                "Text": "command.OwnerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Migrations.v1",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Migrations.Migration"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(VehicleManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(VehicleManagementDBContext)"
          }
        ]
      },
      {
        "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute",
        "Name": "Migration",
        "Arguments": [
          {
            "Name": "\"20170307115132_v1\"",
            "Type": "string",
            "Value": "20170307115132_v1"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "Up",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              },
              {
                "Type": "System.Func<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder, <anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LastUpdateTimestamp, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>",
                "Text": "table => new\r\n                {\r\n                    LicenseNumber = table.Column<string>(nullable: false),\r\n                    Brand = table.Column<string>(nullable: true),\r\n                    LastUpdateTimestamp = table.Column<DateTimeOffset>(nullable: false),\r\n                    OwnerId = table.Column<string>(nullable: true),\r\n                    Type = table.Column<string>(nullable: true)\r\n                }"
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LastUpdateTimestamp, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>>",
                "Text": "table =>\r\n                {\r\n                    table.PrimaryKey(\"PK_Vehicle\", x => x.LicenseNumber);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTimeOffset>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LastUpdateTimestamp, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>",
            "Name": "PrimaryKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PK_Vehicle\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LastUpdateTimestamp, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>, object>>",
                "Text": "x => x.LicenseNumber"
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "Down",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "BuildTargetModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.Application.VehicleManagement.Model.Vehicle\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"LicenseNumber\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Brand\");\r\n\r\n                    b.Property<DateTimeOffset>(\"LastUpdateTimestamp\");\r\n\r\n                    b.Property<string>(\"OwnerId\");\r\n\r\n                    b.Property<string>(\"Type\");\r\n\r\n                    b.HasKey(\"LicenseNumber\");\r\n\r\n                    b.ToTable(\"Vehicle\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Brand\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTimeOffset>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LastUpdateTimestamp\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"OwnerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Type\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Migrations.v2",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Migrations.Migration"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(VehicleManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(VehicleManagementDBContext)"
          }
        ]
      },
      {
        "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute",
        "Name": "Migration",
        "Arguments": [
          {
            "Name": "\"20170308050857_v2\"",
            "Type": "string",
            "Value": "20170308050857_v2"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "Up",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropColumn",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LastUpdateTimestamp\""
              },
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "Down",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "AddColumn<DateTimeOffset>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LastUpdateTimestamp\""
              },
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              },
              {
                "Type": "bool",
                "Text": "false"
              },
              {
                "Type": "System.DateTimeOffset",
                "Text": "new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTimeOffset",
            "Name": "DateTimeOffset",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)"
              },
              {
                "Type": "System.TimeSpan",
                "Text": "new TimeSpan(0, 0, 0, 0, 0)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "DateTime",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              },
              {
                "Type": "int",
                "Text": "1"
              },
              {
                "Type": "int",
                "Text": "1"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "System.DateTimeKind",
                "Text": "DateTimeKind.Unspecified"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "TimeSpan",
            "Arguments": [
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              },
              {
                "Type": "int",
                "Text": "0"
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "BuildTargetModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.Application.VehicleManagement.Model.Vehicle\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"LicenseNumber\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Brand\");\r\n\r\n                    b.Property<string>(\"OwnerId\");\r\n\r\n                    b.Property<string>(\"Type\");\r\n\r\n                    b.HasKey(\"LicenseNumber\");\r\n\r\n                    b.ToTable(\"Vehicle\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Brand\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"OwnerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Type\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Migrations.VehicleManagementDBContextModelSnapshot",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot"
    ],
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(VehicleManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(VehicleManagementDBContext)"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "BuildModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.Application.VehicleManagement.Model.Vehicle\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"LicenseNumber\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Brand\");\r\n\r\n                    b.Property<string>(\"OwnerId\");\r\n\r\n                    b.Property<string>(\"Type\");\r\n\r\n                    b.HasKey(\"LicenseNumber\");\r\n\r\n                    b.ToTable(\"Vehicle\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Brand\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"OwnerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Type\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Model.Vehicle",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Program",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Main",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostExtensions",
            "Name": "Run"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Application.VehicleManagement.Program",
            "Name": "BuildWebHost",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "BuildWebHost",
        "ReturnType": "Microsoft.AspNetCore.Hosting.IWebHost",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "WebHost.CreateDefaultBuilder(args)\r\n                .UseSerilog()\r\n                .UseHealthChecks(\"/hc\")\r\n                .UseStartup<Startup>()\r\n                .Build()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.IWebHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions",
            "Name": "UseStartup<Startup>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.HealthCheckWebHostBuilderExtension",
            "Name": "UseHealthChecks",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/hc\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogWebHostBuilderExtensions",
            "Name": "UseSerilog"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.WebHost",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.Application.VehicleManagement.Startup",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_configuration",
        "Type": "Microsoft.Extensions.Configuration.IConfiguration"
      }
    ],
    "Constructors": [
      {
        "Name": "Startup",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "configuration"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_configuration",
            "Operator": "=",
            "Right": "configuration"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "ConfigureServices",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
            "Name": "services"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleManagementCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions",
            "Name": "AddDbContext<VehicleManagementDBContext>",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.DbContextOptionsBuilder>",
                "Text": "options => options.UseSqlServer(sqlConnectionString)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions",
            "Name": "UseSqlServer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sqlConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessagePublisher>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessagePublisher>",
                "Text": "(sp) => new RabbitMQMessagePublisher(host, userName, password, \"Pitstop\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessagePublisher",
            "Name": "RabbitMQMessagePublisher",
            "Arguments": [
              {
                "Type": "string",
                "Text": "host"
              },
              {
                "Type": "string",
                "Text": "userName"
              },
              {
                "Type": "string",
                "Text": "password"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions",
            "Name": "AddNewtonsoftJson"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
            "Name": "AddMvc",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>",
                "Text": "options => options.EnableEndpointRouting = false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "options.EnableEndpointRouting",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenServiceCollectionExtensions",
            "Name": "AddSwaggerGen",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"VehicleManagement API\", Version = \"v1\" });\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions",
            "Name": "SwaggerDoc",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"v1\""
              },
              {
                "Type": "Microsoft.OpenApi.Models.OpenApiInfo",
                "Text": "new OpenApiInfo { Title = \"VehicleManagement API\", Version = \"v1\" }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.OpenApi.Models.OpenApiInfo",
            "Name": "OpenApiInfo",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Title = \"VehicleManagement API\""
              },
              {
                "Type": "string",
                "Text": "Version = \"v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Title",
            "Operator": "=",
            "Right": "\"VehicleManagement API\""
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Version",
            "Operator": "=",
            "Right": "\"v1\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions",
            "Name": "AddHealthChecks",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.HealthChecks.HealthCheckBuilder>",
                "Text": "checks =>\r\n            {\r\n                checks.WithDefaultCacheDuration(TimeSpan.FromSeconds(1));\r\n                checks.AddSqlCheck(\"VehicleManagementCN\", _configuration.GetConnectionString(\"VehicleManagementCN\"));\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilder",
            "Name": "WithDefaultCacheDuration",
            "Arguments": [
              {
                "Type": "System.TimeSpan",
                "Text": "TimeSpan.FromSeconds(1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilderSqlServerExtensions",
            "Name": "AddSqlCheck",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleManagementCN\""
              },
              {
                "Type": "string",
                "Text": "_configuration.GetConnectionString(\"VehicleManagementCN\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleManagementCN\""
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Configure",
        "Parameters": [
          {
            "Type": "Microsoft.AspNetCore.Builder.IApplicationBuilder",
            "Name": "app"
          },
          {
            "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
            "Name": "env"
          },
          {
            "Type": "Microsoft.Extensions.Hosting.IHostApplicationLifetime",
            "Name": "lifetime"
          },
          {
            "Type": "Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext",
            "Name": "dbContext"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Log.Logger",
            "Operator": "=",
            "Right": "new LoggerConfiguration()\r\n                .ReadFrom.Configuration(_configuration)\r\n                .Enrich.WithMachineName()\r\n                .CreateLogger()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "CreateLogger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.EnvironmentLoggerConfigurationExtensions",
            "Name": "WithMachineName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "_configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "LoggerConfiguration"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions",
            "Name": "UseMvc"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.DefaultFilesExtensions",
            "Name": "UseDefaultFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.StaticFileExtensions",
            "Name": "UseStaticFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerBuilderExtensions",
            "Name": "UseSwagger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions",
            "Name": "UseSwaggerUI",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"VehicleManagement API - v1\");\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions",
            "Name": "SwaggerEndpoint",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/swagger/v1/swagger.json\""
              },
              {
                "Type": "string",
                "Text": "\"VehicleManagement API - v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.IServiceScopeFactory",
            "Name": "CreateScope"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions",
            "Name": "GetRequiredService<IServiceScopeFactory>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Application.VehicleManagement.DataAccess.VehicleManagementDBContext",
            "Name": "MigrateDB"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions",
            "Name": "GetService<VehicleManagementDBContext>"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "PitStop.Controllers.CustomerManagementController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_customerManagementAPI",
        "Type": "WebApp.RESTClients.ICustomerManagementAPI",
        "Modifiers": 132
      },
      {
        "Name": "_logger",
        "Type": "Microsoft.Extensions.Logging.ILogger",
        "Modifiers": 132
      },
      {
        "Name": "_resiliencyHelper",
        "Type": "PitStop.Controllers.ResiliencyHelper"
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerManagementController",
        "Parameters": [
          {
            "Type": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "customerManagementAPI"
          },
          {
            "Type": "Microsoft.Extensions.Logging.ILogger<PitStop.Controllers.CustomerManagementController>",
            "Name": "logger"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_customerManagementAPI",
            "Operator": "=",
            "Right": "customerManagementAPI"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_logger",
            "Operator": "=",
            "Right": "logger"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_resiliencyHelper",
            "Operator": "=",
            "Right": "new ResiliencyHelper(_logger)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ResiliencyHelper",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Logging.ILogger",
                "Text": "_logger"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Index",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                var model = new CustomerManagementViewModel\r\n                {\r\n                    Customers = await _customerManagementAPI.GetCustomers()\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new CustomerManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                var model = new CustomerManagementViewModel\r\n                {\r\n                    Customers = await _customerManagementAPI.GetCustomers()\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new CustomerManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.CustomerManagementViewModel",
            "Name": "CustomerManagementViewModel",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.Models.Customer>",
                "Text": "Customers = await _customerManagementAPI.GetCustomers()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customers",
            "Operator": "=",
            "Right": "await _customerManagementAPI.GetCustomers()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomers"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.CustomerManagementViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
                "Text": "new CustomerManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
            "Name": "CustomerManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Details",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "id"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                var model = new CustomerManagementDetailsViewModel\r\n                {\r\n                    Customer = await _customerManagementAPI.GetCustomerById(id)\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new CustomerManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                var model = new CustomerManagementDetailsViewModel\r\n                {\r\n                    Customer = await _customerManagementAPI.GetCustomerById(id)\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new CustomerManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.CustomerManagementDetailsViewModel",
            "Name": "CustomerManagementDetailsViewModel",
            "Arguments": [
              {
                "Type": "Pitstop.Models.Customer",
                "Text": "Customer = await _customerManagementAPI.GetCustomerById(id)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customer",
            "Operator": "=",
            "Right": "await _customerManagementAPI.GetCustomerById(id)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomerById",
            "Arguments": [
              {
                "Type": "string",
                "Text": "id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.CustomerManagementDetailsViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
                "Text": "new CustomerManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
            "Name": "CustomerManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "New",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.CustomerManagementNewViewModel",
            "Name": "CustomerManagementNewViewModel",
            "Arguments": [
              {
                "Type": "Pitstop.Models.Customer",
                "Text": "Customer = new Customer()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customer",
            "Operator": "=",
            "Right": "new Customer()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Models.Customer",
            "Name": "Customer"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.CustomerManagementNewViewModel",
                "Text": "model"
              }
            ]
          }
        ],
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Register",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.CustomerManagementNewViewModel",
            "Name": "inputModel",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromFormAttribute",
                "Name": "FromForm"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n                {\r\n                    RegisterCustomer cmd = inputModel.MapToRegisterCustomer();\r\n                    await _customerManagementAPI.RegisterCustomer(cmd);\r\n                    return RedirectToAction(\"Index\");\r\n                }, View(\"Offline\", new CustomerManagementOfflineViewModel()))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "PitStop.Controllers.ResiliencyHelper",
                    "Name": "ExecuteResilient",
                    "Arguments": [
                      {
                        "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                        "Text": "async () =>\r\n                {\r\n                    RegisterCustomer cmd = inputModel.MapToRegisterCustomer();\r\n                    await _customerManagementAPI.RegisterCustomer(cmd);\r\n                    return RedirectToAction(\"Index\");\r\n                }"
                      },
                      {
                        "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                        "Text": "View(\"Offline\", new CustomerManagementOfflineViewModel())"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WebApp.Mappers.Mappers",
                    "Name": "MapToRegisterCustomer"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
                    "Name": "RegisterCustomer",
                    "Arguments": [
                      {
                        "Type": "WebApp.Commands.RegisterCustomer",
                        "Text": "cmd"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "RedirectToAction(\"Index\")"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "RedirectToAction",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Index\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Offline\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
                        "Text": "new CustomerManagementOfflineViewModel()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
                    "Name": "CustomerManagementOfflineViewModel"
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "View(\"New\", inputModel)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"New\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.CustomerManagementNewViewModel",
                        "Text": "inputModel"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      }
    ]
  },
  {
    "FullName": "PitStop.Controllers.HomeController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Index",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View"
          }
        ],
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "About",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View"
          }
        ],
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Error",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View"
          }
        ],
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      }
    ]
  },
  {
    "FullName": "PitStop.Controllers.ResiliencyHelper",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_logger",
        "Type": "Microsoft.Extensions.Logging.ILogger"
      }
    ],
    "Constructors": [
      {
        "Name": "ResiliencyHelper",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Logging.ILogger",
            "Name": "logger"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_logger",
            "Operator": "=",
            "Right": "logger"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "ExecuteResilient",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
            "Name": "action"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.IActionResult",
            "Name": "fallbackResult"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncRetrySyntax",
            "Name": "RetryAsync",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>",
            "Arguments": [
              {
                "Type": "System.Func<System.Exception, bool>",
                "Text": "(ex) => \r\n                    { \r\n                        _logger.LogWarning($\"Error occured during request-execution. Polly will retry. Exception: {ex.Message}\"); \r\n                        return true; \r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Logging.LoggerExtensions",
            "Name": "LogWarning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Error occured during request-execution. Polly will retry. Exception: {ex.Message}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncFallbackTResultSyntax",
            "Name": "FallbackAsync",
            "Arguments": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.IActionResult",
                "Text": "fallbackResult"
              },
              {
                "Type": "System.Func<Polly.DelegateResult<Microsoft.AspNetCore.Mvc.IActionResult>, Polly.Context, System.Threading.Tasks.Task>",
                "Text": "(e, c) => Task.Run(() => _logger.LogError($\"Error occured during request-execution. Polly will fallback. Exception: {e.Exception.ToString()}\"))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy<Microsoft.AspNetCore.Mvc.IActionResult>",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "Run",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => _logger.LogError($\"Error occured during request-execution. Polly will fallback. Exception: {e.Exception.ToString()}\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Logging.LoggerExtensions",
            "Name": "LogError",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Error occured during request-execution. Polly will fallback. Exception: {e.Exception.ToString()}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Exception",
            "Name": "ToString"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await fallbackPolicy\r\n                .WrapAsync(retryPolicy)\r\n                .ExecuteAsync(action)\r\n                .ConfigureAwait(false)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
            "Name": "ConfigureAwait",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy<Microsoft.AspNetCore.Mvc.IActionResult>",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "action"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy<Microsoft.AspNetCore.Mvc.IActionResult>",
            "Name": "WrapAsync",
            "Arguments": [
              {
                "Type": "Polly.Retry.AsyncRetryPolicy",
                "Text": "retryPolicy"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "PitStop.Controllers.VehicleManagementController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_vehicleManagementAPI",
        "Type": "WebApp.RESTClients.IVehicleManagementAPI"
      },
      {
        "Name": "_customerManagementAPI",
        "Type": "WebApp.RESTClients.ICustomerManagementAPI"
      },
      {
        "Name": "_logger",
        "Type": "Microsoft.Extensions.Logging.ILogger",
        "Modifiers": 132
      },
      {
        "Name": "_resiliencyHelper",
        "Type": "PitStop.Controllers.ResiliencyHelper"
      }
    ],
    "Constructors": [
      {
        "Name": "VehicleManagementController",
        "Parameters": [
          {
            "Type": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "vehicleManagementAPI"
          },
          {
            "Type": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "customerManagementAPI"
          },
          {
            "Type": "Microsoft.Extensions.Logging.ILogger<PitStop.Controllers.VehicleManagementController>",
            "Name": "logger"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_vehicleManagementAPI",
            "Operator": "=",
            "Right": "vehicleManagementAPI"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_customerManagementAPI",
            "Operator": "=",
            "Right": "customerManagementAPI"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_logger",
            "Operator": "=",
            "Right": "logger"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_resiliencyHelper",
            "Operator": "=",
            "Right": "new ResiliencyHelper(_logger)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ResiliencyHelper",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Logging.ILogger",
                "Text": "_logger"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Index",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                var model = new VehicleManagementViewModel\r\n                {\r\n                    Vehicles = await _vehicleManagementAPI.GetVehicles()\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new VehicleManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                var model = new VehicleManagementViewModel\r\n                {\r\n                    Vehicles = await _vehicleManagementAPI.GetVehicles()\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new VehicleManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementViewModel",
            "Name": "VehicleManagementViewModel",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.Models.Vehicle>",
                "Text": "Vehicles = await _vehicleManagementAPI.GetVehicles()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicles",
            "Operator": "=",
            "Right": "await _vehicleManagementAPI.GetVehicles()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "GetVehicles"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.VehicleManagementViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
                "Text": "new VehicleManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
            "Name": "VehicleManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Details",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                Vehicle vehicle = await _vehicleManagementAPI.GetVehicleByLicenseNumber(licenseNumber);\r\n                Customer customer = await _customerManagementAPI.GetCustomerById(vehicle.OwnerId);\r\n\r\n                var model = new VehicleManagementDetailsViewModel\r\n                {\r\n                    Vehicle = vehicle,\r\n                    Owner = customer.Name\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new VehicleManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                Vehicle vehicle = await _vehicleManagementAPI.GetVehicleByLicenseNumber(licenseNumber);\r\n                Customer customer = await _customerManagementAPI.GetCustomerById(vehicle.OwnerId);\r\n\r\n                var model = new VehicleManagementDetailsViewModel\r\n                {\r\n                    Vehicle = vehicle,\r\n                    Owner = customer.Name\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new VehicleManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "GetVehicleByLicenseNumber",
            "Arguments": [
              {
                "Type": "string",
                "Text": "licenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomerById",
            "Arguments": [
              {
                "Type": "string",
                "Text": "vehicle.OwnerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementDetailsViewModel",
            "Name": "VehicleManagementDetailsViewModel",
            "Arguments": [
              {
                "Type": "Pitstop.Models.Vehicle",
                "Text": "Vehicle = vehicle"
              },
              {
                "Type": "string",
                "Text": "Owner = customer.Name"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicle",
            "Operator": "=",
            "Right": "vehicle"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Owner",
            "Operator": "=",
            "Right": "customer.Name"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.VehicleManagementDetailsViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
                "Text": "new VehicleManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
            "Name": "VehicleManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "New",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                // get customerlist\r\n                var customers = await _customerManagementAPI.GetCustomers();\r\n\r\n                var model = new VehicleManagementNewViewModel\r\n                {\r\n                    Vehicle = new Vehicle(),\r\n                    Customers = customers.Select(c => new SelectListItem { Value = c.CustomerId, Text = c.Name })\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new VehicleManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                // get customerlist\r\n                var customers = await _customerManagementAPI.GetCustomers();\r\n\r\n                var model = new VehicleManagementNewViewModel\r\n                {\r\n                    Vehicle = new Vehicle(),\r\n                    Customers = customers.Select(c => new SelectListItem { Value = c.CustomerId, Text = c.Name })\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new VehicleManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomers"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementNewViewModel",
            "Name": "VehicleManagementNewViewModel",
            "Arguments": [
              {
                "Type": "Pitstop.Models.Vehicle",
                "Text": "Vehicle = new Vehicle()"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                "Text": "Customers = customers.Select(c => new SelectListItem { Value = c.CustomerId, Text = c.Name })"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicle",
            "Operator": "=",
            "Right": "new Vehicle()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Models.Vehicle",
            "Name": "Vehicle"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customers",
            "Operator": "=",
            "Right": "customers.Select(c => new SelectListItem { Value = c.CustomerId, Text = c.Name })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Select",
            "Arguments": [
              {
                "Type": "System.Func<Pitstop.Models.Customer, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                "Text": "c => new SelectListItem { Value = c.CustomerId, Text = c.Name }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
            "Name": "SelectListItem",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Value = c.CustomerId"
              },
              {
                "Type": "string",
                "Text": "Text = c.Name"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Value",
            "Operator": "=",
            "Right": "c.CustomerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Text",
            "Operator": "=",
            "Right": "c.Name"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.VehicleManagementNewViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
                "Text": "new VehicleManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
            "Name": "VehicleManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Register",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.VehicleManagementNewViewModel",
            "Name": "inputModel",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromFormAttribute",
                "Name": "FromForm"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n                {\r\n                    RegisterVehicle cmd = inputModel.MapToRegisterVehicle();\r\n                    await _vehicleManagementAPI.RegisterVehicle(cmd);\r\n                    return RedirectToAction(\"Index\");\r\n                }, View(\"Offline\", new VehicleManagementOfflineViewModel()))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "PitStop.Controllers.ResiliencyHelper",
                    "Name": "ExecuteResilient",
                    "Arguments": [
                      {
                        "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                        "Text": "async () =>\r\n                {\r\n                    RegisterVehicle cmd = inputModel.MapToRegisterVehicle();\r\n                    await _vehicleManagementAPI.RegisterVehicle(cmd);\r\n                    return RedirectToAction(\"Index\");\r\n                }"
                      },
                      {
                        "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                        "Text": "View(\"Offline\", new VehicleManagementOfflineViewModel())"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WebApp.Mappers.Mappers",
                    "Name": "MapToRegisterVehicle"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
                    "Name": "RegisterVehicle",
                    "Arguments": [
                      {
                        "Type": "WebApp.Commands.RegisterVehicle",
                        "Text": "cmd"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "RedirectToAction(\"Index\")"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "RedirectToAction",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Index\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Offline\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
                        "Text": "new VehicleManagementOfflineViewModel()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
                    "Name": "VehicleManagementOfflineViewModel"
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "View(\"New\", inputModel)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"New\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.VehicleManagementNewViewModel",
                        "Text": "inputModel"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      },
      {
        "Name": "Error",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View"
          }
        ],
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      }
    ]
  },
  {
    "FullName": "PitStop.Controllers.WorkshopManagementController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_workshopManagementAPI",
        "Type": "WebApp.RESTClients.IWorkshopManagementAPI"
      },
      {
        "Name": "_logger",
        "Type": "Microsoft.Extensions.Logging.ILogger",
        "Modifiers": 132
      },
      {
        "Name": "_resiliencyHelper",
        "Type": "PitStop.Controllers.ResiliencyHelper"
      }
    ],
    "Constructors": [
      {
        "Name": "WorkshopManagementController",
        "Parameters": [
          {
            "Type": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "workshopManagamentAPI"
          },
          {
            "Type": "Microsoft.Extensions.Logging.ILogger<PitStop.Controllers.WorkshopManagementController>",
            "Name": "logger"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_workshopManagementAPI",
            "Operator": "=",
            "Right": "workshopManagamentAPI"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_logger",
            "Operator": "=",
            "Right": "logger"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_resiliencyHelper",
            "Operator": "=",
            "Right": "new ResiliencyHelper(_logger)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ResiliencyHelper",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Logging.ILogger",
                "Text": "_logger"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Index",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime?",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                if (planningDate == null)\r\n                {\r\n                    planningDate = DateTime.Now.Date;\r\n                }\r\n\r\n                var model = new WorkshopManagementViewModel\r\n                {\r\n                    Date = planningDate.Value,\r\n                    MaintenanceJobs = new List<MaintenanceJob>()\r\n                };\r\n\r\n                // get planning\r\n                string dateStr = planningDate.Value.ToString(\"yyyy-MM-dd\");\r\n                WorkshopPlanning planning = await _workshopManagementAPI.GetWorkshopPlanning(dateStr);\r\n                if (planning?.Jobs?.Count > 0)\r\n                {\r\n                    model.MaintenanceJobs.AddRange(planning.Jobs.OrderBy(j => j.StartTime));\r\n                }\r\n\r\n                return View(model);\r\n            }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                if (planningDate == null)\r\n                {\r\n                    planningDate = DateTime.Now.Date;\r\n                }\r\n\r\n                var model = new WorkshopManagementViewModel\r\n                {\r\n                    Date = planningDate.Value,\r\n                    MaintenanceJobs = new List<MaintenanceJob>()\r\n                };\r\n\r\n                // get planning\r\n                string dateStr = planningDate.Value.ToString(\"yyyy-MM-dd\");\r\n                WorkshopPlanning planning = await _workshopManagementAPI.GetWorkshopPlanning(dateStr);\r\n                if (planning?.Jobs?.Count > 0)\r\n                {\r\n                    model.MaintenanceJobs.AddRange(planning.Jobs.OrderBy(j => j.StartTime));\r\n                }\r\n\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planningDate == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "planningDate",
                    "Operator": "=",
                    "Right": "DateTime.Now.Date"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementViewModel",
            "Name": "WorkshopManagementViewModel",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "Date = planningDate.Value"
              },
              {
                "Type": "System.Collections.Generic.List<Pitstop.Models.MaintenanceJob>",
                "Text": "MaintenanceJobs = new List<MaintenanceJob>()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Date",
            "Operator": "=",
            "Right": "planningDate.Value"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MaintenanceJobs",
            "Operator": "=",
            "Right": "new List<MaintenanceJob>()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Models.MaintenanceJob>",
            "Name": "List<MaintenanceJob>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetWorkshopPlanning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "dateStr"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning?.Jobs?.Count > 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<Pitstop.Models.MaintenanceJob>",
                    "Name": "AddRange",
                    "Arguments": [
                      {
                        "Type": "System.Linq.IOrderedEnumerable<Pitstop.Models.MaintenanceJob>",
                        "Text": "planning.Jobs.OrderBy(j => j.StartTime)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "OrderBy",
                    "Arguments": [
                      {
                        "Type": "System.Func<Pitstop.Models.MaintenanceJob, System.DateTime>",
                        "Text": "j => j.StartTime"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                "Text": "new WorkshopManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
            "Name": "WorkshopManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Details",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                string dateStr = planningDate.ToString(\"yyyy-MM-dd\");\r\n                var model = new WorkshopManagementDetailsViewModel\r\n                {\r\n                    Date = planningDate,\r\n                    MaintenanceJob = await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId)\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                string dateStr = planningDate.ToString(\"yyyy-MM-dd\");\r\n                var model = new WorkshopManagementDetailsViewModel\r\n                {\r\n                    Date = planningDate,\r\n                    MaintenanceJob = await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId)\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementDetailsViewModel",
            "Name": "WorkshopManagementDetailsViewModel",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "Date = planningDate"
              },
              {
                "Type": "Pitstop.Models.MaintenanceJob",
                "Text": "MaintenanceJob = await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Date",
            "Operator": "=",
            "Right": "planningDate"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MaintenanceJob",
            "Operator": "=",
            "Right": "await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetMaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "dateStr"
              },
              {
                "Type": "string",
                "Text": "jobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementDetailsViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                "Text": "new WorkshopManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
            "Name": "WorkshopManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "New",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                DateTime startTime = planningDate.Date.AddHours(8);\r\n\r\n                var model = new WorkshopManagementNewViewModel\r\n                {\r\n                    Id = Guid.NewGuid(),\r\n                    Date = planningDate,\r\n                    StartTime = startTime,\r\n                    EndTime = startTime.AddHours(2),\r\n                    Vehicles = await GetAvailableVehiclesList()\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                DateTime startTime = planningDate.Date.AddHours(8);\r\n\r\n                var model = new WorkshopManagementNewViewModel\r\n                {\r\n                    Id = Guid.NewGuid(),\r\n                    Date = planningDate,\r\n                    StartTime = startTime,\r\n                    EndTime = startTime.AddHours(2),\r\n                    Vehicles = await GetAvailableVehiclesList()\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "AddHours",
            "Arguments": [
              {
                "Type": "int",
                "Text": "8"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
            "Name": "WorkshopManagementNewViewModel",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Id = Guid.NewGuid()"
              },
              {
                "Type": "System.DateTime",
                "Text": "Date = planningDate"
              },
              {
                "Type": "System.DateTime",
                "Text": "StartTime = startTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "EndTime = startTime.AddHours(2)"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                "Text": "Vehicles = await GetAvailableVehiclesList()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Id",
            "Operator": "=",
            "Right": "Guid.NewGuid()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Date",
            "Operator": "=",
            "Right": "planningDate"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "startTime.AddHours(2)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "AddHours",
            "Arguments": [
              {
                "Type": "int",
                "Text": "2"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicles",
            "Operator": "=",
            "Right": "await GetAvailableVehiclesList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.WorkshopManagementController",
            "Name": "GetAvailableVehiclesList"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                "Text": "new WorkshopManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
            "Name": "WorkshopManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "Finish",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n            {\r\n                string dateStr = planningDate.ToString(\"yyyy-MM-dd\");\r\n                MaintenanceJob job = await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId);\r\n                var model = new WorkshopManagementFinishViewModel\r\n                {\r\n                    Id = job.Id,\r\n                    Date = planningDate,\r\n                    ActualStartTime = job.StartTime,\r\n                    ActualEndTime = job.EndTime\r\n                };\r\n                return View(model);\r\n            }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Controllers.ResiliencyHelper",
            "Name": "ExecuteResilient",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                "Text": "async () =>\r\n            {\r\n                string dateStr = planningDate.ToString(\"yyyy-MM-dd\");\r\n                MaintenanceJob job = await _workshopManagementAPI.GetMaintenanceJob(dateStr, jobId);\r\n                var model = new WorkshopManagementFinishViewModel\r\n                {\r\n                    Id = job.Id,\r\n                    Date = planningDate,\r\n                    ActualStartTime = job.StartTime,\r\n                    ActualEndTime = job.EndTime\r\n                };\r\n                return View(model);\r\n            }"
              },
              {
                "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetMaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "dateStr"
              },
              {
                "Type": "string",
                "Text": "jobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementFinishViewModel",
            "Name": "WorkshopManagementFinishViewModel",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Id = job.Id"
              },
              {
                "Type": "System.DateTime",
                "Text": "Date = planningDate"
              },
              {
                "Type": "System.DateTime?",
                "Text": "ActualStartTime = job.StartTime"
              },
              {
                "Type": "System.DateTime?",
                "Text": "ActualEndTime = job.EndTime"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Id",
            "Operator": "=",
            "Right": "job.Id"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Date",
            "Operator": "=",
            "Right": "planningDate"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "ActualStartTime",
            "Operator": "=",
            "Right": "job.StartTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "ActualEndTime",
            "Operator": "=",
            "Right": "job.EndTime"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View(model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementFinishViewModel",
                "Text": "model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Offline\""
              },
              {
                "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                "Text": "new WorkshopManagementOfflineViewModel()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
            "Name": "WorkshopManagementOfflineViewModel"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          }
        ]
      },
      {
        "Name": "RegisterMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
            "Name": "inputModel",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromFormAttribute",
                "Name": "FromForm"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n                {\r\n                    string dateStr = inputModel.Date.ToString(\"yyyy-MM-dd\");\r\n                    \r\n                    try\r\n                    {\r\n                        // register maintenance job\r\n                        DateTime startTime = inputModel.Date.Add(inputModel.StartTime.TimeOfDay);\r\n                        DateTime endTime = inputModel.Date.Add(inputModel.EndTime.TimeOfDay);\r\n                        Vehicle vehicle = await _workshopManagementAPI.GetVehicleByLicenseNumber(inputModel.SelectedVehicleLicenseNumber);\r\n                        Customer customer = await _workshopManagementAPI.GetCustomerById(vehicle.OwnerId);\r\n\r\n                        PlanMaintenanceJob planMaintenanceJobCommand = new PlanMaintenanceJob(Guid.NewGuid(), Guid.NewGuid(), startTime, endTime,\r\n                            (customer.CustomerId, customer.Name, customer.TelephoneNumber),\r\n                            (vehicle.LicenseNumber, vehicle.Brand, vehicle.Type), inputModel.Description);\r\n                        await _workshopManagementAPI.PlanMaintenanceJob(dateStr, planMaintenanceJobCommand);\r\n                    }\r\n                    catch (ApiException ex)\r\n                    {\r\n                        if (ex.StatusCode == HttpStatusCode.Conflict)\r\n                        {\r\n                            // add errormessage from API exception to model\r\n                            var content = await ex.GetContentAsAsync<BusinessRuleViolation>();\r\n                            inputModel.Error = content.ErrorMessage;\r\n\r\n                            // repopulate list of available vehicles in the model\r\n                            inputModel.Vehicles = await GetAvailableVehiclesList();\r\n\r\n                            // back to New view\r\n                            return View(\"New\", inputModel);\r\n                        }\r\n                    }\r\n\r\n                    return RedirectToAction(\"Index\", new { planningDate = dateStr });\r\n                }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "PitStop.Controllers.ResiliencyHelper",
                    "Name": "ExecuteResilient",
                    "Arguments": [
                      {
                        "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                        "Text": "async () =>\r\n                {\r\n                    string dateStr = inputModel.Date.ToString(\"yyyy-MM-dd\");\r\n                    \r\n                    try\r\n                    {\r\n                        // register maintenance job\r\n                        DateTime startTime = inputModel.Date.Add(inputModel.StartTime.TimeOfDay);\r\n                        DateTime endTime = inputModel.Date.Add(inputModel.EndTime.TimeOfDay);\r\n                        Vehicle vehicle = await _workshopManagementAPI.GetVehicleByLicenseNumber(inputModel.SelectedVehicleLicenseNumber);\r\n                        Customer customer = await _workshopManagementAPI.GetCustomerById(vehicle.OwnerId);\r\n\r\n                        PlanMaintenanceJob planMaintenanceJobCommand = new PlanMaintenanceJob(Guid.NewGuid(), Guid.NewGuid(), startTime, endTime,\r\n                            (customer.CustomerId, customer.Name, customer.TelephoneNumber),\r\n                            (vehicle.LicenseNumber, vehicle.Brand, vehicle.Type), inputModel.Description);\r\n                        await _workshopManagementAPI.PlanMaintenanceJob(dateStr, planMaintenanceJobCommand);\r\n                    }\r\n                    catch (ApiException ex)\r\n                    {\r\n                        if (ex.StatusCode == HttpStatusCode.Conflict)\r\n                        {\r\n                            // add errormessage from API exception to model\r\n                            var content = await ex.GetContentAsAsync<BusinessRuleViolation>();\r\n                            inputModel.Error = content.ErrorMessage;\r\n\r\n                            // repopulate list of available vehicles in the model\r\n                            inputModel.Vehicles = await GetAvailableVehiclesList();\r\n\r\n                            // back to New view\r\n                            return View(\"New\", inputModel);\r\n                        }\r\n                    }\r\n\r\n                    return RedirectToAction(\"Index\", new { planningDate = dateStr });\r\n                }"
                      },
                      {
                        "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                        "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"yyyy-MM-dd\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "System.TimeSpan",
                        "Text": "inputModel.StartTime.TimeOfDay"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "System.TimeSpan",
                        "Text": "inputModel.EndTime.TimeOfDay"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
                    "Name": "GetVehicleByLicenseNumber",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "inputModel.SelectedVehicleLicenseNumber"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
                    "Name": "GetCustomerById",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "vehicle.OwnerId"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.Commands.PlanMaintenanceJob",
                    "Name": "PlanMaintenanceJob",
                    "Arguments": [
                      {
                        "Type": "System.Guid",
                        "Text": "Guid.NewGuid()"
                      },
                      {
                        "Type": "System.Guid",
                        "Text": "Guid.NewGuid()"
                      },
                      {
                        "Type": "System.DateTime",
                        "Text": "startTime"
                      },
                      {
                        "Type": "System.DateTime",
                        "Text": "endTime"
                      },
                      {
                        "Type": "(string CustomerId, string Name, string TelephoneNumber)",
                        "Text": "(customer.CustomerId, customer.Name, customer.TelephoneNumber)"
                      },
                      {
                        "Type": "(string LicenseNumber, string Brand, string Type)",
                        "Text": "(vehicle.LicenseNumber, vehicle.Brand, vehicle.Type)"
                      },
                      {
                        "Type": "string",
                        "Text": "inputModel.Description"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Guid",
                    "Name": "NewGuid"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Guid",
                    "Name": "NewGuid"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
                    "Name": "PlanMaintenanceJob",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "dateStr"
                      },
                      {
                        "Type": "WebApp.Commands.PlanMaintenanceJob",
                        "Text": "planMaintenanceJobCommand"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "ex.StatusCode == HttpStatusCode.Conflict",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Refit.ApiException",
                            "Name": "GetContentAsAsync<BusinessRuleViolation>"
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "inputModel.Error",
                            "Operator": "=",
                            "Right": "content.ErrorMessage"
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "inputModel.Vehicles",
                            "Operator": "=",
                            "Right": "await GetAvailableVehiclesList()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "PitStop.Controllers.WorkshopManagementController",
                            "Name": "GetAvailableVehiclesList"
                          },
                          {
                            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                            "Expression": "View(\"New\", inputModel)"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                            "Name": "View",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "\"New\""
                              },
                              {
                                "Type": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
                                "Text": "inputModel"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "RedirectToAction(\"Index\", new { planningDate = dateStr })"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "RedirectToAction",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Index\""
                      },
                      {
                        "Type": "<anonymous type: string planningDate>",
                        "Text": "new { planningDate = dateStr }"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Offline\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                        "Text": "new WorkshopManagementOfflineViewModel()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                    "Name": "WorkshopManagementOfflineViewModel"
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "inputModel.Vehicles",
                    "Operator": "=",
                    "Right": "await GetAvailableVehiclesList()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "PitStop.Controllers.WorkshopManagementController",
                    "Name": "GetAvailableVehiclesList"
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "View(\"New\", inputModel)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"New\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
                        "Text": "inputModel"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      },
      {
        "Name": "FinishMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.WorkshopManagementFinishViewModel",
            "Name": "inputModel",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromFormAttribute",
                "Name": "FromForm"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "await _resiliencyHelper.ExecuteResilient(async () =>\r\n                {\r\n                    string dateStr = inputModel.Date.ToString(\"yyyy-MM-dd\");\r\n                    DateTime actualStartTime = inputModel.Date.Add(inputModel.ActualStartTime.Value.TimeOfDay);\r\n                    DateTime actualEndTime = inputModel.Date.Add(inputModel.ActualEndTime.Value.TimeOfDay);\r\n\r\n                    FinishMaintenanceJob cmd = new FinishMaintenanceJob(Guid.NewGuid(), inputModel.Id,\r\n                        actualStartTime, actualEndTime, inputModel.Notes);\r\n\r\n                    await _workshopManagementAPI.FinishMaintenanceJob(dateStr, inputModel.Id.ToString(\"D\"), cmd);\r\n\r\n                    return RedirectToAction(\"Details\", new { planningDate = dateStr, jobId = inputModel.Id });\r\n                }, View(\"Offline\", new WorkshopManagementOfflineViewModel()))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "PitStop.Controllers.ResiliencyHelper",
                    "Name": "ExecuteResilient",
                    "Arguments": [
                      {
                        "Type": "System.Func<System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>>",
                        "Text": "async () =>\r\n                {\r\n                    string dateStr = inputModel.Date.ToString(\"yyyy-MM-dd\");\r\n                    DateTime actualStartTime = inputModel.Date.Add(inputModel.ActualStartTime.Value.TimeOfDay);\r\n                    DateTime actualEndTime = inputModel.Date.Add(inputModel.ActualEndTime.Value.TimeOfDay);\r\n\r\n                    FinishMaintenanceJob cmd = new FinishMaintenanceJob(Guid.NewGuid(), inputModel.Id,\r\n                        actualStartTime, actualEndTime, inputModel.Notes);\r\n\r\n                    await _workshopManagementAPI.FinishMaintenanceJob(dateStr, inputModel.Id.ToString(\"D\"), cmd);\r\n\r\n                    return RedirectToAction(\"Details\", new { planningDate = dateStr, jobId = inputModel.Id });\r\n                }"
                      },
                      {
                        "Type": "Microsoft.AspNetCore.Mvc.ViewResult",
                        "Text": "View(\"Offline\", new WorkshopManagementOfflineViewModel())"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"yyyy-MM-dd\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "System.TimeSpan",
                        "Text": "inputModel.ActualStartTime.Value.TimeOfDay"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "System.TimeSpan",
                        "Text": "inputModel.ActualEndTime.Value.TimeOfDay"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.Commands.FinishMaintenanceJob",
                    "Name": "FinishMaintenanceJob",
                    "Arguments": [
                      {
                        "Type": "System.Guid",
                        "Text": "Guid.NewGuid()"
                      },
                      {
                        "Type": "System.Guid",
                        "Text": "inputModel.Id"
                      },
                      {
                        "Type": "System.DateTime",
                        "Text": "actualStartTime"
                      },
                      {
                        "Type": "System.DateTime",
                        "Text": "actualEndTime"
                      },
                      {
                        "Type": "string",
                        "Text": "inputModel.Notes"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Guid",
                    "Name": "NewGuid"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
                    "Name": "FinishMaintenanceJob",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "dateStr"
                      },
                      {
                        "Type": "string",
                        "Text": "inputModel.Id.ToString(\"D\")"
                      },
                      {
                        "Type": "WebApp.Commands.FinishMaintenanceJob",
                        "Text": "cmd"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Guid",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"D\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "RedirectToAction(\"Details\", new { planningDate = dateStr, jobId = inputModel.Id })"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "RedirectToAction",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Details\""
                      },
                      {
                        "Type": "<anonymous type: string planningDate, System.Guid jobId>",
                        "Text": "new { planningDate = dateStr, jobId = inputModel.Id }"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Offline\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                        "Text": "new WorkshopManagementOfflineViewModel()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
                    "Name": "WorkshopManagementOfflineViewModel"
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "View(\"Finish\", inputModel)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                    "Name": "View",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Finish\""
                      },
                      {
                        "Type": "Pitstop.ViewModels.WorkshopManagementFinishViewModel",
                        "Text": "inputModel"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          }
        ]
      },
      {
        "Name": "Error",
        "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "View()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
            "Name": "View"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "GetAvailableVehiclesList",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetVehicles"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "vehicles.Select(v =>\r\n                new SelectListItem\r\n                {\r\n                    Value = v.LicenseNumber,\r\n                    Text = $\"{v.Brand} {v.Type} [{v.LicenseNumber}]\"\r\n                })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Select",
            "Arguments": [
              {
                "Type": "System.Func<Pitstop.Models.Vehicle, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                "Text": "v =>\r\n                new SelectListItem\r\n                {\r\n                    Value = v.LicenseNumber,\r\n                    Text = $\"{v.Brand} {v.Type} [{v.LicenseNumber}]\"\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
            "Name": "SelectListItem",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Value = v.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "Text = $\"{v.Brand} {v.Type} [{v.LicenseNumber}]\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Value",
            "Operator": "=",
            "Right": "v.LicenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Text",
            "Operator": "=",
            "Right": "$\"{v.Brand} {v.Type} [{v.LicenseNumber}]\""
          }
        ],
        "Modifiers": 260
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Commands.RegisterCustomer",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterCustomer",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "address"
          },
          {
            "Type": "string",
            "Name": "postalCode"
          },
          {
            "Type": "string",
            "Name": "city"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          },
          {
            "Type": "string",
            "Name": "emailAddress"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "postalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "city"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "emailAddress"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.DbContext"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "CustomerManagementDBContext",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.DbContextOptions<Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext>",
            "Name": "options"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Customers",
        "Type": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.CustomerManagementAPI.Model.Customer>",
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "OnModelCreating",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "builder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Pitstop.CustomerManagementAPI.Model.Customer>",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.CustomerManagementAPI.Model.Customer, object>>",
                "Text": "m => m.CustomerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Customer>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Customer>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "OnModelCreating",
            "Arguments": [
              {
                "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
                "Text": "builder"
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "MigrateDB",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => Database.Migrate()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions",
            "Name": "Migrate"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Events.CustomerRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "address"
          },
          {
            "Type": "string",
            "Name": "postalCode"
          },
          {
            "Type": "string",
            "Name": "city"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          },
          {
            "Type": "string",
            "Name": "emailAddress"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "postalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "city"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "emailAddress"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Mappers.Mappers",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "MapToCustomerRegistered",
        "ReturnType": "Pitstop.CustomerManagementAPI.Events.CustomerRegistered",
        "Parameters": [
          {
            "Type": "Pitstop.CustomerManagementAPI.Commands.RegisterCustomer",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new CustomerRegistered\r\n        (\r\n            System.Guid.NewGuid(),\r\n            command.CustomerId,\r\n            command.Name,\r\n            command.Address,\r\n            command.PostalCode,\r\n            command.City,\r\n            command.TelephoneNumber,\r\n            command.EmailAddress\r\n        )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.CustomerManagementAPI.Events.CustomerRegistered",
            "Name": "CustomerRegistered",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "System.Guid.NewGuid()"
              },
              {
                "Type": "string",
                "Text": "command.CustomerId"
              },
              {
                "Type": "string",
                "Text": "command.Name"
              },
              {
                "Type": "string",
                "Text": "command.Address"
              },
              {
                "Type": "string",
                "Text": "command.PostalCode"
              },
              {
                "Type": "string",
                "Text": "command.City"
              },
              {
                "Type": "string",
                "Text": "command.TelephoneNumber"
              },
              {
                "Type": "string",
                "Text": "command.EmailAddress"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "MapToCustomer",
        "ReturnType": "Pitstop.CustomerManagementAPI.Model.Customer",
        "Parameters": [
          {
            "Type": "Pitstop.CustomerManagementAPI.Commands.RegisterCustomer",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new Customer\r\n        {\r\n            CustomerId = command.CustomerId,\r\n            Name = command.Name,\r\n            Address = command.Address,\r\n            PostalCode = command.PostalCode,\r\n            City = command.City,\r\n            TelephoneNumber = command.TelephoneNumber,\r\n            EmailAddress = command.EmailAddress\r\n        }"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.CustomerManagementAPI.Model.Customer",
            "Name": "Customer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "CustomerId = command.CustomerId"
              },
              {
                "Type": "string",
                "Text": "Name = command.Name"
              },
              {
                "Type": "string",
                "Text": "Address = command.Address"
              },
              {
                "Type": "string",
                "Text": "PostalCode = command.PostalCode"
              },
              {
                "Type": "string",
                "Text": "City = command.City"
              },
              {
                "Type": "string",
                "Text": "TelephoneNumber = command.TelephoneNumber"
              },
              {
                "Type": "string",
                "Text": "EmailAddress = command.EmailAddress"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "command.CustomerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "command.Name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "command.Address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "command.PostalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "command.City"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "command.TelephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "command.EmailAddress"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Migrations.CustomerManagementDBContextModelSnapshot",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot"
    ],
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(CustomerManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(CustomerManagementDBContext)"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "BuildModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.CustomerManagementAPI.Model.Customer\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"CustomerId\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Address\");\r\n\r\n                    b.Property<string>(\"City\");\r\n\r\n                    b.Property<string>(\"EmailAddress\");\r\n\r\n                    b.Property<string>(\"Name\");\r\n\r\n                    b.Property<string>(\"PostalCode\");\r\n\r\n                    b.Property<string>(\"TelephoneNumber\");\r\n\r\n                    b.HasKey(\"CustomerId\");\r\n\r\n                    b.ToTable(\"Customer\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Address\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"City\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EmailAddress\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Name\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PostalCode\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"TelephoneNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Migrations.v1",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Migrations.Migration"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(CustomerManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(CustomerManagementDBContext)"
          }
        ]
      },
      {
        "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute",
        "Name": "Migration",
        "Arguments": [
          {
            "Name": "\"20170313134834_v1\"",
            "Type": "string",
            "Value": "20170313134834_v1"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "Up",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              },
              {
                "Type": "System.Func<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder, <anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Address, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> City, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EmailAddress, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> PostalCode, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>",
                "Text": "table => new\r\n                {\r\n                    CustomerId = table.Column<string>(nullable: false),\r\n                    Address = table.Column<string>(nullable: true),\r\n                    City = table.Column<string>(nullable: true),\r\n                    EmailAddress = table.Column<string>(nullable: true),\r\n                    Name = table.Column<string>(nullable: true),\r\n                    PostalCode = table.Column<string>(nullable: true),\r\n                    TelephoneNumber = table.Column<string>(nullable: true)\r\n                }"
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Address, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> City, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EmailAddress, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> PostalCode, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>>",
                "Text": "table =>\r\n                {\r\n                    table.PrimaryKey(\"PK_Customer\", x => x.CustomerId);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Address, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> City, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EmailAddress, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> PostalCode, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>",
            "Name": "PrimaryKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PK_Customer\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Address, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> City, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EmailAddress, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> PostalCode, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>, object>>",
                "Text": "x => x.CustomerId"
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "Down",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "BuildTargetModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.CustomerManagementAPI.Model.Customer\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"CustomerId\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"AccountNumber\");\r\n\r\n                    b.Property<string>(\"Address\");\r\n\r\n                    b.Property<string>(\"City\");\r\n\r\n                    b.Property<string>(\"EmailAddress\");\r\n\r\n                    b.Property<string>(\"Name\");\r\n\r\n                    b.Property<string>(\"PostalCode\");\r\n\r\n                    b.Property<string>(\"TelephoneNumber\");\r\n\r\n                    b.HasKey(\"CustomerId\");\r\n\r\n                    b.ToTable(\"Customer\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"AccountNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Address\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"City\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EmailAddress\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Name\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PostalCode\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"TelephoneNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Model.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Program",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Main",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostExtensions",
            "Name": "Run"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.CustomerManagementAPI.Program",
            "Name": "BuildWebHost",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "BuildWebHost",
        "ReturnType": "Microsoft.AspNetCore.Hosting.IWebHost",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "WebHost.CreateDefaultBuilder()\r\n                .UseSerilog()\r\n                .UseHealthChecks(\"/hc\")\r\n                .UseStartup<Startup>()\r\n                .Build()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.IWebHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions",
            "Name": "UseStartup<Startup>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.HealthCheckWebHostBuilderExtension",
            "Name": "UseHealthChecks",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/hc\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogWebHostBuilderExtensions",
            "Name": "UseSerilog"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.WebHost",
            "Name": "CreateDefaultBuilder"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.CustomerManagementAPI.Startup",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_configuration",
        "Type": "Microsoft.Extensions.Configuration.IConfiguration"
      }
    ],
    "Constructors": [
      {
        "Name": "Startup",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "configuration"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_configuration",
            "Operator": "=",
            "Right": "configuration"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "ConfigureServices",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
            "Name": "services"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerManagementCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions",
            "Name": "AddDbContext<CustomerManagementDBContext>",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.DbContextOptionsBuilder>",
                "Text": "options => options.UseSqlServer(sqlConnectionString)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions",
            "Name": "UseSqlServer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sqlConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessagePublisher>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessagePublisher>",
                "Text": "(sp) => new RabbitMQMessagePublisher(host, userName, password, \"Pitstop\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessagePublisher",
            "Name": "RabbitMQMessagePublisher",
            "Arguments": [
              {
                "Type": "string",
                "Text": "host"
              },
              {
                "Type": "string",
                "Text": "userName"
              },
              {
                "Type": "string",
                "Text": "password"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions",
            "Name": "AddNewtonsoftJson"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
            "Name": "AddMvc",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>",
                "Text": "options => options.EnableEndpointRouting = false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "options.EnableEndpointRouting",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenServiceCollectionExtensions",
            "Name": "AddSwaggerGen",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"CustomerManagement API\", Version = \"v1\" });\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions",
            "Name": "SwaggerDoc",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"v1\""
              },
              {
                "Type": "Microsoft.OpenApi.Models.OpenApiInfo",
                "Text": "new OpenApiInfo { Title = \"CustomerManagement API\", Version = \"v1\" }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.OpenApi.Models.OpenApiInfo",
            "Name": "OpenApiInfo",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Title = \"CustomerManagement API\""
              },
              {
                "Type": "string",
                "Text": "Version = \"v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Title",
            "Operator": "=",
            "Right": "\"CustomerManagement API\""
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Version",
            "Operator": "=",
            "Right": "\"v1\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions",
            "Name": "AddHealthChecks",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.HealthChecks.HealthCheckBuilder>",
                "Text": "checks =>\r\n            {\r\n                checks.WithDefaultCacheDuration(TimeSpan.FromSeconds(1));\r\n                checks.AddSqlCheck(\"CustomerManagementCN\", _configuration.GetConnectionString(\"CustomerManagementCN\"));\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilder",
            "Name": "WithDefaultCacheDuration",
            "Arguments": [
              {
                "Type": "System.TimeSpan",
                "Text": "TimeSpan.FromSeconds(1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilderSqlServerExtensions",
            "Name": "AddSqlCheck",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerManagementCN\""
              },
              {
                "Type": "string",
                "Text": "_configuration.GetConnectionString(\"CustomerManagementCN\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerManagementCN\""
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Configure",
        "Parameters": [
          {
            "Type": "Microsoft.AspNetCore.Builder.IApplicationBuilder",
            "Name": "app"
          },
          {
            "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
            "Name": "env"
          },
          {
            "Type": "Microsoft.Extensions.Hosting.IHostApplicationLifetime",
            "Name": "lifetime"
          },
          {
            "Type": "Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext",
            "Name": "dbContext"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Log.Logger",
            "Operator": "=",
            "Right": "new LoggerConfiguration()\r\n                .ReadFrom.Configuration(_configuration)\r\n                .Enrich.WithMachineName()\r\n                .CreateLogger()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "CreateLogger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.EnvironmentLoggerConfigurationExtensions",
            "Name": "WithMachineName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "_configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "LoggerConfiguration"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions",
            "Name": "UseMvc"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.DefaultFilesExtensions",
            "Name": "UseDefaultFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.StaticFileExtensions",
            "Name": "UseStaticFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerBuilderExtensions",
            "Name": "UseSwagger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions",
            "Name": "UseSwaggerUI",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"CustomerManagement API - v1\");\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions",
            "Name": "SwaggerEndpoint",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/swagger/v1/swagger.json\""
              },
              {
                "Type": "string",
                "Text": "\"CustomerManagement API - v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.IServiceScopeFactory",
            "Name": "CreateScope"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions",
            "Name": "GetRequiredService<IServiceScopeFactory>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.CustomerManagementAPI.DataAccess.CustomerManagementDBContext",
            "Name": "MigrateDB"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions",
            "Name": "GetService<CustomerManagementDBContext>"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.Command",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Message"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "Command",
        "Modifiers": 2
      },
      {
        "Name": "Command",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Command",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Command",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.Event",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Message"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "Event",
        "Modifiers": 2
      },
      {
        "Name": "Event",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Event",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Event",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.Infrastructure.Messaging.IMessageHandler",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Start",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback",
            "Name": "callback"
          }
        ]
      },
      {
        "Name": "Stop"
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "HandleMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "PublishMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "object",
            "Name": "message"
          },
          {
            "Type": "string",
            "Name": "routingKey"
          }
        ],
        "DocumentationComments": {
          "Summary": "Publish a message.",
          "Params": {
            "messageType": "Type of the message.",
            "message": "The message to publish.",
            "routingKey": "The routingkey to use (RabbitMQ specific)."
          }
        }
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.Message",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "MessageId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "MessageType",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "Message",
        "Modifiers": 2
      },
      {
        "Name": "Message",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MessageId",
            "Operator": "=",
            "Right": "messageId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MessageType",
            "Operator": "=",
            "Right": "this.GetType().Name"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "object",
            "Name": "GetType"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Message",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MessageType",
            "Operator": "=",
            "Right": "messageType"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Message",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "messageType"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MessageId",
            "Operator": "=",
            "Right": "messageId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "MessageType",
            "Operator": "=",
            "Right": "messageType"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.MessageSerializer",
    "DocumentationComments": {
      "Summary": "Serializer used for all messages."
    },
    "Modifiers": 18,
    "Fields": [
      {
        "Name": "_serializerSettings",
        "Type": "Newtonsoft.Json.JsonSerializerSettings",
        "Modifiers": 20
      }
    ],
    "Constructors": [
      {
        "Name": "MessageSerializer",
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_serializerSettings",
            "Operator": "=",
            "Right": "new JsonSerializerSettings()\r\n            {\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat\r\n            }"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonSerializerSettings",
            "Name": "JsonSerializerSettings",
            "Arguments": [
              {
                "Type": "Newtonsoft.Json.DateFormatHandling",
                "Text": "DateFormatHandling = DateFormatHandling.IsoDateFormat"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "DateFormatHandling",
            "Operator": "=",
            "Right": "DateFormatHandling.IsoDateFormat"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.ICollection<Newtonsoft.Json.JsonConverter>",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "Newtonsoft.Json.Converters.StringEnumConverter",
                "Text": "new StringEnumConverter \r\n            { \r\n                NamingStrategy = new CamelCaseNamingStrategy()\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Converters.StringEnumConverter",
            "Name": "StringEnumConverter",
            "Arguments": [
              {
                "Type": "Newtonsoft.Json.Serialization.NamingStrategy",
                "Text": "NamingStrategy = new CamelCaseNamingStrategy()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "NamingStrategy",
            "Operator": "=",
            "Right": "new CamelCaseNamingStrategy()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Serialization.CamelCaseNamingStrategy",
            "Name": "CamelCaseNamingStrategy"
          }
        ],
        "Modifiers": 20,
        "DocumentationComments": {
          "Summary": "Constructor."
        }
      }
    ],
    "Methods": [
      {
        "Name": "Serialize",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "object",
            "Name": "value"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "JsonConvert.SerializeObject(value, _serializerSettings)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonConvert",
            "Name": "SerializeObject",
            "Arguments": [
              {
                "Type": "object",
                "Text": "value"
              },
              {
                "Type": "Newtonsoft.Json.JsonSerializerSettings",
                "Text": "_serializerSettings"
              }
            ]
          }
        ],
        "Modifiers": 18,
        "DocumentationComments": {
          "Summary": "Serialize an object to a JSON string.",
          "Params": {
            "value": "The value to serialize."
          }
        }
      },
      {
        "Name": "Deserialize",
        "ReturnType": "Newtonsoft.Json.Linq.JObject",
        "Parameters": [
          {
            "Type": "string",
            "Name": "value"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "JsonConvert.DeserializeObject<JObject>(value, _serializerSettings)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonConvert",
            "Name": "DeserializeObject<JObject>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "value"
              },
              {
                "Type": "Newtonsoft.Json.JsonSerializerSettings",
                "Text": "_serializerSettings"
              }
            ]
          }
        ],
        "Modifiers": 18,
        "DocumentationComments": {
          "Summary": "Deserialize JSON to an object.",
          "Params": {
            "value": "The JSON data to deserialize."
          }
        }
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.RabbitMQMessageHandler",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.IMessageHandler"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_hosts",
        "Type": "System.Collections.Generic.List<string>",
        "Modifiers": 132
      },
      {
        "Name": "_username",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_password",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_exchange",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_queuename",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_routingKey",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_connection",
        "Type": "RabbitMQ.Client.IConnection"
      },
      {
        "Name": "_model",
        "Type": "RabbitMQ.Client.IModel"
      },
      {
        "Name": "_consumer",
        "Type": "RabbitMQ.Client.Events.AsyncEventingBasicConsumer"
      },
      {
        "Name": "_consumerTag",
        "Type": "string"
      },
      {
        "Name": "_callback",
        "Type": "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback"
      }
    ],
    "Constructors": [
      {
        "Name": "RabbitMQMessageHandler",
        "Parameters": [
          {
            "Type": "string",
            "Name": "host"
          },
          {
            "Type": "string",
            "Name": "username"
          },
          {
            "Type": "string",
            "Name": "password"
          },
          {
            "Type": "string",
            "Name": "exchange"
          },
          {
            "Type": "string",
            "Name": "queuename"
          },
          {
            "Type": "string",
            "Name": "routingKey"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RabbitMQMessageHandler",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<string>",
            "Name": "hosts"
          },
          {
            "Type": "string",
            "Name": "username"
          },
          {
            "Type": "string",
            "Name": "password"
          },
          {
            "Type": "string",
            "Name": "exchange"
          },
          {
            "Type": "string",
            "Name": "queuename"
          },
          {
            "Type": "string",
            "Name": "routingKey"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_hosts",
            "Operator": "=",
            "Right": "new List<string>(hosts)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "List<string>",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<string>",
                "Text": "hosts"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_username",
            "Operator": "=",
            "Right": "username"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_password",
            "Operator": "=",
            "Right": "password"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_exchange",
            "Operator": "=",
            "Right": "exchange"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_queuename",
            "Operator": "=",
            "Right": "queuename"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_routingKey",
            "Operator": "=",
            "Right": "routingKey"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Start",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback",
            "Name": "callback"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_callback",
            "Operator": "=",
            "Right": "callback"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() =>\r\n                {\r\n                    var factory = new ConnectionFactory() { UserName = _username, Password = _password, DispatchConsumersAsync = true };\r\n                    _connection = factory.CreateConnection(_hosts);\r\n                    _model = _connection.CreateModel();\r\n                    _model.ExchangeDeclare(_exchange, \"fanout\", durable: true, autoDelete: false);\r\n                    _model.QueueDeclare(_queuename, durable: true, autoDelete: false, exclusive: false);\r\n                    _model.QueueBind(_queuename, _exchange, _routingKey);\r\n                    _consumer = new AsyncEventingBasicConsumer(_model);\r\n                    _consumer.Received += Consumer_Received;\r\n                    _consumerTag = _model.BasicConsume(_queuename, false, _consumer);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "9"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(5)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error connecting to RabbitMQ. Retrying in 5 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to RabbitMQ. Retrying in 5 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.ConnectionFactory",
            "Name": "ConnectionFactory",
            "Arguments": [
              {
                "Type": "string",
                "Text": "UserName = _username"
              },
              {
                "Type": "string",
                "Text": "Password = _password"
              },
              {
                "Type": "bool",
                "Text": "DispatchConsumersAsync = true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "UserName",
            "Operator": "=",
            "Right": "_username"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Password",
            "Operator": "=",
            "Right": "_password"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "DispatchConsumersAsync",
            "Operator": "=",
            "Right": "true"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_connection",
            "Operator": "=",
            "Right": "factory.CreateConnection(_hosts)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.ConnectionFactory",
            "Name": "CreateConnection",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "_hosts"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_model",
            "Operator": "=",
            "Right": "_connection.CreateModel()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IConnection",
            "Name": "CreateModel"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "ExchangeDeclare",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_exchange"
              },
              {
                "Type": "string",
                "Text": "\"fanout\""
              },
              {
                "Type": "bool",
                "Text": "true"
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "QueueDeclare",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_queuename"
              },
              {
                "Type": "bool",
                "Text": "true"
              },
              {
                "Type": "bool",
                "Text": "false"
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "QueueBind",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_queuename"
              },
              {
                "Type": "string",
                "Text": "_exchange"
              },
              {
                "Type": "string",
                "Text": "_routingKey"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_consumer",
            "Operator": "=",
            "Right": "new AsyncEventingBasicConsumer(_model)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.Events.AsyncEventingBasicConsumer",
            "Name": "AsyncEventingBasicConsumer",
            "Arguments": [
              {
                "Type": "RabbitMQ.Client.IModel",
                "Text": "_model"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_consumer.Received",
            "Operator": "+=",
            "Right": "Consumer_Received"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_consumerTag",
            "Operator": "=",
            "Right": "_model.BasicConsume(_queuename, false, _consumer)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "BasicConsume",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_queuename"
              },
              {
                "Type": "bool",
                "Text": "false"
              },
              {
                "Type": "RabbitMQ.Client.Events.AsyncEventingBasicConsumer",
                "Text": "_consumer"
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Stop",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModel",
            "Name": "BasicCancel",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_consumerTag"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModel",
            "Name": "Close",
            "Arguments": [
              {
                "Type": "int",
                "Text": "200"
              },
              {
                "Type": "string",
                "Text": "\"Goodbye\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IConnection",
            "Name": "Close"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Consumer_Received",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "object",
            "Name": "sender"
          },
          {
            "Type": "RabbitMQ.Client.Events.BasicDeliverEventArgs",
            "Name": "ea"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "await HandleEvent(ea)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "RabbitMQ.Client.IModel",
                    "Name": "BasicAck",
                    "Arguments": [
                      {
                        "Type": "ulong",
                        "Text": "ea.DeliveryTag"
                      },
                      {
                        "Type": "bool",
                        "Text": "false"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleEvent",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "RabbitMQ.Client.Events.BasicDeliverEventArgs",
            "Name": "ea"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.Encoding",
            "Name": "GetString",
            "Arguments": [
              {
                "Type": "byte[]",
                "Text": "(byte[])ea.BasicProperties.Headers[\"MessageType\"]"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.Encoding",
            "Name": "GetString",
            "Arguments": [
              {
                "Type": "byte[]",
                "Text": "ea.Body"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "_callback.HandleMessageAsync(messageType, body)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback",
            "Name": "HandleMessageAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "messageType"
              },
              {
                "Type": "string",
                "Text": "body"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Infrastructure.Messaging.RabbitMQMessagePublisher",
    "DocumentationComments": {
      "Summary": "RabbitMQ implementation of the MessagePublisher."
    },
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.IMessagePublisher"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_hosts",
        "Type": "System.Collections.Generic.List<string>",
        "Modifiers": 132
      },
      {
        "Name": "_username",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_password",
        "Type": "string",
        "Modifiers": 132
      },
      {
        "Name": "_exchange",
        "Type": "string",
        "Modifiers": 132
      }
    ],
    "Constructors": [
      {
        "Name": "RabbitMQMessagePublisher",
        "Parameters": [
          {
            "Type": "string",
            "Name": "host"
          },
          {
            "Type": "string",
            "Name": "username"
          },
          {
            "Type": "string",
            "Name": "password"
          },
          {
            "Type": "string",
            "Name": "exchange"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RabbitMQMessagePublisher",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<string>",
            "Name": "hosts"
          },
          {
            "Type": "string",
            "Name": "username"
          },
          {
            "Type": "string",
            "Name": "password"
          },
          {
            "Type": "string",
            "Name": "exchange"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_hosts",
            "Operator": "=",
            "Right": "new List<string>(hosts)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "List<string>",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<string>",
                "Text": "hosts"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_username",
            "Operator": "=",
            "Right": "username"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_password",
            "Operator": "=",
            "Right": "password"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_exchange",
            "Operator": "=",
            "Right": "exchange"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "PublishMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "object",
            "Name": "message"
          },
          {
            "Type": "string",
            "Name": "routingKey"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.Run(() =>\r\n                Policy\r\n                    .Handle<Exception>()\r\n                    .WaitAndRetry(9, r => TimeSpan.FromSeconds(5), (ex, ts) => { Log.Error(\"Error connecting to RabbitMQ. Retrying in 5 sec.\"); })\r\n                    .Execute(() =>\r\n                    {\r\n                        var factory = new ConnectionFactory() { UserName = _username, Password = _password };\r\n                        using (var connection = factory.CreateConnection(_hosts))\r\n                        {\r\n                            using (var model = connection.CreateModel())\r\n                            {\r\n                                model.ExchangeDeclare(_exchange, \"fanout\", durable: true, autoDelete: false);\r\n                                string data = MessageSerializer.Serialize(message);\r\n                                var body = Encoding.UTF8.GetBytes(data);\r\n                                IBasicProperties properties = model.CreateBasicProperties();\r\n                                properties.Headers = new Dictionary<string, object> { { \"MessageType\", messageType } };\r\n                                model.BasicPublish(_exchange, routingKey, properties, body);\r\n                            }\r\n                        }\r\n                    }))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "Run",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() =>\r\n                Policy\r\n                    .Handle<Exception>()\r\n                    .WaitAndRetry(9, r => TimeSpan.FromSeconds(5), (ex, ts) => { Log.Error(\"Error connecting to RabbitMQ. Retrying in 5 sec.\"); })\r\n                    .Execute(() =>\r\n                    {\r\n                        var factory = new ConnectionFactory() { UserName = _username, Password = _password };\r\n                        using (var connection = factory.CreateConnection(_hosts))\r\n                        {\r\n                            using (var model = connection.CreateModel())\r\n                            {\r\n                                model.ExchangeDeclare(_exchange, \"fanout\", durable: true, autoDelete: false);\r\n                                string data = MessageSerializer.Serialize(message);\r\n                                var body = Encoding.UTF8.GetBytes(data);\r\n                                IBasicProperties properties = model.CreateBasicProperties();\r\n                                properties.Headers = new Dictionary<string, object> { { \"MessageType\", messageType } };\r\n                                model.BasicPublish(_exchange, routingKey, properties, body);\r\n                            }\r\n                        }\r\n                    })"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() =>\r\n                    {\r\n                        var factory = new ConnectionFactory() { UserName = _username, Password = _password };\r\n                        using (var connection = factory.CreateConnection(_hosts))\r\n                        {\r\n                            using (var model = connection.CreateModel())\r\n                            {\r\n                                model.ExchangeDeclare(_exchange, \"fanout\", durable: true, autoDelete: false);\r\n                                string data = MessageSerializer.Serialize(message);\r\n                                var body = Encoding.UTF8.GetBytes(data);\r\n                                IBasicProperties properties = model.CreateBasicProperties();\r\n                                properties.Headers = new Dictionary<string, object> { { \"MessageType\", messageType } };\r\n                                model.BasicPublish(_exchange, routingKey, properties, body);\r\n                            }\r\n                        }\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "9"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(5)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error connecting to RabbitMQ. Retrying in 5 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to RabbitMQ. Retrying in 5 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.ConnectionFactory",
            "Name": "ConnectionFactory",
            "Arguments": [
              {
                "Type": "string",
                "Text": "UserName = _username"
              },
              {
                "Type": "string",
                "Text": "Password = _password"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "UserName",
            "Operator": "=",
            "Right": "_username"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Password",
            "Operator": "=",
            "Right": "_password"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.ConnectionFactory",
            "Name": "CreateConnection",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "_hosts"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IConnection",
            "Name": "CreateModel"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "ExchangeDeclare",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_exchange"
              },
              {
                "Type": "string",
                "Text": "\"fanout\""
              },
              {
                "Type": "bool",
                "Text": "true"
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.MessageSerializer",
            "Name": "Serialize",
            "Arguments": [
              {
                "Type": "object",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.Encoding",
            "Name": "GetBytes",
            "Arguments": [
              {
                "Type": "string",
                "Text": "data"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModel",
            "Name": "CreateBasicProperties"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "properties.Headers",
            "Operator": "=",
            "Right": "new Dictionary<string, object> { { \"MessageType\", messageType } }"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.Dictionary<string, object>",
            "Name": "Dictionary<string, object>",
            "Arguments": [
              {
                "Text": "{ \"MessageType\", messageType }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "RabbitMQ.Client.IModelExensions",
            "Name": "BasicPublish",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_exchange"
              },
              {
                "Type": "string",
                "Text": "routingKey"
              },
              {
                "Type": "RabbitMQ.Client.IBasicProperties",
                "Text": "properties"
              },
              {
                "Type": "byte[]",
                "Text": "body"
              }
            ]
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "Publish a message.",
          "Params": {
            "messageType": "Type of the message.",
            "message": "The message to publish.",
            "routingKey": "The routingkey to use (RabbitMQ specific)."
          }
        }
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "SendEmailAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Net.Mail.MailMessage",
            "Name": "message"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.CommunicationChannels.SMTPEmailCommunicator",
    "BaseTypes": [
      "Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_smptServer",
        "Type": "string"
      },
      {
        "Name": "_smtpPort",
        "Type": "int"
      },
      {
        "Name": "_userName",
        "Type": "string"
      },
      {
        "Name": "_password",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SMTPEmailCommunicator",
        "Parameters": [
          {
            "Type": "string",
            "Name": "smtpServer"
          },
          {
            "Type": "int",
            "Name": "smtpPort"
          },
          {
            "Type": "string",
            "Name": "userName"
          },
          {
            "Type": "string",
            "Name": "password"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_smptServer",
            "Operator": "=",
            "Right": "smtpServer"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_smtpPort",
            "Operator": "=",
            "Right": "smtpPort"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_userName",
            "Operator": "=",
            "Right": "userName"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_password",
            "Operator": "=",
            "Right": "password"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "SendEmailAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Net.Mail.MailMessage",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.SmtpClient",
            "Name": "SmtpClient",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_smptServer"
              },
              {
                "Type": "int",
                "Text": "_smtpPort"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "client.UseDefaultCredentials",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "client.Credentials",
            "Operator": "=",
            "Right": "new NetworkCredential(\"_username\", \"_password\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.NetworkCredential",
            "Name": "NetworkCredential",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"_username\""
              },
              {
                "Type": "string",
                "Text": "\"_password\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "ContinueWith",
            "Arguments": [
              {
                "Type": "System.Action<System.Threading.Tasks.Task>",
                "Text": "_ => Log.Information($\"Invoice mail sent to printing company.\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "() => client.SendMailAsync(message)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "3"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(2)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error sending mail. Retrying in 2 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "2"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error sending mail. Retrying in 2 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.SmtpClient",
            "Name": "SendMailAsync",
            "Arguments": [
              {
                "Type": "System.Net.Mail.MailMessage",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Invoice mail sent to printing company.\""
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Events.CustomerRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "address"
          },
          {
            "Type": "string",
            "Name": "postalCode"
          },
          {
            "Type": "string",
            "Name": "city"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "postalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "city"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Events.DayHasPassed",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "DayHasPassed",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Events.MaintenanceJobFinished",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobFinished",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Events.MaintenanceJobPlanned",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobPlanned",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.InvoiceManager",
    "BaseTypes": [
      "Microsoft.Extensions.Hosting.IHostedService",
      "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "HOURLY_RATE",
        "Type": "decimal",
        "Initializer": "18.50M"
      },
      {
        "Name": "_messageHandler",
        "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler"
      },
      {
        "Name": "_repo",
        "Type": "Pitstop.InvoiceService.Repositories.IInvoiceRepository"
      },
      {
        "Name": "_emailCommunicator",
        "Type": "Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator"
      }
    ],
    "Constructors": [
      {
        "Name": "InvoiceManager",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "messageHandler"
          },
          {
            "Type": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
            "Name": "repo"
          },
          {
            "Type": "Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator",
            "Name": "emailCommunicator"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messageHandler",
            "Operator": "=",
            "Right": "messageHandler"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_repo",
            "Operator": "=",
            "Right": "repo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_emailCommunicator",
            "Operator": "=",
            "Right": "emailCommunicator"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "StartAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Start",
            "Arguments": [
              {
                "Type": "Pitstop.InvoiceService.InvoiceManager",
                "Text": "this"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StopAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Stop"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "HandleMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.MessageSerializer",
            "Name": "Deserialize",
            "Arguments": [
              {
                "Type": "string",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "\"CustomerRegistered\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.InvoiceService.InvoiceManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.InvoiceService.Events.CustomerRegistered",
                        "Text": "messageObject.ToObject<CustomerRegistered>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<CustomerRegistered>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobPlanned\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.InvoiceService.InvoiceManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.InvoiceService.Events.MaintenanceJobPlanned",
                        "Text": "messageObject.ToObject<MaintenanceJobPlanned>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobPlanned>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobFinished\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.InvoiceService.InvoiceManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.InvoiceService.Events.MaintenanceJobFinished",
                        "Text": "messageObject.ToObject<MaintenanceJobFinished>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobFinished>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"DayHasPassed\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.InvoiceService.InvoiceManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.InvoiceService.Events.DayHasPassed",
                        "Text": "messageObject.ToObject<DayHasPassed>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<DayHasPassed>"
                  }
                ]
              }
            ],
            "Expression": "messageType"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "System.Exception",
                "Text": "ex"
              },
              {
                "Type": "string",
                "Text": "$\"Error while handling {messageType} event.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Events.CustomerRegistered",
            "Name": "cr"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register customer: {Id}, {Name}, {Address}, {PostalCode}, {City}\""
              },
              {
                "Type": "string",
                "Text": "cr.CustomerId"
              },
              {
                "Type": "string",
                "Text": "cr.Name"
              },
              {
                "Type": "string",
                "Text": "cr.Address"
              },
              {
                "Type": "string",
                "Text": "cr.PostalCode"
              },
              {
                "Type": "string",
                "Text": "cr.City"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Model.Customer",
            "Name": "Customer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "CustomerId = cr.CustomerId"
              },
              {
                "Type": "string",
                "Text": "Name = cr.Name"
              },
              {
                "Type": "string",
                "Text": "Address = cr.Address"
              },
              {
                "Type": "string",
                "Text": "PostalCode = cr.PostalCode"
              },
              {
                "Type": "string",
                "Text": "City = cr.City"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "cr.CustomerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "cr.Name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "cr.Address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "cr.PostalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "cr.City"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
            "Name": "RegisterCustomerAsync",
            "Arguments": [
              {
                "Type": "Pitstop.InvoiceService.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Events.MaintenanceJobPlanned",
            "Name": "mjp"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register Maintenance Job: {Id}, {Description}, {CustomerId}, {VehicleLicenseNumber}\""
              },
              {
                "Type": "string",
                "Text": "mjp.JobId"
              },
              {
                "Type": "string",
                "Text": "mjp.Description"
              },
              {
                "Type": "string",
                "Text": "mjp.CustomerInfo.Id"
              },
              {
                "Type": "string",
                "Text": "mjp.VehicleInfo.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Model.MaintenanceJob",
            "Name": "MaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "JobId = mjp.JobId.ToString()"
              },
              {
                "Type": "string",
                "Text": "CustomerId = mjp.CustomerInfo.Id"
              },
              {
                "Type": "string",
                "Text": "LicenseNumber = mjp.VehicleInfo.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "Description = mjp.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "mjp.JobId.ToString()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "ToString"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "mjp.CustomerInfo.Id"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "mjp.VehicleInfo.LicenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "mjp.Description"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
            "Name": "RegisterMaintenanceJobAsync",
            "Arguments": [
              {
                "Type": "Pitstop.InvoiceService.Model.MaintenanceJob",
                "Text": "job"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Events.MaintenanceJobFinished",
            "Name": "mjf"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Finish Maintenance Job: {Id}, {StartTime}, {EndTime}\""
              },
              {
                "Type": "string",
                "Text": "mjf.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "mjf.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "mjf.EndTime"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
            "Name": "MarkMaintenanceJobAsFinished",
            "Arguments": [
              {
                "Type": "string",
                "Text": "mjf.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "mjf.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "mjf.EndTime"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Events.DayHasPassed",
            "Name": "dhp"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
            "Name": "GetMaintenanceJobsToBeInvoicedAsync"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "jobsPerCustomer in jobs.GroupBy(job => job.CustomerId)",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
                "Name": "GetCustomerAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "customerId"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.InvoiceService.Model.Invoice",
                "Name": "Invoice",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "InvoiceId = $\"{invoiceDate.ToString(\"yyyyMMddhhmmss\")}-{customerId.Substring(0, 4)}\""
                  },
                  {
                    "Type": "System.DateTime",
                    "Text": "InvoiceDate = invoiceDate.Date"
                  },
                  {
                    "Type": "string",
                    "Text": "CustomerId = customer.CustomerId"
                  },
                  {
                    "Type": "string",
                    "Text": "JobIds = string.Join('|', jobsPerCustomer.Select(j => j.JobId))"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "InvoiceId",
                "Operator": "=",
                "Right": "$\"{invoiceDate.ToString(\"yyyyMMddhhmmss\")}-{customerId.Substring(0, 4)}\""
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.DateTime",
                "Name": "ToString",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"yyyyMMddhhmmss\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "Substring",
                "Arguments": [
                  {
                    "Type": "int",
                    "Text": "0"
                  },
                  {
                    "Type": "int",
                    "Text": "4"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "InvoiceDate",
                "Operator": "=",
                "Right": "invoiceDate.Date"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "CustomerId",
                "Operator": "=",
                "Right": "customer.CustomerId"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "JobIds",
                "Operator": "=",
                "Right": "string.Join('|', jobsPerCustomer.Select(j => j.JobId))"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "Join",
                "Arguments": [
                  {
                    "Type": "char",
                    "Text": "'|'"
                  },
                  {
                    "Type": "System.Collections.Generic.IEnumerable<string>",
                    "Text": "jobsPerCustomer.Select(j => j.JobId)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "Select",
                "Arguments": [
                  {
                    "Type": "System.Func<Pitstop.InvoiceService.Model.MaintenanceJob, string>",
                    "Text": "j => j.JobId"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "StringBuilder"
              },
              {
                "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                "Expression": "job in jobsPerCustomer",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "Subtract",
                    "Arguments": [
                      {
                        "Type": "System.DateTime",
                        "Text": "job.StartTime.Value"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Math",
                    "Name": "Round",
                    "Arguments": [
                      {
                        "Type": "decimal",
                        "Text": "(decimal)duration.TotalHours * HOURLY_RATE"
                      },
                      {
                        "Type": "int",
                        "Text": "2"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "totalAmount",
                    "Operator": "+=",
                    "Right": "amount"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "AppendLine",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"{job.EndTime.Value.ToString(\"dd-MM-yyyy\")} : {job.Description} on vehicle with license {job.LicenseNumber} - Duration: {duration.TotalHours} hour - Amount: &euro; {amount}\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"dd-MM-yyyy\""
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "invoice.Specification",
                "Operator": "=",
                "Right": "specification.ToString()"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "ToString"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "invoice.Amount",
                "Operator": "=",
                "Right": "totalAmount"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.InvoiceService.InvoiceManager",
                "Name": "SendInvoice",
                "Arguments": [
                  {
                    "Type": "Pitstop.InvoiceService.Model.Customer",
                    "Text": "customer"
                  },
                  {
                    "Type": "Pitstop.InvoiceService.Model.Invoice",
                    "Text": "invoice"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
                "Name": "RegisterInvoiceAsync",
                "Arguments": [
                  {
                    "Type": "Pitstop.InvoiceService.Model.Invoice",
                    "Text": "invoice"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Serilog.Log",
                "Name": "Information",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"Invoice {Id} sent to {Customer}\""
                  },
                  {
                    "Type": "string",
                    "Text": "invoice.InvoiceId"
                  },
                  {
                    "Type": "string",
                    "Text": "customer.Name"
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "SendInvoice",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.Customer",
            "Name": "customer"
          },
          {
            "Type": "Pitstop.InvoiceService.Model.Invoice",
            "Name": "invoice"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<htm><body style='width: 1150px; font-family: Arial;'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<image src='cid:banner.jpg'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<table style='width: 100%; border: 0px; font-size: 25pt;'><tr>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td>PITSTOP GARAGE</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td style='text-align: right;'>INVOICE</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</tr></table>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<hr>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<table style='width: 100%; border: 0px;'><tr>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td width='150px' valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Invoice reference<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Invoice date<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Amount<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Payment due by<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\": {invoice.InvoiceId}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\": {invoice.InvoiceDate.ToString(\"dd-MM-yyyy\")}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"dd-MM-yyyy\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\": &euro; {invoice.Amount}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\": {invoice.InvoiceDate.AddDays(30).ToString(\"dd-MM-yyyy\")}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"dd-MM-yyyy\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "AddDays",
            "Arguments": [
              {
                "Type": "int",
                "Text": "30"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td width='50px' valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"To:\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{customer.Name}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{customer.Address}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{customer.PostalCode}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{customer.City}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</tr></table>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<hr><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Dear {customer.Name},<br/><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Hereby we send you an invoice for maintenance we executed on your vehicle(s):<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<ol>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "specificationLine in invoice.Specification.Split('\\n')",
            "Statements": [
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "specificationLine.Length > 0",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"<li>{specificationLine}</li>\""
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</ol>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Total amount : &euro; {invoice.Amount}<br/><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Payment terms : Payment within 30 days of invoice date.<br/><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Payment details<br/><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<table style='width: 100%; border: 0px;'><tr>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td width='120px' valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Bank<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Name<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"IBAN<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Reference<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<td valign='top'>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\": ING<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\": Pitstop Garage<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\": NL20INGB0001234567<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\": {invoice.InvoiceId}<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</td>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</tr></table><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Greetings,<br/><br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"The PitStop crew<br/>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"</htm></body>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailMessage",
            "Name": "MailMessage",
            "Arguments": [
              {
                "Type": "System.Net.Mail.MailAddress",
                "Text": "From = new MailAddress(\"invoicing@pitstop.nl\")"
              },
              {
                "Type": "string",
                "Text": "Subject = $\"Pitstop Garage Invoice #{invoice.InvoiceId}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "From",
            "Operator": "=",
            "Right": "new MailAddress(\"invoicing@pitstop.nl\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailAddress",
            "Name": "MailAddress",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"invoicing@pitstop.nl\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Subject",
            "Operator": "=",
            "Right": "$\"Pitstop Garage Invoice #{invoice.InvoiceId}\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailAddressCollection",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"pitstop@prestoprint.nl\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "mailMessage.Body",
            "Operator": "=",
            "Right": "body.ToString()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "ToString"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "mailMessage.IsBodyHtml",
            "Operator": "=",
            "Right": "true"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.Attachment",
            "Name": "Attachment",
            "Arguments": [
              {
                "Type": "string",
                "Text": "@\"Assets/banner.jpg\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "bannerImage.ContentId",
            "Operator": "=",
            "Right": "contentID"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "bannerImage.ContentDisposition.Inline",
            "Operator": "=",
            "Right": "true"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "bannerImage.ContentDisposition.DispositionType",
            "Operator": "=",
            "Right": "DispositionTypeNames.Inline"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.ObjectModel.Collection<System.Net.Mail.Attachment>",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "System.Net.Mail.Attachment",
                "Text": "bannerImage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator",
            "Name": "SendEmailAsync",
            "Arguments": [
              {
                "Type": "System.Net.Mail.MailMessage",
                "Text": "mailMessage"
              }
            ]
          }
        ],
        "Modifiers": 260
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Model.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Model.Invoice",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "InvoiceId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "InvoiceDate",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Amount",
        "Type": "decimal",
        "Modifiers": 2
      },
      {
        "Name": "Specification",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "JobIds",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Model.MaintenanceJob",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "JobId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "Finished",
        "Type": "bool",
        "Modifiers": 2
      },
      {
        "Name": "InvoiceSent",
        "Type": "bool",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Program",
    "Methods": [
      {
        "Name": "Main",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Program",
            "Name": "CreateHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
            "Name": "RunAsync"
          }
        ],
        "Modifiers": 274
      },
      {
        "Name": "CreateHostBuilder",
        "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingHostBuilderExtensions",
            "Name": "UseConsoleLifetime"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogHostBuilderExtensions",
            "Name": "UseSerilog",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>",
                "Text": "(hostContext, loggerConfiguration) =>\r\n                {\r\n                    loggerConfiguration.ReadFrom.Configuration(hostContext.Configuration);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureServices",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection>",
                "Text": "(hostContext, services) =>\r\n                {\r\n                    services.AddTransient<IMessageHandler>((svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Invoicing\", \"\"); ;\r\n                    });\r\n\r\n                    services.AddTransient<IInvoiceRepository>((svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"InvoiceServiceCN\");\r\n                        return new SqlServerInvoiceRepository(sqlConnectionString);\r\n                    });\r\n\r\n                    services.AddTransient<IEmailCommunicator>((svc) =>\r\n                    {\r\n                        var mailConfigSection = hostContext.Configuration.GetSection(\"Email\");\r\n                        string mailHost = mailConfigSection[\"Host\"];\r\n                        int mailPort = Convert.ToInt32(mailConfigSection[\"Port\"]);\r\n                        string mailUserName = mailConfigSection[\"User\"];\r\n                        string mailPassword = mailConfigSection[\"Pwd\"];\r\n                        return new SMTPEmailCommunicator(mailHost, mailPort, mailUserName, mailPassword);\r\n                    });\r\n\r\n                    services.AddHostedService<InvoiceManager>();\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureAppConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "(hostContext, config) =>\r\n                {\r\n                    config.AddJsonFile($\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\", optional: false);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureHostConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "configHost =>\r\n                {\r\n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\r\n                    configHost.AddJsonFile(\"hostsettings.json\", optional: true);\r\n                    configHost.AddJsonFile($\"appsettings.json\", optional: false);\r\n                    configHost.AddEnvironmentVariables();\r\n                    configHost.AddEnvironmentVariables(\"PITSTOP_\");\r\n                    configHost.AddCommandLine(args);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.Host",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.FileConfigurationExtensions",
            "Name": "SetBasePath",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"hostsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PITSTOP_\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions",
            "Name": "AddCommandLine",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessageHandler>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessageHandler>",
                "Text": "(svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Invoicing\", \"\"); ;\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Invoicing\", \"\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessageHandler",
            "Name": "RabbitMQMessageHandler",
            "Arguments": [
              {
                "Type": "string",
                "Text": "rabbitMQHost"
              },
              {
                "Type": "string",
                "Text": "rabbitMQUserName"
              },
              {
                "Type": "string",
                "Text": "rabbitMQPassword"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              },
              {
                "Type": "string",
                "Text": "\"Invoicing\""
              },
              {
                "Type": "string",
                "Text": "\"\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IInvoiceRepository>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.InvoiceService.Repositories.IInvoiceRepository>",
                "Text": "(svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"InvoiceServiceCN\");\r\n                        return new SqlServerInvoiceRepository(sqlConnectionString);\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"InvoiceServiceCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new SqlServerInvoiceRepository(sqlConnectionString)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.Repositories.SqlServerInvoiceRepository",
            "Name": "SqlServerInvoiceRepository",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sqlConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IEmailCommunicator>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.InvoiceService.CommunicationChannels.IEmailCommunicator>",
                "Text": "(svc) =>\r\n                    {\r\n                        var mailConfigSection = hostContext.Configuration.GetSection(\"Email\");\r\n                        string mailHost = mailConfigSection[\"Host\"];\r\n                        int mailPort = Convert.ToInt32(mailConfigSection[\"Port\"]);\r\n                        string mailUserName = mailConfigSection[\"User\"];\r\n                        string mailPassword = mailConfigSection[\"Pwd\"];\r\n                        return new SMTPEmailCommunicator(mailHost, mailPort, mailUserName, mailPassword);\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Email\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Convert",
            "Name": "ToInt32",
            "Arguments": [
              {
                "Type": "string",
                "Text": "mailConfigSection[\"Port\"]"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new SMTPEmailCommunicator(mailHost, mailPort, mailUserName, mailPassword)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.InvoiceService.CommunicationChannels.SMTPEmailCommunicator",
            "Name": "SMTPEmailCommunicator",
            "Arguments": [
              {
                "Type": "string",
                "Text": "mailHost"
              },
              {
                "Type": "int",
                "Text": "mailPort"
              },
              {
                "Type": "string",
                "Text": "mailUserName"
              },
              {
                "Type": "string",
                "Text": "mailPassword"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions",
            "Name": "AddHostedService<InvoiceManager>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "hostContext.Configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "hostBuilder"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.InvoiceService.Repositories.IInvoiceRepository",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "RegisterCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.Customer",
            "Name": "customer"
          }
        ]
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.InvoiceService.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ]
      },
      {
        "Name": "RegisterMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.MaintenanceJob",
            "Name": "job"
          }
        ]
      },
      {
        "Name": "MarkMaintenanceJobAsFinished",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          }
        ]
      },
      {
        "Name": "GetMaintenanceJobsToBeInvoicedAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.InvoiceService.Model.MaintenanceJob>>"
      },
      {
        "Name": "RegisterInvoiceAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.Invoice",
            "Name": "invoice"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.InvoiceService.Repositories.SqlServerInvoiceRepository",
    "BaseTypes": [
      "Pitstop.InvoiceService.Repositories.IInvoiceRepository"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_connectionString",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SqlServerInvoiceRepository",
        "Parameters": [
          {
            "Type": "string",
            "Name": "connectionString"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_connectionString",
            "Operator": "=",
            "Right": "connectionString"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Initialize Database\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "Wait"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "InitializeDB"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncRetrySyntax",
            "Name": "WaitAndRetryAsync",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error connecting to DB. Retrying in 10 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 10 sec.\""
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "InitializeDB",
        "ReturnType": "System.Threading.Tasks.Task",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString.Replace(\"Invoicing\", \"master\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Invoicing\""
              },
              {
                "Type": "string",
                "Text": "\"master\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.Common.DbConnection",
            "Name": "OpenAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "ChangeDatabase",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Invoicing\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "sql",
            "Operator": "=",
            "Right": "\"IF OBJECT_ID('Customer') IS NULL \" +\r\n                      \"CREATE TABLE Customer (\" +\r\n                      \"  CustomerId varchar(50) NOT NULL,\" +\r\n                      \"  Name varchar(50) NOT NULL,\" +\r\n                      \"  Address varchar(50),\" +\r\n                      \"  PostalCode varchar(50),\" +\r\n                      \"  City varchar(50),\" +\r\n                      \"  PRIMARY KEY(CustomerId));\" +\r\n\r\n                      \"IF OBJECT_ID('MaintenanceJob') IS NULL \" +\r\n                      \"CREATE TABLE MaintenanceJob (\" +\r\n                      \"  JobId varchar(50) NOT NULL,\" +\r\n                      \"  LicenseNumber varchar(50) NOT NULL,\" +\r\n                      \"  CustomerId varchar(50) NOT NULL,\" +\r\n                      \"  Description varchar(250) NOT NULL,\" +\r\n                      \"  StartTime datetime2 NULL,\" +\r\n                      \"  EndTime datetime2 NULL,\" +\r\n                      \"  Finished bit NOT NULL,\" +\r\n                      \"  InvoiceSent bit NOT NULL,\" +\r\n                      \"  PRIMARY KEY(JobId));\" +\r\n\r\n                      \"IF OBJECT_ID('Invoice') IS NULL \" +\r\n                      \"CREATE TABLE Invoice (\" +\r\n                      \"  InvoiceId varchar(50) NOT NULL,\" +\r\n                      \"  InvoiceDate datetime2 NOT NULL,\" +\r\n                      \"  CustomerId varchar(50) NOT NULL,\" +\r\n                      \"  Amount decimal(5,2) NOT NULL,\" +\r\n                      \"  Specification text,\" +\r\n                      \"  JobIds varchar(250),\" +\r\n                      \"  PRIMARY KEY(InvoiceId));\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.InvoiceService.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryFirstOrDefaultAsync<Customer>(\"select * from Customer where CustomerId = @CustomerId\",\r\n                    new { CustomerId = customerId })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryFirstOrDefaultAsync<Customer>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Customer where CustomerId = @CustomerId\""
              },
              {
                "Type": "<anonymous type: string CustomerId>",
                "Text": "new { CustomerId = customerId }"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.MaintenanceJob",
            "Name": "job"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "Pitstop.InvoiceService.Model.MaintenanceJob",
                "Text": "job"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.Customer",
            "Name": "customer"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "Pitstop.InvoiceService.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "MarkMaintenanceJobAsFinished",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "query"
              },
              {
                "Type": "<anonymous type: string JobId, System.DateTime StartTime, System.DateTime EndTime>",
                "Text": "new { JobId = jobId, StartTime = startTime, EndTime = endTime }"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetMaintenanceJobsToBeInvoicedAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.InvoiceService.Model.MaintenanceJob>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryAsync<MaintenanceJob>(query)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<MaintenanceJob>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "query"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterInvoiceAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.InvoiceService.Model.Invoice",
            "Name": "invoice"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "Pitstop.InvoiceService.Model.Invoice",
                "Text": "invoice"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Select",
            "Arguments": [
              {
                "Type": "System.Func<string, <anonymous type: string JobId>>",
                "Text": "jobId => new { JobId = jobId }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Split",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'|'"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "sql",
            "Operator": "=",
            "Right": "\"update MaintenanceJob \" +\r\n                    \"set InvoiceSent = 1 \" +\r\n                    \"where JobId = @JobId \""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<<anonymous type: string JobId>>",
                "Text": "jobIds"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.AggregateRenderer",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Render",
        "ReturnType": "System.Text.StringBuilder",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.IsAggregateRoot()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsAggregateRoot"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "aggregate in aggregates",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "BeginSection",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "stringBuilder"
                  },
                  {
                    "Type": "string",
                    "Text": "$\"aggregate-{aggregate.Name.ToLowerInvariant()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "ToLowerInvariant"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\".Aggregate - {aggregate.Name.ToSentenceCase()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.StringExtensions",
                "Name": "ToSentenceCase"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"[plantuml]\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"....\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "PlantUml.Builder.StringBuilderExtensions",
                "Name": "UmlDiagramStart"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "PlantUml.Builder.StringBuilderExtensions",
                "Name": "SkinParameter",
                "Arguments": [
                  {
                    "Type": "PlantUml.Builder.SkinParameter",
                    "Text": "SkinParameter.MinClassWidth"
                  },
                  {
                    "Type": "string",
                    "Text": "\"160\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"scale max 4096 height\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "PlantUml.Builder.ClassDiagrams.StringBuilderExtensions",
                "Name": "NamespaceStart",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "aggregate.Name"
                  },
                  {
                    "Type": "string",
                    "Text": "\"aggregate\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
                "Name": "FirstOrDefault",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "aggregate.GetAggregateRootId()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "GetAggregateRootId"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AggregateRenderer",
                "Name": "RenderClass",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.TypeDescription",
                    "Text": "idType"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "Append",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "idBuilder"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"{idType.Name} -- {aggregate.Name}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AggregateRenderer",
                "Name": "RenderClass",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.TypeDescription",
                    "Text": "aggregate"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "Append",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "rootBuilder"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "PlantUml.Builder.ClassDiagrams.StringBuilderExtensions",
                "Name": "NamespaceEnd"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "PlantUml.Builder.StringBuilderExtensions",
                "Name": "UmlDiagramEnd"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"....\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "EndSection",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "stringBuilder"
                  },
                  {
                    "Type": "string",
                    "Text": "$\"aggregate-{aggregate.Name.ToLowerInvariant()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "ToLowerInvariant"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "stringBuilder"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RenderClass",
        "ReturnType": "System.Text.StringBuilder",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsAbstract()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"abstract \""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsEnumeration()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"enum\""
                      }
                    ]
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"class\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\" {type.Name} \""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "RenderStereoType",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"{\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsEnumeration()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "member in type.EnumMembers",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "member.Name"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "property in type.Properties.Where(p => !p.IsPrivate())",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "RenderProperty",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "stringBuilder"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "method in type.Methods.Where(m => !m.IsPrivate() && !m.IsOverride())",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "RenderMethod",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "stringBuilder"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "propertyDescription in type.Properties",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "FirstOrDefault",
                "Arguments": [
                  {
                    "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                    "Text": "t => string.Equals(t.FullName, propertyDescription.Type) || (propertyDescription.Type.IsEnumerable() && string.Equals(t.FullName, propertyDescription.Type.GenericTypes().First()))"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "Equals",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "t.FullName"
                  },
                  {
                    "Type": "string",
                    "Text": "propertyDescription.Type"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.StringExtensions",
                "Name": "IsEnumerable"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "Equals",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "t.FullName"
                  },
                  {
                    "Type": "string",
                    "Text": "propertyDescription.Type.GenericTypes().First()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "First"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.StringExtensions",
                "Name": "GenericTypes"
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "property != null",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.AggregateRenderer",
                        "Name": "RenderClass",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.TypeDescription",
                            "Text": "property"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "Append",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "classBuilder"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "Append",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"{type.Name} -- {property.Name}\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "propertyDescription.Type.IsEnumerable()",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Text.StringBuilder",
                                "Name": "Append",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "\" : 1..*\""
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "stringBuilder"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.AsciiDocHelper",
    "Modifiers": 17,
    "Methods": [
      {
        "Name": "BeginSection",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "string",
            "Name": "section"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"== {section}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":leveloffset: +1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "BeginTag",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "section"
              }
            ]
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "EndSection",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "string",
            "Name": "section"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "EndTag",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "section"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":leveloffset: -1\""
              }
            ]
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "BeginTag",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "string",
            "Name": "tag"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"// tag::{tag}[]\""
              }
            ]
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "EndTag",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "string",
            "Name": "tag"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"// end::{tag}[]\""
              }
            ]
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "FormatChapter",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "string",
            "Name": "value"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "value",
            "Operator": "=",
            "Right": "value.ToSentenceCase()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.StringExtensions",
            "Name": "ToSentenceCase"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "value"
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "ArrowColor",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "string.Empty"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "$\"[#{(type.IsCommand() ? \"DodgerBlue\" : \"ForestGreen\")}]\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsCommand"
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "Legend",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"legend bottom right\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"|= |= Message |\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"|<#DodgerBlue>   | Command |\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"|<#ForestGreen>   | Event |\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"endlegend\""
              }
            ]
          }
        ],
        "Modifiers": 17
      },
      {
        "Name": "DefaultSequenceDiagramStyling",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam SequenceMessageAlign reverseDirection\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam SequenceGroupBodyBackgroundColor Transparent\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam SequenceBoxBackgroundColor #Gainsboro\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam SequenceArrowThickness 2\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam BoxPadding 10\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam ParticipantPadding 10\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam LifeLineStrategy solid\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam WrapMessageWidth 250\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam WrapWidth 250\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam NoteBackgroundColor Khaki\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam NoteBorderColor Black\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"skinparam Shadowing<<noshadow>> False\""
              }
            ]
          }
        ],
        "Modifiers": 17
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.AsciiDocRenderer",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Render",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocRenderer",
            "Name": "RenderFileHeader",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "new AggregateRenderer().Render()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AggregateRenderer",
            "Name": "Render"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AggregateRenderer",
            "Name": "AggregateRenderer"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "new EventsRenderer().Render()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.EventsRenderer",
            "Name": "Render"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.EventsRenderer",
            "Name": "EventsRenderer"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "new CommandsRenderer().Render()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.CommandsRenderer",
            "Name": "Render"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.CommandsRenderer",
            "Name": "CommandsRenderer"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.File",
            "Name": "WriteAllText",
            "Arguments": [
              {
                "Type": "string",
                "Text": "outputPath"
              },
              {
                "Type": "string",
                "Text": "stringBuilder.ToString()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "ToString"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Generated documentation {outputPath}\""
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RenderFileHeader",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"= This file contains generated content\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Edwin van Wijk <Edwin.van.Wijk@InfoSupport.com>\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{Assembly.GetEntryAssembly().GetName().Version.ToString(3)}, {DateTime.Today:yyyy-MM-dd}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Version",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "int",
                "Text": "3"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Reflection.Assembly",
            "Name": "GetName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Reflection.Assembly",
            "Name": "GetEntryAssembly"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":toc: left\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":toc-level: 3\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":sectnums:\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\":icons: font\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"NOTE: This document has been automatically generated\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.CommandsRenderer",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Render",
        "ReturnType": "System.Text.StringBuilder",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "BeginSection",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "\"commands\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.IsCommand()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsCommand"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "groupedType in commands.GroupBy(e => e.DisplayName())",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "First"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"== {AsciiDocHelper.FormatChapter(type.DisplayName())}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "FormatChapter",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "type.DisplayName()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "DisplayName"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine"
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "!string.IsNullOrWhiteSpace(type.DocumentationComments?.Summary)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "type.DocumentationComments?.Summary"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "type.IsDeprecated(out var message)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[IMPORTANT]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"====\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"*Command is deprecated* + \""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "!string.IsNullOrWhiteSpace(message)",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Text.StringBuilder",
                                "Name": "AppendLine",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "$\" {message}\""
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"====\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "groupedType.SelectMany(t => t.Fields).Any()",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[caption=]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\".Payload fields\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[%header,cols=\\\"s,1,3\\\"]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|===\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|Attribute|Type|Description\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "argument in groupedType.SelectMany(t => t.Fields).GroupBy(f => (f.Type, f.Name)).Select(g => g.First()).OrderBy(f => f.Name)",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "ToTypeDescription",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.List<LivingDocumentation.TypeDescription>",
                                "Text": "Program.Types"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.Name"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.Type.ForDiagram()"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.StringExtensions",
                            "Name": "ForDiagram"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.DocumentationComments?.Summary"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|===\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                "Expression": "handler in Program.Types.CommandHandlersFor(type)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                    "Name": "BeginTag",
                    "Arguments": [
                      {
                        "Type": "System.Text.StringBuilder",
                        "Text": "stringBuilder"
                      },
                      {
                        "Type": "string",
                        "Text": "$\"commands-{type.DisplayName().ToLowerInvariant()}\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "ToLowerInvariant"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "DisplayName"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.CommandsRenderer",
                    "Name": "RenderCommandDiagram",
                    "Arguments": [
                      {
                        "Type": "System.Text.StringBuilder",
                        "Text": "stringBuilder"
                      },
                      {
                        "Type": "LivingDocumentation.TypeDescription",
                        "Text": "type"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                    "Name": "EndTag",
                    "Arguments": [
                      {
                        "Type": "System.Text.StringBuilder",
                        "Text": "stringBuilder"
                      },
                      {
                        "Type": "string",
                        "Text": "$\"commands-{type.DisplayName().ToLowerInvariant()}\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "ToLowerInvariant"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "DisplayName"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "EndSection",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "\"commands\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "stringBuilder"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RenderCommandDiagram",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "List<string>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
            "Name": "InteractionTraverser"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
            "Name": "ExtractConcequences",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              },
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "services"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "First"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "GetSourceCommands",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "callingServices.Count == 1",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "interactions.Fragments.OfType<Arrow>().First().Source",
                    "Operator": "=",
                    "Right": "callingServices[0].Service()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "First"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "OfType<Arrow>"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "Service"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
            "Name": "RenderTree",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "innerBuilder"
              },
              {
                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                "Text": "interactions.Fragments"
              },
              {
                "Type": "LivingDocumentation.Uml.Interactions",
                "Text": "interactions"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\".{AsciiDocHelper.FormatChapter(type.DisplayName())} Command\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "FormatChapter",
            "Arguments": [
              {
                "Type": "string",
                "Text": "type.DisplayName()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "DisplayName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"[plantuml]\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"....\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"@startuml\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "Program.Options.Experimental",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "AppendLine",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"!pragma teoz true\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "DefaultSequenceDiagramStyling",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"scale max 4096 height\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "Legend",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "callingService in callingServices",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"participant \\\"{callingService.Service().AsServiceDisplayName()}\\\" as {callingService.Service()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "AsServiceDisplayName"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "Service"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "Service"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"box \\\"Services\\\" #Ivory\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "service in services",
            "Statements": [
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "service.EndsWith(\"Entity\")",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"entity \\\"{service.Split('_').Skip(1).First()}\\\" as {service}\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "First"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Skip",
                        "Arguments": [
                          {
                            "Type": "int",
                            "Text": "1"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "Split",
                        "Arguments": [
                          {
                            "Type": "char",
                            "Text": "'_'"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"participant \\\"{service.AsServiceDisplayName()}\\\" as {service}\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "AsServiceDisplayName"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"end box\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "innerBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"@enduml\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"....\""
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.Constants",
    "Fields": [
      {
        "Name": "Command",
        "Type": "string",
        "Initializer": "\"Pitstop.Infrastructure.Messaging.Command\"",
        "Modifiers": 2
      },
      {
        "Name": "Event",
        "Type": "string",
        "Initializer": "\"Pitstop.Infrastructure.Messaging.Event\"",
        "Modifiers": 2
      },
      {
        "Name": "MessageHandlerCallback",
        "Type": "string",
        "Initializer": "\"Pitstop.Infrastructure.Messaging.IMessageHandlerCallback\"",
        "Modifiers": 2
      },
      {
        "Name": "MessagePublisher",
        "Type": "string",
        "Initializer": "\"Pitstop.Infrastructure.Messaging.IMessagePublisher\"",
        "Modifiers": 2
      },
      {
        "Name": "PublishMessage",
        "Type": "string",
        "Initializer": "\"PublishMessageAsync\"",
        "Modifiers": 2
      },
      {
        "Name": "AggregateRoot",
        "Type": "string",
        "Initializer": "\"Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<\"",
        "Modifiers": 2
      },
      {
        "Name": "Entity",
        "Type": "string",
        "Initializer": "\"Pitstop.WorkshopManagementAPI.Domain.Core.Entity<\"",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.EventsRenderer",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Render",
        "ReturnType": "System.Text.StringBuilder",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "BeginSection",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "\"events\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.IsEvent()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsEvent"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "groupedType in events.GroupBy(e => e.DisplayName())",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "First"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"== {AsciiDocHelper.FormatChapter(type.DisplayName())}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "FormatChapter",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "type.DisplayName()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "DisplayName"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine"
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "!string.IsNullOrWhiteSpace(type.DocumentationComments?.Summary)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "type.DocumentationComments?.Summary"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "type.IsDeprecated(out var message)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[IMPORTANT]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"====\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"*Event is deprecated* + \""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "!string.IsNullOrWhiteSpace(message)",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Text.StringBuilder",
                                "Name": "AppendLine",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "$\" {message}\""
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"====\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "groupedType.Any(t => !t.HasReceiverInSameNamespace())",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\".Event published by\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "t in groupedType.Where(t => !t.HasReceiverInSameNamespace())",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "$\"* {t.Namespace.Split('.').Reverse().Skip(1).First().SplitCamelCase()}\""
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "SplitCamelCase"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "First"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "Skip",
                            "Arguments": [
                              {
                                "Type": "int",
                                "Text": "1"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "Reverse"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "string",
                            "Name": "Split",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'.'"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "groupedType.Any(t => t.HasReceiverInSameNamespace())",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\".Event received by\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "t in groupedType.Where(t => t.HasReceiverInSameNamespace())",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "$\"* {t.Namespace.Split('.').Skip(1).First().SplitCamelCase()}\""
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "SplitCamelCase"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "First"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "Skip",
                            "Arguments": [
                              {
                                "Type": "int",
                                "Text": "1"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "string",
                            "Name": "Split",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'.'"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "groupedType.SelectMany(t => t.Fields).Any()",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[caption=]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\".Payload fields\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"[%header,cols=\\\"s,1,3\\\"]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|===\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|Attribute|Type|Description\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "argument in groupedType.SelectMany(t => t.Fields).GroupBy(f => (f.Type, f.Name)).Select(g => g.First()).OrderBy(f => f.Name)",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "ToTypeDescription",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.List<LivingDocumentation.TypeDescription>",
                                "Text": "Program.Types"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.Name"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.Type.ForDiagram()"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.StringExtensions",
                            "Name": "ForDiagram"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "Append",
                            "Arguments": [
                              {
                                "Type": "char",
                                "Text": "'|'"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "argument.DocumentationComments?.Summary"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"|===\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "BeginTag",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "stringBuilder"
                  },
                  {
                    "Type": "string",
                    "Text": "$\"events-{type.DisplayName().ToLowerInvariant()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "ToLowerInvariant"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "DisplayName"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.EventsRenderer",
                "Name": "RenderEventDiagram",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "stringBuilder"
                  },
                  {
                    "Type": "LivingDocumentation.TypeDescription",
                    "Text": "type"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "EndTag",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "stringBuilder"
                  },
                  {
                    "Type": "string",
                    "Text": "$\"events-{type.DisplayName().ToLowerInvariant()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "string",
                "Name": "ToLowerInvariant"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "DisplayName"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "EndSection",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "string",
                "Text": "\"events\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "stringBuilder"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "RenderEventDiagram",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "List<string>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
            "Name": "InteractionTraverser"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
            "Name": "ExtractConcequences",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              },
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "services"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "interactions.Fragments.Count == 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": ""
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "GetSourceCommands",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.Interactions",
            "Name": "Interactions"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "fragment in interactions.Fragments",
            "Statements": [
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "fragment is Arrow a && a.Source == \"A\"",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "subInteraction.Fragments.Count > 0",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "Pitstop.LivingDocumentation.EventsRenderer",
                                "Name": "RenderSubDiagram",
                                "Arguments": [
                                  {
                                    "Type": "System.Text.StringBuilder",
                                    "Text": "stringBuilder"
                                  },
                                  {
                                    "Type": "LivingDocumentation.TypeDescription",
                                    "Text": "type"
                                  },
                                  {
                                    "Type": "System.Collections.Generic.List<string>",
                                    "Text": "services"
                                  },
                                  {
                                    "Type": "LivingDocumentation.Uml.Interactions",
                                    "Text": "subInteraction"
                                  },
                                  {
                                    "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
                                    "Text": "callingServices"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                        "Left": "subInteraction",
                        "Operator": "=",
                        "Right": "new Interactions()"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "LivingDocumentation.Uml.Interactions",
                        "Name": "Interactions"
                      },
                      {
                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                        "Left": "a.Source",
                        "Operator": "=",
                        "Right": "callingServices[0].Service()"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "Service"
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                "Name": "AddFragment",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.Uml.InteractionFragment",
                    "Text": "fragment"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.EventsRenderer",
            "Name": "RenderSubDiagram",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              },
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "services"
              },
              {
                "Type": "LivingDocumentation.Uml.Interactions",
                "Text": "subInteraction"
              },
              {
                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
                "Text": "callingServices"
              }
            ]
          }
        ]
      },
      {
        "Name": "RenderSubDiagram",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          },
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "services"
          },
          {
            "Type": "LivingDocumentation.Uml.Interactions",
            "Name": "interactions"
          },
          {
            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
            "Name": "callingServices"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
            "Name": "RenderTree",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "innerBuilder"
              },
              {
                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                "Text": "interactions.Fragments"
              },
              {
                "Type": "LivingDocumentation.Uml.Interactions",
                "Text": "interactions"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "SplitCamelCase"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "First"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "OfType<Arrow>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"=== {handler}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\".{AsciiDocHelper.FormatChapter(type.DisplayName())} Event as handled by {handler}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "FormatChapter",
            "Arguments": [
              {
                "Type": "string",
                "Text": "type.DisplayName()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "DisplayName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"[plantuml]\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"....\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"@startuml\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "Program.Options.Experimental",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "AppendLine",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"!pragma teoz true\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
            "Name": "DefaultSequenceDiagramStyling",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"scale max 4096 height\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "callingService in callingServices",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"participant \\\"{callingService.Service().AsServiceDisplayName()}\\\" as {callingService.Service()}\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "AsServiceDisplayName"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "Service"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "Service"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"box \\\"Services\\\" #Ivory\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "service in services.Where(s => interactions.Fragments.Descendants<Arrow>().Any(a => a.Target == s))",
            "Statements": [
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "service.EndsWith(\"Entity\")",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"entity \\\"{service.Split('_').Skip(1).First()}\\\" as {service}\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "First"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Skip",
                        "Arguments": [
                          {
                            "Type": "int",
                            "Text": "1"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "Split",
                        "Arguments": [
                          {
                            "Type": "char",
                            "Text": "'_'"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "$\"participant \\\"{service.AsServiceDisplayName()}\\\" as {service}\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "AsServiceDisplayName"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"end box\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "innerBuilder"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"@enduml\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"....\""
              }
            ]
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.Extensions",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "RenderProperty",
        "Parameters": [
          {
            "Type": "LivingDocumentation.PropertyDescription",
            "Name": "property"
          },
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.StringBuilderExtensions",
            "Name": "ClassMember",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{property.Name}: {property.Type.ForDiagram()}\""
              },
              {
                "Type": "bool",
                "Text": "property.IsStatic()"
              },
              {
                "Type": "LivingDocumentation.Uml.VisibilityModifier",
                "Text": "property.ToUmlVisibility()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.StringExtensions",
            "Name": "ForDiagram"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.IHaveModifiersExtensions",
            "Name": "IsStatic"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.IHaveModifiersExtensions",
            "Name": "ToUmlVisibility"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "RenderStereoType",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          },
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"<<\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsEnumeration()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"enumeration\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsAggregateRoot()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"(R,LightGreen)root\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsValueObject() || type.IsAggregateId()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"(O,LightBlue)value object\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type.IsEntity()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"entity\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "Append",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\">> \""
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "RenderMethod",
        "Parameters": [
          {
            "Type": "LivingDocumentation.MethodDescription",
            "Name": "method"
          },
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.StringBuilderExtensions",
            "Name": "ClassMember",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{method.Name}({method.Parameters.Select(p => p.Name).Aggregate(\"\", (s, a) => a + \",\" + s, s => s.Trim(','))})\""
              },
              {
                "Type": "bool",
                "Text": "method.IsStatic()"
              },
              {
                "Type": "LivingDocumentation.Uml.VisibilityModifier",
                "Text": "method.ToUmlVisibility()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Aggregate",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"\""
              },
              {
                "Type": "System.Func<string, string, string>",
                "Text": "(s, a) => a + \",\" + s"
              },
              {
                "Type": "System.Func<string, string>",
                "Text": "s => s.Trim(',')"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Select",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IParameterDescription, string>",
                "Text": "p => p.Name"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Trim",
            "Arguments": [
              {
                "Type": "char",
                "Text": "','"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.IHaveModifiersExtensions",
            "Name": "IsStatic"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.IHaveModifiersExtensions",
            "Name": "ToUmlVisibility"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "ToTypeDescription",
        "ReturnType": "LivingDocumentation.TypeDescription",
        "Parameters": [
          {
            "Type": "string",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.ToTypeDescription(Program.Types)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "ToTypeDescription",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<LivingDocumentation.TypeDescription>",
                "Text": "Program.Types"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "ToTypeDescription",
        "ReturnType": "LivingDocumentation.TypeDescription",
        "Parameters": [
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
            "Name": "types"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "types.FirstOrDefault(type)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "string",
                "Text": "type"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsDeprecated",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IAttributeDescription, bool>",
                "Text": "a => string.Equals(a.Type, \"System.ObsoleteAttribute\", StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "a.Type"
              },
              {
                "Type": "string",
                "Text": "\"System.ObsoleteAttribute\""
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "message",
            "Operator": "=",
            "Right": "obsoleteAttribute?.Arguments.FirstOrDefault()?.Value ?? string.Empty"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "obsoleteAttribute != null"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsAggregateRoot",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.Type == TypeType.Class \r\n                && type.ImplementsTypeStartsWith(Constants.AggregateRoot)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescription",
            "Name": "ImplementsTypeStartsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Constants.AggregateRoot"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "GetAggregateRootId",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "System.Func<string, bool>",
                "Text": "bt => bt.StartsWith(Constants.AggregateRoot, StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "StartsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Constants.AggregateRoot"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "aggregateRoot?.GenericTypes().First()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "First"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.StringExtensions",
            "Name": ""
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsEnumeration",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.Type == TypeType.Enum"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsValueObject",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.Type == TypeType.Class && type.Namespace.Split('.').Contains(\"ValueObjects\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Contains",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ValueObjects\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Split",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsAggregateId",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.IsValueObject() && type.Name.EndsWith(\"Id\", StringComparison.Ordinal)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsValueObject"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "EndsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Id\""
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsEntity",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "!type.IsAggregateRoot()\r\n                && !type.IsAggregateId()\r\n                && !type.IsValueObject()\r\n                && type.Type == TypeType.Class"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsAggregateRoot"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsAggregateId"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "IsValueObject"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsEvent",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.BaseTypes.Any(bt => string.Equals(bt, Constants.Event, StringComparison.Ordinal))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<string, bool>",
                "Text": "bt => string.Equals(bt, Constants.Event, StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "bt"
              },
              {
                "Type": "string",
                "Text": "Constants.Event"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsCommand",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.BaseTypes.Any(bt => string.Equals(bt, Constants.Command, StringComparison.Ordinal))"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<string, bool>",
                "Text": "bt => string.Equals(bt, Constants.Command, StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "bt"
              },
              {
                "Type": "string",
                "Text": "Constants.Command"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "HandlersFor",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "CommandHandlersFor",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "EventHandlersFor",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "type"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "commandHandlers.Concat(eventHandlers).ToList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Concat",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
                "Text": "eventHandlers"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "CommandHandlersFor",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "types\r\n                .Where(t => t.Methods.Any(m => m.Parameters.Any(p => p.Type == type.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\")))))\r\n                .ToList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.Methods.Any(m => m.Parameters.Any(p => p.Type == type.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\"))))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.MethodDescription, bool>",
                "Text": "m => m.Parameters.Any(p => p.Type == type.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\")))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IParameterDescription, bool>",
                "Text": "p => p.Type == type.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\"))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IAttributeDescription, bool>",
                "Text": "a => a.Type.EndsWith(\"FromBodyAttribute\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "EndsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"FromBodyAttribute\""
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "EventHandlersFor",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "types\r\n                .Where(t => t.Type == TypeType.Class && t.BaseTypes.Contains(Constants.MessageHandlerCallback))\r\n                .Where(t => t.Methods.Any(m => m.Name == \"HandleAsync\" && m.Parameters.Any(p => p.Type.EndsWith(\".\" + type.Name, StringComparison.Ordinal))))\r\n                .ToList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.Methods.Any(m => m.Name == \"HandleAsync\" && m.Parameters.Any(p => p.Type.EndsWith(\".\" + type.Name, StringComparison.Ordinal)))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.Type == TypeType.Class && t.BaseTypes.Contains(Constants.MessageHandlerCallback)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "Contains",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Constants.MessageHandlerCallback"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.MethodDescription, bool>",
                "Text": "m => m.Name == \"HandleAsync\" && m.Parameters.Any(p => p.Type.EndsWith(\".\" + type.Name, StringComparison.Ordinal))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IParameterDescription, bool>",
                "Text": "p => p.Type.EndsWith(\".\" + type.Name, StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "EndsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\".\" + type.Name"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "GetSourceCommands",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.TypeDescription>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "OfType<InvocationDescription>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "FlattenStatements",
            "Arguments": [
              {
                "Type": "LivingDocumentation.Statement",
                "Text": "s"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "EndsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "type.Name"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "string",
                "Text": "i.ContainingType"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "commands.ToList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "Service",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "type.FullName.Split('.').SkipWhile(n => n.Equals(\"Pitstop\", StringComparison.OrdinalIgnoreCase) || n.Equals(\"Application\")).FirstOrDefault()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SkipWhile",
            "Arguments": [
              {
                "Type": "System.Func<string, bool>",
                "Text": "n => n.Equals(\"Pitstop\", StringComparison.OrdinalIgnoreCase) || n.Equals(\"Application\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Split",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.OrdinalIgnoreCase"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Application\""
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "AsServiceDisplayName",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "string",
            "Name": "value"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "value\r\n                .SplitCamelCase()\r\n                .Replace(\" Event Handler\", \"\\\\nEvent Handler\")\r\n                .Replace(\" Service\", \"\\\\nService\")\r\n                .Replace(\" API\", \"\\\\nAPI\")\r\n                .Replace(\"Controller\", \"\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Controller\""
              },
              {
                "Type": "string",
                "Text": "\"\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\" API\""
              },
              {
                "Type": "string",
                "Text": "\"\\\\nAPI\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\" Service\""
              },
              {
                "Type": "string",
                "Text": "\"\\\\nService\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\" Event Handler\""
              },
              {
                "Type": "string",
                "Text": "\"\\\\nEvent Handler\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "SplitCamelCase"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "DisplayName",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "type == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "string.Empty"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "name"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "HasReceiverInSameNamespace",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Join",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<string>",
                "Text": "type.Namespace.Split('.', 3).Take(2)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Take",
            "Arguments": [
              {
                "Type": "int",
                "Text": "2"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Split",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              },
              {
                "Type": "int",
                "Text": "3"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.Namespace.StartsWith(ns, StringComparison.Ordinal)\r\n                && t.BaseTypes.Contains(Constants.MessageHandlerCallback, StringComparer.Ordinal)\r\n                && t.Methods.Any(m => string.Equals(m.Name, \"HandleAsync\", StringComparison.Ordinal) && m.Parameters.First().Type == type.FullName)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "StartsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "ns"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Contains",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Constants.MessageHandlerCallback"
              },
              {
                "Type": "System.StringComparer",
                "Text": "StringComparer.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.MethodDescription, bool>",
                "Text": "m => string.Equals(m.Name, \"HandleAsync\", StringComparison.Ordinal) && m.Parameters.First().Type == type.FullName"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "m.Name"
              },
              {
                "Type": "string",
                "Text": "\"HandleAsync\""
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "First"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "eventReceivers.Any()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "HasPublisherInSameNamespace",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Split",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Join",
            "Arguments": [
              {
                "Type": "char",
                "Text": "'.'"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<string>",
                "Text": "namespaceParts.Take(namespaceParts.Length - 1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Take",
            "Arguments": [
              {
                "Type": "int",
                "Text": "namespaceParts.Length - 1"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SelectMany",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.InvocationDescription, System.Collections.Generic.IEnumerable<LivingDocumentation.InvocationDescription>>",
                "Text": "t => Program.Types.GetInvocationConsequences(t)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "OfType<InvocationDescription>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SelectMany",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.Statement, System.Collections.Generic.IEnumerable<LivingDocumentation.Statement>>",
                "Text": "s => FlattenStatements(s)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SelectMany",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, System.Collections.Generic.IEnumerable<LivingDocumentation.Statement>>",
                "Text": "t => t.Methods.OfType<IHaveAMethodBody>().Concat(t.Constructors).SelectMany(mb => mb.Statements)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => t.Namespace.StartsWith(ns, StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "StartsWith",
            "Arguments": [
              {
                "Type": "string",
                "Text": "ns"
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SelectMany",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IHaveAMethodBody, System.Collections.Generic.IEnumerable<LivingDocumentation.Statement>>",
                "Text": "mb => mb.Statements"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Concat",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.ConstructorDescription>",
                "Text": "t.Constructors"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "OfType<IHaveAMethodBody>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "FlattenStatements",
            "Arguments": [
              {
                "Type": "LivingDocumentation.Statement",
                "Text": "s"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "GetInvocationConsequences",
            "Arguments": [
              {
                "Type": "LivingDocumentation.InvocationDescription",
                "Text": "t"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "invocations.Any()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Any"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "FlattenStatements",
        "ReturnType": "System.Collections.Generic.IEnumerable<LivingDocumentation.Statement>",
        "Parameters": [
          {
            "Type": "LivingDocumentation.Statement",
            "Name": "sourceStatement"
          },
          {
            "Type": "System.Collections.Generic.List<LivingDocumentation.Statement>",
            "Name": "statements",
            "HasDefaultValue": true
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "statements == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "statements",
                    "Operator": "=",
                    "Right": "new List<Statement>()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "List<Statement>"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "InvocationDescription invocationDescription"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "Add",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.InvocationDescription",
                        "Text": "invocationDescription"
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "Switch sourceSwitch"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "statement in sourceSwitch.Sections.SelectMany(s => s.Statements)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "FlattenStatements",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "statement"
                          },
                          {
                            "Type": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                            "Text": "statements"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "If sourceIf"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "statement in sourceIf.Sections.SelectMany(s => s.Statements)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "FlattenStatements",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "statement"
                          },
                          {
                            "Type": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                            "Text": "statements"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "Statement statementBlock"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "statement in statementBlock.Statements",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "FlattenStatements",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "statement"
                          },
                          {
                            "Type": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                            "Text": "statements"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "Expression": "sourceStatement"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "statements"
          }
        ],
        "Modifiers": 20
      },
      {
        "Name": "SplitCamelCase",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "string",
            "Name": "value"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Regex.Replace(\r\n                Regex.Replace(\r\n                    value,\r\n                    @\"(\\P{Ll})(\\P{Ll}\\p{Ll})\",\r\n                    \"$1 $2\"\r\n                ),\r\n                @\"(\\p{Ll})(\\P{Ll})\",\r\n                \"$1 $2\"\r\n            )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.RegularExpressions.Regex",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Regex.Replace(\r\n                    value,\r\n                    @\"(\\P{Ll})(\\P{Ll}\\p{Ll})\",\r\n                    \"$1 $2\"\r\n                )"
              },
              {
                "Type": "string",
                "Text": "@\"(\\p{Ll})(\\P{Ll})\""
              },
              {
                "Type": "string",
                "Text": "\"$1 $2\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.RegularExpressions.Regex",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "value"
              },
              {
                "Type": "string",
                "Text": "@\"(\\P{Ll})(\\P{Ll}\\p{Ll})\""
              },
              {
                "Type": "string",
                "Text": "\"$1 $2\""
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "HandlingMethod",
        "ReturnType": "LivingDocumentation.MethodDescription",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "type"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "message.IsEvent()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "type.Methods.FirstOrDefault(m => string.Equals(m.Name, \"HandleAsync\") && m.Parameters.Any(p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal)))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "FirstOrDefault",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.MethodDescription, bool>",
                        "Text": "m => string.Equals(m.Name, \"HandleAsync\") && m.Parameters.Any(p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal))"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "Equals",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "m.Name"
                      },
                      {
                        "Type": "string",
                        "Text": "\"HandleAsync\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Any",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.IParameterDescription, bool>",
                        "Text": "p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "EndsWith",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\".\" + message.Name"
                      },
                      {
                        "Type": "System.StringComparison",
                        "Text": "StringComparison.Ordinal"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "message.IsCommand()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "type.Methods.FirstOrDefault(m =>\r\n                //m.Attributes.Any(a => a.Type.EndsWith(\"HttpPostAttribute\")) && \r\n                m.Parameters.Any(p => p.Type == message.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\"))) ||\r\n                m.Name == \"HandleCommandAsync\" && m.Parameters.Any(p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal)))"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "FirstOrDefault",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.MethodDescription, bool>",
                        "Text": "m =>\r\n                //m.Attributes.Any(a => a.Type.EndsWith(\"HttpPostAttribute\")) && \r\n                m.Parameters.Any(p => p.Type == message.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\"))) ||\r\n                m.Name == \"HandleCommandAsync\" && m.Parameters.Any(p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal))"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Any",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.IParameterDescription, bool>",
                        "Text": "p => p.Type == message.FullName && p.Attributes.Any(a => a.Type.EndsWith(\"FromBodyAttribute\"))"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Any",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.IAttributeDescription, bool>",
                        "Text": "a => a.Type.EndsWith(\"FromBodyAttribute\")"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "EndsWith",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"FromBodyAttribute\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Any",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.IParameterDescription, bool>",
                        "Text": "p => p.Type.EndsWith(\".\" + message.Name, StringComparison.Ordinal)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "EndsWith",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\".\" + message.Name"
                      },
                      {
                        "Type": "System.StringComparison",
                        "Text": "StringComparison.Ordinal"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "null"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsMessageCreation",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.InvocationDescription",
            "Name": "invocation"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "invocation.Name == \"PublishMessageAsync\" || invocation.Name == \"RaiseEvent\""
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsMailMessage",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.InvocationDescription",
            "Name": "invocation"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "invocation.Name == \"SendEmailAsync\""
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "IsDatabaseAction",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "LivingDocumentation.InvocationDescription",
            "Name": "invocation"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "invocation.Name == \"AddAsync\"\r\n                || invocation.Name == \"FirstOrDefaultAsync\"\r\n                || invocation.Name == \"ExecuteAsync\"\r\n                || invocation.Name == \"QueryAsync\"\r\n                || invocation.Name == \"QueryFirstOrDefaultAsync\""
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "GetInvocationConsequenceStatements2",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.InvocationDescription",
            "Name": "invocation"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "Program.Types.FirstOrDefault(invocation.ContainingType)?.Type == TypeType.Interface",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "FirstOrDefault",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                        "Text": "t => t.BaseTypes.Contains(invocation.ContainingType)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<string>",
                    "Name": "Contains",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "invocation.ContainingType"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "implementatedInvocation",
                    "Operator": "=",
                    "Right": "new InvocationDescription(implementation.FullName, invocation.Name)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.InvocationDescription",
                    "Name": "InvocationDescription",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "implementation.FullName"
                      },
                      {
                        "Type": "string",
                        "Text": "invocation.Name"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.ArgumentDescription>",
                    "Name": "AddRange",
                    "Arguments": [
                      {
                        "Type": "System.Collections.Generic.List<LivingDocumentation.ArgumentDescription>",
                        "Text": "invocation.Arguments"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "SelectMany",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.IHaveAMethodBody, System.Collections.Generic.IEnumerable<LivingDocumentation.Statement>>",
                "Text": "m => m.Statements"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "GetInvokedMethod",
            "Arguments": [
              {
                "Type": "LivingDocumentation.InvocationDescription",
                "Text": "implementatedInvocation ?? invocation"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
            "Name": "List<Statement>"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "statement in statements",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "TraverseStatement",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
                    "Text": "types"
                  },
                  {
                    "Type": "LivingDocumentation.Statement",
                    "Text": "statement"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "innerStatements.Count > 0",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                        "Name": "AddRange",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
                            "Text": "innerStatements"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                        "Name": "Add",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "statement"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "consequences"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "TraverseStatement",
        "ReturnType": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.TypeDescription>",
            "Name": "types"
          },
          {
            "Type": "LivingDocumentation.Statement",
            "Name": "sourceStatement"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "ForEach forEachStatement"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.ForEach",
                    "Name": "ForEach"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "statement in forEachStatement.Statements",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                        "Name": "AddRange",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
                            "Text": "types.TraverseStatement(statement)"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                        "Name": "TraverseStatement",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "statement"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "destinationForEach.Expression",
                    "Operator": "=",
                    "Right": "forEachStatement.Expression"
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "new List<Statement> { destinationForEach }"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "List<Statement>",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.ForEach",
                        "Text": "destinationForEach"
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "Switch sourceSwitch"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Switch",
                    "Name": "Switch"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "switchSection in sourceSwitch.Sections",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "LivingDocumentation.SwitchSection",
                        "Name": "SwitchSection"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<string>",
                        "Name": "AddRange",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "switchSection.Labels"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "statement in switchSection.Statements",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                            "Name": "AddRange",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
                                "Text": "types.TraverseStatement(statement)"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "TraverseStatement",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Statement",
                                "Text": "statement"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.SwitchSection>",
                        "Name": "Add",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.SwitchSection",
                            "Text": "section"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "destinationSwitch.Expression",
                    "Operator": "=",
                    "Right": "sourceSwitch.Expression"
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "new List<Statement> { destinationSwitch }"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "List<Statement>",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.Switch",
                        "Text": "destinationSwitch"
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "If sourceIf"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "f",
                    "Operator": "=",
                    "Right": "new If()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.If",
                    "Name": "If"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "ifElseSection in sourceIf.Sections",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "LivingDocumentation.IfElseSection",
                        "Name": "IfElseSection"
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "statement in ifElseSection.Statements",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                            "Name": "AddRange",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Statement>",
                                "Text": "types.TraverseStatement(statement)"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "TraverseStatement",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Statement",
                                "Text": "statement"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                        "Left": "section.Condition",
                        "Operator": "=",
                        "Right": "ifElseSection.Condition"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "Name": "Add",
                        "Arguments": [
                          {
                            "Type": "LivingDocumentation.IfElseSection",
                            "Text": "section"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "new List<Statement> { destination�f }"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "List<Statement>",
                    "Arguments": [
                      {
                        "Type": "var",
                        "Text": "destination"
                      },
                      {
                        "Type": "?",
                        "Text": "f"
                      }
                    ]
                  }
                ]
              },
              {
                "Labels": [
                  "default"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "new List<Statement>(0)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Statement>",
                    "Name": "List<Statement>",
                    "Arguments": [
                      {
                        "Type": "int",
                        "Text": "0"
                      }
                    ]
                  }
                ]
              }
            ],
            "Expression": "sourceStatement"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.InteractionTraverser",
    "Fields": [
      {
        "Name": "activations",
        "Type": "System.Collections.Generic.Stack<string>",
        "Initializer": "new Stack<string>()",
        "Modifiers": 132
      }
    ],
    "Methods": [
      {
        "Name": "ExtractConcequences",
        "ReturnType": "LivingDocumentation.Uml.Interactions",
        "Parameters": [
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "originatingMessage"
          },
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "services"
          },
          {
            "Type": "string",
            "Name": "previousService",
            "HasDefaultValue": true
          },
          {
            "Type": "string",
            "Name": "inAlternativeFlow",
            "HasDefaultValue": true
          },
          {
            "Type": "System.Collections.Generic.List<LivingDocumentation.ArgumentDescription>",
            "Name": "arguments",
            "HasDefaultValue": true
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.Interactions",
            "Name": "Interactions"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
            "Name": "HandlersFor",
            "Arguments": [
              {
                "Type": "LivingDocumentation.TypeDescription",
                "Text": "originatingMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "handler in handlers",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "Service"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.Uml.Arrow",
                "Name": "Arrow",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "Source = source"
                  },
                  {
                    "Type": "string",
                    "Text": "Target = target"
                  },
                  {
                    "Type": "string",
                    "Text": "Name = AsciiDocHelper.FormatChapter(originatingMessage.DisplayName())"
                  },
                  {
                    "Type": "string",
                    "Text": "Color = AsciiDocHelper.ArrowColor(originatingMessage)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "Source",
                "Operator": "=",
                "Right": "source"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "Target",
                "Operator": "=",
                "Right": "target"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "Name",
                "Operator": "=",
                "Right": "AsciiDocHelper.FormatChapter(originatingMessage.DisplayName())"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "FormatChapter",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "originatingMessage.DisplayName()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "DisplayName"
              },
              {
                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                "Left": "Color",
                "Operator": "=",
                "Right": "AsciiDocHelper.ArrowColor(originatingMessage)"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                "Name": "ArrowColor",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.TypeDescription",
                    "Text": "originatingMessage"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                "Name": "AddFragment",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.Uml.Arrow",
                    "Text": "arrow"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "!activations.Contains(levelName)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.Stack<string>",
                        "Name": "Push",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "levelName"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "!services.Contains(target)",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<string>",
                        "Name": "Add",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "target"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                "Name": "HandlingMethod",
                "Arguments": [
                  {
                    "Type": "LivingDocumentation.TypeDescription",
                    "Text": "originatingMessage"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                "Expression": "statement in statements",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                    "Name": "TraverseBody",
                    "Arguments": [
                      {
                        "Type": "System.Collections.Generic.List<string>",
                        "Text": "services"
                      },
                      {
                        "Type": "LivingDocumentation.TypeDescription",
                        "Text": "handler"
                      },
                      {
                        "Type": "string",
                        "Text": "previousService ?? levelName"
                      },
                      {
                        "Type": "LivingDocumentation.Statement",
                        "Text": "statement"
                      },
                      {
                        "Type": "string",
                        "Text": "inAlternativeFlow ?? levelName"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "statementInteractions.Fragments.Count > 0",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                            "Name": "AddFragments",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                                "Text": "statementInteractions.Fragments"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "activations.Count > 0 && activations.Peek() == levelName && levelName != inAlternativeFlow",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.Stack<string>",
                        "Name": "Pop"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "result"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "TraverseBody",
        "ReturnType": "LivingDocumentation.Uml.Interactions",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "services"
          },
          {
            "Type": "LivingDocumentation.TypeDescription",
            "Name": "handler"
          },
          {
            "Type": "string",
            "Name": "serviceName"
          },
          {
            "Type": "LivingDocumentation.Statement",
            "Name": "statement"
          },
          {
            "Type": "string",
            "Name": "inAlternativeFlow"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "InvocationDescription invocation when invocation.IsMessageCreation()"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "IsMessageCreation"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
                    "Name": "FirstOrDefault",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "invocation.Arguments.Skip(invocation.Name == \"RaiseEvent\" ? 0 : 1).First().Type"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "First"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Skip",
                    "Arguments": [
                      {
                        "Type": "int",
                        "Text": "invocation.Name == \"RaiseEvent\" ? 0 : 1"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "message == null",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Console",
                            "Name": "WriteLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "$\"Error while traversing code stucture.\""
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Console",
                            "Name": "WriteLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "$\" --> '{invocation.Arguments.First().Type}' not found in the list of analysed types. Documentation will be incomplete.\""
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "First"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "ExtractConcequences(message, services, handler.Service(), inAlternativeFlow, invocation.Arguments)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                    "Name": "ExtractConcequences",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.TypeDescription",
                        "Text": "message"
                      },
                      {
                        "Type": "System.Collections.Generic.List<string>",
                        "Text": "services"
                      },
                      {
                        "Type": "string",
                        "Text": "handler.Service()"
                      },
                      {
                        "Type": "string",
                        "Text": "inAlternativeFlow"
                      },
                      {
                        "Type": "System.Collections.Generic.List<LivingDocumentation.ArgumentDescription>",
                        "Text": "invocation.Arguments"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "Service"
                  }
                ]
              },
              {
                "Labels": [
                  "InvocationDescription invocation when invocation.IsMailMessage()"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "IsMailMessage"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "Trim"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "Trim",
                    "Arguments": [
                      {
                        "Type": "char",
                        "Text": "'\"'"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Arrow",
                    "Name": "Arrow",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "Source = serviceName"
                      },
                      {
                        "Type": "string",
                        "Text": "Target = \"]\""
                      },
                      {
                        "Type": "string",
                        "Text": "Name = AsciiDocHelper.FormatChapter(subject)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Source",
                    "Operator": "=",
                    "Right": "serviceName"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Target",
                    "Operator": "=",
                    "Right": "\"]\""
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Name",
                    "Operator": "=",
                    "Right": "AsciiDocHelper.FormatChapter(subject)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.AsciiDocHelper",
                    "Name": "FormatChapter",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "subject"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                    "Name": "AddFragment",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.Uml.Arrow",
                        "Text": "arrow"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              },
              {
                "Labels": [
                  "InvocationDescription invocation when invocation.IsDatabaseAction()"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "IsDatabaseAction"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "FirstOrDefault"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.StringExtensions",
                    "Name": "GenericTypes"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": ""
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "invocation.Name == \"ExecuteAsync\" || invocation.Name == \"QueryAsync\"",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "target",
                            "Operator": "=",
                            "Right": "invocation.Arguments.Last().Type.ToTypeDescription()?.Name"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": "ToTypeDescription"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "Last"
                          }
                        ]
                      },
                      {
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "First"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.StringExtensions",
                            "Name": "IsGeneric"
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "argument",
                            "Operator": "=",
                            "Right": "argument.GenericTypes().FirstOrDefault()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "FirstOrDefault"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.StringExtensions",
                            "Name": "GenericTypes"
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "target",
                            "Operator": "=",
                            "Right": "argument?.ToTypeDescription().Name"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                            "Name": ""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Arrow",
                    "Name": "Arrow",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "Source = serviceName"
                      },
                      {
                        "Type": "string",
                        "Text": "Target = serviceName + \"_\" + (target ?? \"anonymous\") + \"_Entity\""
                      },
                      {
                        "Type": "string",
                        "Text": "Name = invocation.Name.EndsWith(\"Async\") ? invocation.Name[0..^5] : invocation.Name"
                      },
                      {
                        "Type": "string",
                        "Text": "Color = \"[#Black]\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Source",
                    "Operator": "=",
                    "Right": "serviceName"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Target",
                    "Operator": "=",
                    "Right": "serviceName + \"_\" + (target ?? \"anonymous\") + \"_Entity\""
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Name",
                    "Operator": "=",
                    "Right": "invocation.Name.EndsWith(\"Async\") ? invocation.Name[0..^5] : invocation.Name"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "string",
                    "Name": "EndsWith",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Async\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Color",
                    "Operator": "=",
                    "Right": "\"[#Black]\""
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                    "Name": "AddFragment",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.Uml.Arrow",
                        "Text": "arrow"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "!services.Contains(arrow.Target)",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Collections.Generic.List<string>",
                            "Name": "Add",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "arrow.Target"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              },
              {
                "Labels": [
                  "InvocationDescription invocation"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "Where",
                    "Arguments": [
                      {
                        "Type": "System.Func<LivingDocumentation.Statement, bool>",
                        "Text": "s => s != invocation"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.LivingDocumentation.Extensions",
                    "Name": "GetInvocationConsequenceStatements2",
                    "Arguments": [
                      {
                        "Type": "LivingDocumentation.InvocationDescription",
                        "Text": "invocation"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "consequence in consequences",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                        "Name": "TraverseBody",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "services"
                          },
                          {
                            "Type": "LivingDocumentation.TypeDescription",
                            "Text": "handler"
                          },
                          {
                            "Type": "string",
                            "Text": "serviceName"
                          },
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "consequence"
                          },
                          {
                            "Type": "string",
                            "Text": "inAlternativeFlow"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "invocationInteractions.Fragments.Count > 0",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                                "Name": "AddFragments",
                                "Arguments": [
                                  {
                                    "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                                    "Text": "invocationInteractions.Fragments"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              },
              {
                "Labels": [
                  "ForEach forEachStatement"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                    "Name": "List<InteractionFragment>"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "invocation in forEachStatement.Statements",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                        "Name": "TraverseBody",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "services"
                          },
                          {
                            "Type": "LivingDocumentation.TypeDescription",
                            "Text": "handler"
                          },
                          {
                            "Type": "string",
                            "Text": "serviceName"
                          },
                          {
                            "Type": "LivingDocumentation.Statement",
                            "Text": "invocation"
                          },
                          {
                            "Type": "string",
                            "Text": "inAlternativeFlow"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "invocationInteractions.Fragments.Count > 0",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                "Name": "AddRange",
                                "Arguments": [
                                  {
                                    "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                                    "Text": "invocationInteractions.Fragments"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "interactions.Count > 0",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.Alt",
                            "Name": "Alt"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.AltSection",
                            "Name": "AltSection"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                            "Name": "AddFragments",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                "Text": "interactions"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "altSection.GroupType",
                            "Operator": "=",
                            "Right": "\"forEach\""
                          },
                          {
                            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                            "Left": "altSection.Label",
                            "Operator": "=",
                            "Right": "forEachStatement.Expression"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.Alt",
                            "Name": "AddSection",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Uml.AltSection",
                                "Text": "altSection"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                            "Name": "AddFragment",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Uml.Alt",
                                "Text": "alt"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              },
              {
                "Labels": [
                  "Switch switchStatement"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Alt",
                    "Name": "Alt"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "section in switchStatement.Sections",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                        "Name": "List<InteractionFragment>"
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "invocation in section.Statements",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                            "Name": "TraverseBody",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.List<string>",
                                "Text": "services"
                              },
                              {
                                "Type": "LivingDocumentation.TypeDescription",
                                "Text": "handler"
                              },
                              {
                                "Type": "string",
                                "Text": "serviceName"
                              },
                              {
                                "Type": "LivingDocumentation.Statement",
                                "Text": "invocation"
                              },
                              {
                                "Type": "string",
                                "Text": "inAlternativeFlow"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                            "Sections": [
                              {
                                "Condition": "invocationInteractions.Fragments.Count > 0",
                                "Statements": [
                                  {
                                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                    "Name": "AddRange",
                                    "Arguments": [
                                      {
                                        "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                                        "Text": "invocationInteractions.Fragments"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "interactions.Count > 0",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.AltSection",
                                "Name": "AltSection"
                              },
                              {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                  {
                                    "Condition": "alt.Sections.Count == 0",
                                    "Statements": [
                                      {
                                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                                        "Left": "altSection.GroupType",
                                        "Operator": "=",
                                        "Right": "\"case\""
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                                "Name": "AddFragments",
                                "Arguments": [
                                  {
                                    "Type": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                    "Text": "interactions"
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                                "Left": "altSection.Label",
                                "Operator": "=",
                                "Right": "section.Labels.Aggregate(string.Empty, (s1, s2) => s1 + s2)"
                              },
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "Aggregate",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "string.Empty"
                                  },
                                  {
                                    "Type": "System.Func<string, string, string>",
                                    "Text": "(s1, s2) => s1 + s2"
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.Alt",
                                "Name": "AddSection",
                                "Arguments": [
                                  {
                                    "Type": "LivingDocumentation.Uml.AltSection",
                                    "Text": "altSection"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "alt.Sections.Count > 0",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                            "Name": "AddFragment",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Uml.Alt",
                                "Text": "alt"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              },
              {
                "Labels": [
                  "If ifStatement"
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Interactions",
                    "Name": "Interactions"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "LivingDocumentation.Uml.Alt",
                    "Name": "Alt"
                  },
                  {
                    "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                    "Expression": "section in ifStatement.Sections",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                        "Name": "List<InteractionFragment>"
                      },
                      {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "invocation in section.Statements",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.LivingDocumentation.InteractionTraverser",
                            "Name": "TraverseBody",
                            "Arguments": [
                              {
                                "Type": "System.Collections.Generic.List<string>",
                                "Text": "services"
                              },
                              {
                                "Type": "LivingDocumentation.TypeDescription",
                                "Text": "handler"
                              },
                              {
                                "Type": "string",
                                "Text": "serviceName"
                              },
                              {
                                "Type": "LivingDocumentation.Statement",
                                "Text": "invocation"
                              },
                              {
                                "Type": "string",
                                "Text": "inAlternativeFlow"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                            "Sections": [
                              {
                                "Condition": "invocationInteractions.Fragments.Count > 0",
                                "Statements": [
                                  {
                                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                    "ContainingType": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                    "Name": "AddRange",
                                    "Arguments": [
                                      {
                                        "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                                        "Text": "invocationInteractions.Fragments"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "interactions.Count > 0",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.AltSection",
                                "Name": "AltSection"
                              },
                              {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                  {
                                    "Condition": "alt.Sections.Count == 0",
                                    "Statements": [
                                      {
                                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                                        "Left": "altSection.GroupType",
                                        "Operator": "=",
                                        "Right": "\"if\""
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                                "Name": "AddFragments",
                                "Arguments": [
                                  {
                                    "Type": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                                    "Text": "interactions"
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                                "Left": "altSection.Label",
                                "Operator": "=",
                                "Right": "section.Condition"
                              },
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "LivingDocumentation.Uml.Alt",
                                "Name": "AddSection",
                                "Arguments": [
                                  {
                                    "Type": "LivingDocumentation.Uml.AltSection",
                                    "Text": "altSection"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "alt.Sections.Count > 0",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragment",
                            "Name": "AddFragment",
                            "Arguments": [
                              {
                                "Type": "LivingDocumentation.Uml.Alt",
                                "Text": "alt"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "result"
                  }
                ]
              }
            ],
            "Expression": "statement"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new Interactions()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.Uml.Interactions",
            "Name": "Interactions"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.Program",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "Options",
        "Type": "Pitstop.LivingDocumentation.RuntimeOptions",
        "Modifiers": 17
      },
      {
        "Name": "Types",
        "Type": "System.Collections.Generic.List<LivingDocumentation.TypeDescription>",
        "Modifiers": 17
      }
    ],
    "Methods": [
      {
        "Name": "Main",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "CommandLine.ParserResultExtensions",
            "Name": "WithNotParsed",
            "Arguments": [
              {
                "Type": "System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>",
                "Text": "e => Environment.Exit(1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "CommandLine.ParserResultExtensions",
            "Name": "WithParsed",
            "Arguments": [
              {
                "Type": "System.Action<Pitstop.LivingDocumentation.RuntimeOptions>",
                "Text": "RunApplication"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "CommandLine.Parser",
            "Name": "ParseArguments<RuntimeOptions>",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Environment",
            "Name": "Exit",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "RunApplication",
        "Parameters": [
          {
            "Type": "Pitstop.LivingDocumentation.RuntimeOptions",
            "Name": "options"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Options",
            "Operator": "=",
            "Right": "options"
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "!File.Exists(Options.InputPath)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.FileNotFoundException",
                    "Name": "FileNotFoundException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Input file is not found\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "Path.GetExtension(Options.OutputPath).Length == 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "directory",
                    "Operator": "=",
                    "Right": "Path.GetFullPath(Options.OutputPath)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.Path",
                    "Name": "GetFullPath",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "Options.OutputPath"
                      }
                    ]
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "directory",
                    "Operator": "=",
                    "Right": "Directory.GetParent(Path.GetFullPath(Options.OutputPath)).FullName"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.Directory",
                    "Name": "GetParent",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "Path.GetFullPath(Options.OutputPath)"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.Path",
                    "Name": "GetFullPath",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "Options.OutputPath"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "!Directory.Exists(directory)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.IO.Directory",
                    "Name": "CreateDirectory",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "directory"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.File",
            "Name": "ReadAllText",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Options.InputPath"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Types",
            "Operator": "=",
            "Right": "JsonConvert.DeserializeObject<List<TypeDescription>>(fileContents, JsonDefaults.DeserializerSettings()).Where(t => !t.Namespace.Contains(\"LivingDocumentation\", StringComparison.Ordinal)).ToList()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "ToList"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Where",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.TypeDescription, bool>",
                "Text": "t => !t.Namespace.Contains(\"LivingDocumentation\", StringComparison.Ordinal)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonConvert",
            "Name": "DeserializeObject<List<TypeDescription>>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "fileContents"
              },
              {
                "Type": "Newtonsoft.Json.JsonSerializerSettings",
                "Text": "JsonDefaults.DeserializerSettings()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.JsonDefaults",
            "Name": "DeserializerSettings"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Contains",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LivingDocumentation\""
              },
              {
                "Type": "System.StringComparison",
                "Text": "StringComparison.Ordinal"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "PopulateInheritedBaseTypes"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "LivingDocumentation.TypeDescriptionListExtensions",
            "Name": "PopulateInheritedMembers"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocRenderer",
            "Name": "Render"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.AsciiDocRenderer",
            "Name": "AsciiDocRenderer"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.RuntimeOptions",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "InputPath",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "CommandLine.OptionAttribute",
            "Name": "Option",
            "Arguments": [
              {
                "Name": "\"input\"",
                "Type": "string",
                "Value": "input"
              },
              {
                "Name": "Required",
                "Type": "bool",
                "Value": "true"
              },
              {
                "Name": "HelpText",
                "Type": "string",
                "Value": "The analyzed solution output."
              }
            ]
          }
        ]
      },
      {
        "Name": "OutputPath",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "CommandLine.OptionAttribute",
            "Name": "Option",
            "Arguments": [
              {
                "Name": "\"output\"",
                "Type": "string",
                "Value": "output"
              },
              {
                "Name": "Required",
                "Type": "bool",
                "Value": "true"
              },
              {
                "Name": "HelpText",
                "Type": "string",
                "Value": "The location of the output."
              }
            ]
          }
        ]
      },
      {
        "Name": "Experimental",
        "Type": "bool",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "CommandLine.OptionAttribute",
            "Name": "Option",
            "Arguments": [
              {
                "Name": "'x'",
                "Type": "char",
                "Value": "x"
              },
              {
                "Name": "\"experimental\"",
                "Type": "string",
                "Value": "experimental"
              },
              {
                "Name": "HelpText",
                "Type": "string",
                "Value": "Use experimental PlantUML features"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
    "Fields": [
      {
        "Name": "ExternalTargets",
        "Type": "string[]",
        "Initializer": "new[] { \"[\", \"]\" }",
        "Modifiers": 148
      }
    ],
    "Methods": [
      {
        "Name": "RenderTree",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.Uml.InteractionFragment>",
            "Name": "branch"
          },
          {
            "Type": "LivingDocumentation.Uml.Interactions",
            "Name": "tree"
          },
          {
            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
            "Name": "filter",
            "HasDefaultValue": true
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
            "Name": "RenderTree",
            "Arguments": [
              {
                "Type": "System.Text.StringBuilder",
                "Text": "stringBuilder"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.Uml.InteractionFragment>",
                "Text": "branch"
              },
              {
                "Type": "LivingDocumentation.Uml.Interactions",
                "Text": "tree"
              },
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "null"
              },
              {
                "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
                "Text": "filter"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "RenderTree",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<LivingDocumentation.Uml.InteractionFragment>",
            "Name": "branch"
          },
          {
            "Type": "LivingDocumentation.Uml.Interactions",
            "Name": "tree"
          },
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "activations"
          },
          {
            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
            "Name": "filter"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "activations == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "activations",
                    "Operator": "=",
                    "Right": "new List<string>()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<string>",
                    "Name": "List<string>"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<string>",
            "Name": "List<string>",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.List<string>",
                "Text": "activations"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "leaf in branch",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Collections.Generic.List<string>",
                "Name": "List<string>",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.List<string>",
                    "Text": "activations"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Labels": [
                      "Interactions statementList"
                    ],
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
                        "Name": "RenderTree",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "stringBuilder"
                          },
                          {
                            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                            "Text": "statementList.Fragments"
                          },
                          {
                            "Type": "LivingDocumentation.Uml.Interactions",
                            "Text": "tree"
                          },
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "leafActivations"
                          },
                          {
                            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
                            "Text": "filter"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "Labels": [
                      "Arrow arrow"
                    ],
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
                        "Name": "RenderArrow",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "stringBuilder"
                          },
                          {
                            "Type": "LivingDocumentation.Uml.Arrow",
                            "Text": "arrow"
                          },
                          {
                            "Type": "System.Collections.Generic.List<LivingDocumentation.Uml.InteractionFragment>",
                            "Text": "branch.ToList()"
                          },
                          {
                            "Type": "LivingDocumentation.Uml.Interactions",
                            "Text": "tree"
                          },
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "leafActivations"
                          },
                          {
                            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
                            "Text": "filter"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToList"
                      }
                    ]
                  },
                  {
                    "Labels": [
                      "Alt alt"
                    ],
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                        "Left": "leafActivations",
                        "Operator": "=",
                        "Right": "new List<string>(branchActivations)"
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<string>",
                        "Name": "List<string>",
                        "Arguments": [
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "branchActivations"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
                        "Name": "RenderGroup",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "stringBuilder"
                          },
                          {
                            "Type": "LivingDocumentation.Uml.Alt",
                            "Text": "alt"
                          },
                          {
                            "Type": "LivingDocumentation.Uml.Interactions",
                            "Text": "tree"
                          },
                          {
                            "Type": "System.Collections.Generic.List<string>",
                            "Text": "leafActivations"
                          },
                          {
                            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
                            "Text": "filter"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "Expression": "leaf"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Collections.Generic.List<string>",
                "Name": "AddRange",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.IEnumerable<string>",
                    "Text": "leafActivations.Except(branchActivations)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "Except",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.List<string>",
                    "Text": "branchActivations"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "branchActivation in branchActivations.Except(activations)",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"deactivate {branchActivation}\""
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 20
      },
      {
        "Name": "RenderGroup",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "LivingDocumentation.Uml.Alt",
            "Name": "alt"
          },
          {
            "Type": "LivingDocumentation.Uml.Interactions",
            "Name": "tree"
          },
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "activations"
          },
          {
            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
            "Name": "filter"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "StringBuilder"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "section in alt.Sections",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "StringBuilder"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.LivingDocumentation.UmlFragmentRenderer",
                "Name": "RenderTree",
                "Arguments": [
                  {
                    "Type": "System.Text.StringBuilder",
                    "Text": "sectionBuilder"
                  },
                  {
                    "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
                    "Text": "section.Fragments"
                  },
                  {
                    "Type": "LivingDocumentation.Uml.Interactions",
                    "Text": "tree"
                  },
                  {
                    "Type": "System.Collections.Generic.List<string>",
                    "Text": "new List<string>(activations)"
                  },
                  {
                    "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
                    "Text": "filter"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Collections.Generic.List<string>",
                "Name": "List<string>",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.List<string>",
                    "Text": "activations"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                "Sections": [
                  {
                    "Condition": "sectionBuilder.Length > 0",
                    "Statements": [
                      {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                          {
                            "Condition": "first",
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Text.StringBuilder",
                                "Name": "AppendLine",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "\"||5||\""
                                  }
                                ]
                              },
                              {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                  {
                                    "Condition": "string.IsNullOrWhiteSpace(section.GroupType)",
                                    "Statements": [
                                      {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.Text.StringBuilder",
                                        "Name": "Append",
                                        "Arguments": [
                                          {
                                            "Type": "string",
                                            "Text": "\"alt\""
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "Statements": [
                                      {
                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                        "Sections": [
                                          {
                                            "Condition": "section.GroupType == \"stateMachine\"",
                                            "Statements": [
                                              {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Text.StringBuilder",
                                                "Name": "Append",
                                                "Arguments": [
                                                  {
                                                    "Type": "string",
                                                    "Text": "$\"group #Khaki stateMachine\""
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "Statements": [
                                              {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Text.StringBuilder",
                                                "Name": "Append",
                                                "Arguments": [
                                                  {
                                                    "Type": "string",
                                                    "Text": "$\"group {(section.GroupType == \"case\" || section.GroupType == \"switch\" ? \"switch\" : section.GroupType)}\""
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                        "Sections": [
                                          {
                                            "Condition": "section.GroupType == \"case\" || section.GroupType == \"stateMachine\"",
                                            "Statements": [
                                              {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Text.StringBuilder",
                                                "Name": "AppendLine"
                                              },
                                              {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Text.StringBuilder",
                                                "Name": "Append",
                                                "Arguments": [
                                                  {
                                                    "Type": "string",
                                                    "Text": "\"else\""
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "Statements": [
                              {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Text.StringBuilder",
                                "Name": "Append",
                                "Arguments": [
                                  {
                                    "Type": "string",
                                    "Text": "\"else\""
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "string.IsNullOrWhiteSpace(section.GroupType) || section.GroupType == \"case\" || section.GroupType == \"stateMachine\" ? $\" {section.Label}\" : $\" [{section.Label}]\""
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "IsNullOrWhiteSpace",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "section.GroupType"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "Append",
                        "Arguments": [
                          {
                            "Type": "System.Text.StringBuilder",
                            "Text": "sectionBuilder"
                          }
                        ]
                      },
                      {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.StringBuilder",
                        "Name": "AppendLine",
                        "Arguments": [
                          {
                            "Type": "string",
                            "Text": "\"||5||\""
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "switchBuilder.Length > 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "Append",
                    "Arguments": [
                      {
                        "Type": "System.Text.StringBuilder",
                        "Text": "switchBuilder"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "AppendLine",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"end\""
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 20
      },
      {
        "Name": "RenderArrow",
        "Parameters": [
          {
            "Type": "System.Text.StringBuilder",
            "Name": "stringBuilder"
          },
          {
            "Type": "LivingDocumentation.Uml.Arrow",
            "Name": "arrow"
          },
          {
            "Type": "System.Collections.Generic.IReadOnlyList<LivingDocumentation.Uml.InteractionFragment>",
            "Name": "scope"
          },
          {
            "Type": "LivingDocumentation.Uml.Interactions",
            "Name": "tree"
          },
          {
            "Type": "System.Collections.Generic.List<string>",
            "Name": "activations"
          },
          {
            "Type": "System.Predicate<LivingDocumentation.Uml.Arrow>",
            "Name": "filter"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "filter != null && !filter.Invoke(arrow)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": ""
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "LastOrDefault"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "TakeWhile",
            "Arguments": [
              {
                "Type": "System.Func<LivingDocumentation.Uml.Arrow, bool>",
                "Text": "a => a != arrow"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "OfType<Arrow>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Text.StringBuilder",
            "Name": "AppendLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"{(isParallel ? \"& \" : string.Empty)}{arrow.Source}-{arrow.Color}{(arrow.Dashed ? \"-\" : string.Empty)}>{target}:{arrow.Name}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "!activations.Contains(arrow.Source)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "arrow.Target != \"]\" && arrow.Source != \"A\" && arrow.Source != \"W\" && !arrow.Source.StartsWith(\"x \", StringComparison.Ordinal) && scope.Descendants<Arrow>().Last(a => a.Source == arrow.Source) == arrow && arrow.Source != arrow.Target",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Text.StringBuilder",
                            "Name": "AppendLine",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "$\"deactivate {arrow.Source}\""
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Collections.Generic.List<string>",
                            "Name": "Remove",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "arrow.Source"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "!activations.Contains(arrow.Target)",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "(arrow.Target != \"A\" || arrow.Source == \"W\") && arrow.Target != \"Q\" && arrow.Target != \"W\" && !arrow.Target.StartsWith(\"x \", StringComparison.Ordinal) && arrow.Source != arrow.Target && scope.OfType<Arrow>().First(a => a.Target == arrow.Target) == arrow",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "ToList"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "OfType<Arrow>"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "System.Linq.Enumerable",
                            "Name": "SelectMany",
                            "Arguments": [
                              {
                                "Type": "System.Func<LivingDocumentation.Uml.InteractionFragment, System.Collections.Generic.IEnumerable<LivingDocumentation.Uml.InteractionFragment>>",
                                "Text": "a => a.StatementsBeforeSelf()"
                              }
                            ]
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragmentExtensions",
                            "Name": "Ancestors"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "LivingDocumentation.Uml.InteractionFragmentExtensions",
                            "Name": "StatementsBeforeSelf"
                          },
                          {
                            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                            "Sections": [
                              {
                                "Condition": "!previousArrows.Any(a => a.Target == arrow.Target) && !ExternalTargets.Contains(arrow.Target)",
                                "Statements": [
                                  {
                                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                    "ContainingType": "System.Text.StringBuilder",
                                    "Name": "AppendLine",
                                    "Arguments": [
                                      {
                                        "Type": "string",
                                        "Text": "$\"activate {arrow.Target}\""
                                      }
                                    ]
                                  },
                                  {
                                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                    "ContainingType": "System.Collections.Generic.List<string>",
                                    "Name": "Add",
                                    "Arguments": [
                                      {
                                        "Type": "string",
                                        "Text": "arrow.Target"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.Models.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Name"
              }
            ]
          }
        ]
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Address"
              }
            ]
          }
        ]
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Postal code"
              }
            ]
          }
        ]
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "City"
              }
            ]
          }
        ]
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Phonenumber"
              }
            ]
          }
        ]
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Email address"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.EmailAddressAttribute",
            "Name": "EmailAddress"
          }
        ]
      },
      {
        "Name": "LoyaltyLevel",
        "Type": "int?",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Loyalty level"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Models.MaintenanceJob",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "Modifiers": 2
      },
      {
        "Name": "Status",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Start Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "End Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "Vehicle",
        "Type": "Pitstop.Models.Vehicle",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Vehicle"
              }
            ]
          }
        ]
      },
      {
        "Name": "Customer",
        "Type": "Pitstop.Models.Customer",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Customer"
              }
            ]
          }
        ]
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Description"
              }
            ]
          }
        ]
      },
      {
        "Name": "ActualStartTime",
        "Type": "System.DateTime?",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Started at"
              }
            ]
          }
        ]
      },
      {
        "Name": "ActualEndTime",
        "Type": "System.DateTime?",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Completed at"
              }
            ]
          }
        ]
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Mechanic notes"
              }
            ]
          }
        ]
      },
      {
        "Name": "WorkshopPlanningDate",
        "Type": "System.DateTime",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Date"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Models.Vehicle",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "License number"
              }
            ]
          }
        ]
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Brand"
              }
            ]
          }
        ]
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Type"
              }
            ]
          }
        ]
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Owner"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.Models.WorkshopPlanning",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "Jobs",
        "Type": "System.Collections.Generic.List<Pitstop.Models.MaintenanceJob>",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Events.CustomerRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          },
          {
            "Type": "string",
            "Name": "emailAddress"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "emailAddress"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Events.DayHasPassed",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "DayHasPassed",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Events.MaintenanceJobFinished",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobFinished",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Events.MaintenanceJobPlanned",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobPlanned",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Model.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Model.MaintenanceJob",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "JobId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.NotificationService.NotificationChannels.IEmailNotifier",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "SendEmailAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "to"
          },
          {
            "Type": "string",
            "Name": "from"
          },
          {
            "Type": "string",
            "Name": "subject"
          },
          {
            "Type": "string",
            "Name": "body"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.NotificationChannels.SMTPEmailNotifier",
    "BaseTypes": [
      "Pitstop.NotificationService.NotificationChannels.IEmailNotifier"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_smptServer",
        "Type": "string"
      },
      {
        "Name": "_smtpPort",
        "Type": "int"
      },
      {
        "Name": "_userName",
        "Type": "string"
      },
      {
        "Name": "_password",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SMTPEmailNotifier",
        "Parameters": [
          {
            "Type": "string",
            "Name": "smtpServer"
          },
          {
            "Type": "int",
            "Name": "smtpPort"
          },
          {
            "Type": "string",
            "Name": "userName"
          },
          {
            "Type": "string",
            "Name": "password"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_smptServer",
            "Operator": "=",
            "Right": "smtpServer"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_smtpPort",
            "Operator": "=",
            "Right": "smtpPort"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_userName",
            "Operator": "=",
            "Right": "userName"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_password",
            "Operator": "=",
            "Right": "password"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "SendEmailAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "to"
          },
          {
            "Type": "string",
            "Name": "from"
          },
          {
            "Type": "string",
            "Name": "subject"
          },
          {
            "Type": "string",
            "Name": "body"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.SmtpClient",
            "Name": "SmtpClient",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_smptServer"
              },
              {
                "Type": "int",
                "Text": "_smtpPort"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "client.UseDefaultCredentials",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "client.Credentials",
            "Operator": "=",
            "Right": "new NetworkCredential(\"_username\", \"_password\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.NetworkCredential",
            "Name": "NetworkCredential",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"_username\""
              },
              {
                "Type": "string",
                "Text": "\"_password\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailMessage",
            "Name": "MailMessage"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "mailMessage.From",
            "Operator": "=",
            "Right": "new MailAddress(from)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailAddress",
            "Name": "MailAddress",
            "Arguments": [
              {
                "Type": "string",
                "Text": "from"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.MailAddressCollection",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "string",
                "Text": "to"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "mailMessage.Body",
            "Operator": "=",
            "Right": "body"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "mailMessage.Subject",
            "Operator": "=",
            "Right": "subject"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "ContinueWith",
            "Arguments": [
              {
                "Type": "System.Action<System.Threading.Tasks.Task>",
                "Text": "_ => Log.Information(\"Notification mail sent to {Recipient}.\", to)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "() => client.SendMailAsync(mailMessage)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "3"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(2)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error sending mail. Retrying in 2 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "2"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error sending mail. Retrying in 2 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Net.Mail.SmtpClient",
            "Name": "SendMailAsync",
            "Arguments": [
              {
                "Type": "System.Net.Mail.MailMessage",
                "Text": "mailMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Notification mail sent to {Recipient}.\""
              },
              {
                "Type": "string",
                "Text": "to"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.NotificationManager",
    "BaseTypes": [
      "Microsoft.Extensions.Hosting.IHostedService",
      "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_messageHandler",
        "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler"
      },
      {
        "Name": "_repo",
        "Type": "Pitstop.NotificationService.Repositories.INotificationRepository"
      },
      {
        "Name": "_emailNotifier",
        "Type": "Pitstop.NotificationService.NotificationChannels.IEmailNotifier"
      }
    ],
    "Constructors": [
      {
        "Name": "NotificationManager",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "messageHandler"
          },
          {
            "Type": "Pitstop.NotificationService.Repositories.INotificationRepository",
            "Name": "repo"
          },
          {
            "Type": "Pitstop.NotificationService.NotificationChannels.IEmailNotifier",
            "Name": "emailNotifier"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messageHandler",
            "Operator": "=",
            "Right": "messageHandler"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_repo",
            "Operator": "=",
            "Right": "repo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_emailNotifier",
            "Operator": "=",
            "Right": "emailNotifier"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "StartAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Start",
            "Arguments": [
              {
                "Type": "Pitstop.NotificationService.NotificationManager",
                "Text": "this"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StopAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Stop"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "HandleMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.MessageSerializer",
            "Name": "Deserialize",
            "Arguments": [
              {
                "Type": "string",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "\"CustomerRegistered\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.NotificationService.NotificationManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.NotificationService.Events.CustomerRegistered",
                        "Text": "messageObject.ToObject<CustomerRegistered>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<CustomerRegistered>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobPlanned\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.NotificationService.NotificationManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.NotificationService.Events.MaintenanceJobPlanned",
                        "Text": "messageObject.ToObject<MaintenanceJobPlanned>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobPlanned>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobFinished\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.NotificationService.NotificationManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.NotificationService.Events.MaintenanceJobFinished",
                        "Text": "messageObject.ToObject<MaintenanceJobFinished>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobFinished>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"DayHasPassed\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.NotificationService.NotificationManager",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.NotificationService.Events.DayHasPassed",
                        "Text": "messageObject.ToObject<DayHasPassed>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<DayHasPassed>"
                  }
                ]
              },
              {
                "Labels": [
                  "default"
                ]
              }
            ],
            "Expression": "messageType"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "System.Exception",
                "Text": "ex"
              },
              {
                "Type": "string",
                "Text": "$\"Error while handling {messageType} event.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Events.CustomerRegistered",
            "Name": "cr"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Model.Customer",
            "Name": "Customer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "CustomerId = cr.CustomerId"
              },
              {
                "Type": "string",
                "Text": "Name = cr.Name"
              },
              {
                "Type": "string",
                "Text": "TelephoneNumber = cr.TelephoneNumber"
              },
              {
                "Type": "string",
                "Text": "EmailAddress = cr.EmailAddress"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "cr.CustomerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "cr.Name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "cr.TelephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "cr.EmailAddress"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register customer: {Id}, {Name}, {TelephoneNumber}, {Email}\""
              },
              {
                "Type": "string",
                "Text": "customer.CustomerId"
              },
              {
                "Type": "string",
                "Text": "customer.Name"
              },
              {
                "Type": "string",
                "Text": "customer.TelephoneNumber"
              },
              {
                "Type": "string",
                "Text": "customer.EmailAddress"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
            "Name": "RegisterCustomerAsync",
            "Arguments": [
              {
                "Type": "Pitstop.NotificationService.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Events.MaintenanceJobPlanned",
            "Name": "mjp"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Model.MaintenanceJob",
            "Name": "MaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "JobId = mjp.JobId.ToString()"
              },
              {
                "Type": "string",
                "Text": "CustomerId = mjp.CustomerInfo.Id"
              },
              {
                "Type": "string",
                "Text": "LicenseNumber = mjp.VehicleInfo.LicenseNumber"
              },
              {
                "Type": "System.DateTime",
                "Text": "StartTime = mjp.StartTime"
              },
              {
                "Type": "string",
                "Text": "Description = mjp.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "mjp.JobId.ToString()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "ToString"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "mjp.CustomerInfo.Id"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "mjp.VehicleInfo.LicenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "mjp.StartTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "mjp.Description"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register Maintenance Job: {Id}, {CustomerId}, {VehicleLicenseNumber}, {StartTime}, {Description}\""
              },
              {
                "Type": "string",
                "Text": "job.JobId"
              },
              {
                "Type": "string",
                "Text": "job.CustomerId"
              },
              {
                "Type": "string",
                "Text": "job.LicenseNumber"
              },
              {
                "Type": "System.DateTime",
                "Text": "job.StartTime"
              },
              {
                "Type": "string",
                "Text": "job.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
            "Name": "RegisterMaintenanceJobAsync",
            "Arguments": [
              {
                "Type": "Pitstop.NotificationService.Model.MaintenanceJob",
                "Text": "job"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Events.MaintenanceJobFinished",
            "Name": "mjf"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Remove finished Maintenance Job: {Id}\""
              },
              {
                "Type": "string",
                "Text": "mjf.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
            "Name": "RemoveMaintenanceJobsAsync",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<string>",
                "Text": "new string[] { mjf.JobId.ToString() }.AsEnumerable()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "AsEnumerable"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "ToString"
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Events.DayHasPassed",
            "Name": "dhp"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
            "Name": "GetMaintenanceJobsForTodayAsync",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "today"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "jobsPerCustomer in jobsToNotify.GroupBy(job => job.CustomerId)",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
                "Name": "GetCustomerAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "customerId"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "StringBuilder"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"Dear {customer.Name},\\n\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"We would like to remind you that you have an appointment with us for maintenance on your vehicle(s):\\n\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                "Expression": "job in jobsPerCustomer",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Text.StringBuilder",
                    "Name": "AppendLine",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"- {job.StartTime.ToString(\"dd-MM-yyyy\")} at {job.StartTime.ToString(\"HH:mm\")} : \" +\r\n                        $\"{job.Description} on vehicle with license-number {job.LicenseNumber}\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"dd-MM-yyyy\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "ToString",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"HH:mm\""
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"\\nPlease make sure you're present at least 10 minutes before the (first) job is planned.\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"Once arrived, you can notify your arrival at our front-desk.\\n\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"Greetings,\\n\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "AppendLine",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "$\"The PitStop crew\""
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Serilog.Log",
                "Name": "Information",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "\"Sent notification to: {CustomerName}\""
                  },
                  {
                    "Type": "string",
                    "Text": "customer.Name"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.NotificationService.NotificationChannels.IEmailNotifier",
                "Name": "SendEmailAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "customer.EmailAddress"
                  },
                  {
                    "Type": "string",
                    "Text": "\"noreply@pitstop.nl\""
                  },
                  {
                    "Type": "string",
                    "Text": "\"Vehicle maintenance reminder\""
                  },
                  {
                    "Type": "string",
                    "Text": "body.ToString()"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Text.StringBuilder",
                "Name": "ToString"
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.NotificationService.Repositories.INotificationRepository",
                "Name": "RemoveMaintenanceJobsAsync",
                "Arguments": [
                  {
                    "Type": "System.Collections.Generic.IEnumerable<string>",
                    "Text": "jobsPerCustomer.Select(job => job.JobId)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Linq.Enumerable",
                "Name": "Select",
                "Arguments": [
                  {
                    "Type": "System.Func<Pitstop.NotificationService.Model.MaintenanceJob, string>",
                    "Text": "job => job.JobId"
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 260
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Program",
    "Methods": [
      {
        "Name": "Main",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Program",
            "Name": "CreateHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
            "Name": "RunAsync"
          }
        ],
        "Modifiers": 274
      },
      {
        "Name": "CreateHostBuilder",
        "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingHostBuilderExtensions",
            "Name": "UseConsoleLifetime"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogHostBuilderExtensions",
            "Name": "UseSerilog",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>",
                "Text": "(hostContext, loggerConfiguration) =>\r\n                {\r\n                    loggerConfiguration.ReadFrom.Configuration(hostContext.Configuration);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureServices",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection>",
                "Text": "(hostContext, services) =>\r\n                {\r\n                    services.AddTransient<IMessageHandler>((svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Notifications\", \"\"); ;\r\n                    });\r\n\r\n                    services.AddTransient<INotificationRepository>((svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"NotificationServiceCN\");\r\n                        return new SqlServerNotificationRepository(sqlConnectionString);\r\n                    });\r\n\r\n                    services.AddTransient<IEmailNotifier>((svc) =>\r\n                    {\r\n                        var mailConfigSection = hostContext.Configuration.GetSection(\"Email\");\r\n                        string mailHost = mailConfigSection[\"Host\"];\r\n                        int mailPort = Convert.ToInt32(mailConfigSection[\"Port\"]);\r\n                        string mailUserName = mailConfigSection[\"User\"];\r\n                        string mailPassword = mailConfigSection[\"Pwd\"];\r\n                        return new SMTPEmailNotifier(mailHost, mailPort, mailUserName, mailPassword);\r\n                    });\r\n\r\n                    services.AddHostedService<NotificationManager>();\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureAppConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "(hostContext, config) =>\r\n                {\r\n                    config.AddJsonFile($\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\", optional: false);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureHostConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "configHost =>\r\n                {\r\n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\r\n                    configHost.AddJsonFile(\"hostsettings.json\", optional: true);\r\n                    configHost.AddJsonFile($\"appsettings.json\", optional: false);\r\n                    configHost.AddEnvironmentVariables();\r\n                    configHost.AddEnvironmentVariables(\"PITSTOP_\");\r\n                    configHost.AddCommandLine(args);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.Host",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.FileConfigurationExtensions",
            "Name": "SetBasePath",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"hostsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PITSTOP_\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions",
            "Name": "AddCommandLine",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessageHandler>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessageHandler>",
                "Text": "(svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Notifications\", \"\"); ;\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"Notifications\", \"\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessageHandler",
            "Name": "RabbitMQMessageHandler",
            "Arguments": [
              {
                "Type": "string",
                "Text": "rabbitMQHost"
              },
              {
                "Type": "string",
                "Text": "rabbitMQUserName"
              },
              {
                "Type": "string",
                "Text": "rabbitMQPassword"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              },
              {
                "Type": "string",
                "Text": "\"Notifications\""
              },
              {
                "Type": "string",
                "Text": "\"\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<INotificationRepository>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.NotificationService.Repositories.INotificationRepository>",
                "Text": "(svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"NotificationServiceCN\");\r\n                        return new SqlServerNotificationRepository(sqlConnectionString);\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"NotificationServiceCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new SqlServerNotificationRepository(sqlConnectionString)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.Repositories.SqlServerNotificationRepository",
            "Name": "SqlServerNotificationRepository",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sqlConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IEmailNotifier>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.NotificationService.NotificationChannels.IEmailNotifier>",
                "Text": "(svc) =>\r\n                    {\r\n                        var mailConfigSection = hostContext.Configuration.GetSection(\"Email\");\r\n                        string mailHost = mailConfigSection[\"Host\"];\r\n                        int mailPort = Convert.ToInt32(mailConfigSection[\"Port\"]);\r\n                        string mailUserName = mailConfigSection[\"User\"];\r\n                        string mailPassword = mailConfigSection[\"Pwd\"];\r\n                        return new SMTPEmailNotifier(mailHost, mailPort, mailUserName, mailPassword);\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Email\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Convert",
            "Name": "ToInt32",
            "Arguments": [
              {
                "Type": "string",
                "Text": "mailConfigSection[\"Port\"]"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new SMTPEmailNotifier(mailHost, mailPort, mailUserName, mailPassword)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.NotificationService.NotificationChannels.SMTPEmailNotifier",
            "Name": "SMTPEmailNotifier",
            "Arguments": [
              {
                "Type": "string",
                "Text": "mailHost"
              },
              {
                "Type": "int",
                "Text": "mailPort"
              },
              {
                "Type": "string",
                "Text": "mailUserName"
              },
              {
                "Type": "string",
                "Text": "mailPassword"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions",
            "Name": "AddHostedService<NotificationManager>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "hostContext.Configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "hostBuilder"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.NotificationService.Repositories.INotificationRepository",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "RegisterCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Model.Customer",
            "Name": "customer"
          }
        ]
      },
      {
        "Name": "RegisterMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Model.MaintenanceJob",
            "Name": "job"
          }
        ]
      },
      {
        "Name": "GetMaintenanceJobsForTodayAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.NotificationService.Model.MaintenanceJob>>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ]
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.NotificationService.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ]
      },
      {
        "Name": "RemoveMaintenanceJobsAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<string>",
            "Name": "jobIds"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.NotificationService.Repositories.SqlServerNotificationRepository",
    "BaseTypes": [
      "Pitstop.NotificationService.Repositories.INotificationRepository"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_connectionString",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SqlServerNotificationRepository",
        "Parameters": [
          {
            "Type": "string",
            "Name": "connectionString"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_connectionString",
            "Operator": "=",
            "Right": "connectionString"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Initialize Database\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "Wait"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "InitializeDB"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncRetrySyntax",
            "Name": "WaitAndRetryAsync",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error connecting to DB. Retrying in 10 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 10 sec.\""
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "InitializeDB",
        "ReturnType": "System.Threading.Tasks.Task",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString.Replace(\"Notification\", \"master\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Notification\""
              },
              {
                "Type": "string",
                "Text": "\"master\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.Common.DbConnection",
            "Name": "OpenAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "ChangeDatabase",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Notification\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "sql",
            "Operator": "=",
            "Right": "\"IF OBJECT_ID('Customer') IS NULL \" +\r\n                      \"CREATE TABLE Customer (\" +\r\n                      \"  CustomerId varchar(50) NOT NULL,\" +\r\n                      \"  Name varchar(50) NOT NULL,\" +\r\n                      \"  TelephoneNumber varchar(50),\" +\r\n                      \"  EmailAddress varchar(50),\" +\r\n                      \"  PRIMARY KEY(CustomerId));\" +\r\n\r\n                      \"IF OBJECT_ID('MaintenanceJob') IS NULL \" +\r\n                      \"CREATE TABLE MaintenanceJob (\" +\r\n                      \"  JobId varchar(50) NOT NULL,\" +\r\n                      \"  LicenseNumber varchar(50) NOT NULL,\" +\r\n                      \"  CustomerId varchar(50) NOT NULL,\" +\r\n                      \"  StartTime datetime2 NOT NULL,\" +\r\n                      \"  Description varchar(250) NOT NULL,\" +\r\n                      \"  PRIMARY KEY(JobId));\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.NotificationService.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryFirstOrDefaultAsync<Customer>(\"select * from Customer where CustomerId = @CustomerId\",\r\n                    new { CustomerId = customerId })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryFirstOrDefaultAsync<Customer>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Customer where CustomerId = @CustomerId\""
              },
              {
                "Type": "<anonymous type: string CustomerId>",
                "Text": "new { CustomerId = customerId }"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Model.MaintenanceJob",
            "Name": "job"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "Pitstop.NotificationService.Model.MaintenanceJob",
                "Text": "job"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "Pitstop.NotificationService.Model.Customer",
            "Name": "customer"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "Pitstop.NotificationService.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetMaintenanceJobsForTodayAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.NotificationService.Model.MaintenanceJob>>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryAsync<MaintenanceJob>(\r\n                    \"select * from MaintenanceJob where StartTime >= @Today and StartTime < @Tomorrow\",\r\n                    new { Today = date.Date, Tomorrow = date.AddDays(1).Date })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<MaintenanceJob>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from MaintenanceJob where StartTime >= @Today and StartTime < @Tomorrow\""
              },
              {
                "Type": "<anonymous type: System.DateTime Today, System.DateTime Tomorrow>",
                "Text": "new { Today = date.Date, Tomorrow = date.AddDays(1).Date }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "AddDays",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RemoveMaintenanceJobsAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Collections.Generic.IEnumerable<string>",
            "Name": "jobIds"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<<anonymous type: string JobId>>",
                "Text": "jobIds.Select(j => new { JobId = j })"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "Select",
            "Arguments": [
              {
                "Type": "System.Func<string, <anonymous type: string JobId>>",
                "Text": "j => new { JobId = j }"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "PitStop.Program",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Main",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostExtensions",
            "Name": "Run"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.IWebHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "PitStop.Program",
            "Name": "CreateWebHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "CreateWebHostBuilder",
        "ReturnType": "Microsoft.AspNetCore.Hosting.IWebHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "WebHost.CreateDefaultBuilder(args)\r\n                .UseKestrel()\r\n                .UseSerilog()\r\n                .UseHealthChecks(\"/hc\")\r\n                .UseStartup<Startup>()\r\n                .UseContentRoot(Directory.GetCurrentDirectory())"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions",
            "Name": "UseContentRoot",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions",
            "Name": "UseStartup<Startup>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.HealthCheckWebHostBuilderExtension",
            "Name": "UseHealthChecks",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/hc\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogWebHostBuilderExtensions",
            "Name": "UseSerilog"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions",
            "Name": "UseKestrel"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.WebHost",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "PitStop.Startup",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_configuration",
        "Type": "Microsoft.Extensions.Configuration.IConfiguration"
      }
    ],
    "Constructors": [
      {
        "Name": "Startup",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "configuration"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_configuration",
            "Operator": "=",
            "Right": "configuration"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "ConfigureServices",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
            "Name": "services"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions",
            "Name": "AddNewtonsoftJson"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
            "Name": "AddMvc",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>",
                "Text": "options => options.EnableEndpointRouting = false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "options.EnableEndpointRouting",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions",
            "Name": "AddHttpClient<ICustomerManagementAPI, CustomerManagementAPI>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions",
            "Name": "AddHttpClient<IVehicleManagementAPI, VehicleManagementAPI>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions",
            "Name": "AddHttpClient<IWorkshopManagementAPI, WorkshopManagementAPI>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions",
            "Name": "AddHealthChecks",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.HealthChecks.HealthCheckBuilder>",
                "Text": "checks =>\r\n            {\r\n                checks.WithDefaultCacheDuration(TimeSpan.FromSeconds(1));\r\n                checks.AddValueTaskCheck(\"HTTP Endpoint\", () => new\r\n                    ValueTask<IHealthCheckResult>(HealthCheckResult.Healthy(\"Ok\")));\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilder",
            "Name": "WithDefaultCacheDuration",
            "Arguments": [
              {
                "Type": "System.TimeSpan",
                "Text": "TimeSpan.FromSeconds(1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilderExtensions",
            "Name": "AddValueTaskCheck",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"HTTP Endpoint\""
              },
              {
                "Type": "System.Func<System.Threading.Tasks.ValueTask<Microsoft.Extensions.HealthChecks.IHealthCheckResult>>",
                "Text": "() => new\r\n                    ValueTask<IHealthCheckResult>(HealthCheckResult.Healthy(\"Ok\"))"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.ValueTask<Microsoft.Extensions.HealthChecks.IHealthCheckResult>",
            "Name": "ValueTask<IHealthCheckResult>",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.HealthChecks.HealthCheckResult",
                "Text": "HealthCheckResult.Healthy(\"Ok\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckResult",
            "Name": "Healthy",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Ok\""
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Configure",
        "Parameters": [
          {
            "Type": "Microsoft.AspNetCore.Builder.IApplicationBuilder",
            "Name": "app"
          },
          {
            "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
            "Name": "env"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Log.Logger",
            "Operator": "=",
            "Right": "new LoggerConfiguration()\r\n                .ReadFrom.Configuration(_configuration)\r\n                .Enrich.WithMachineName()\r\n                .CreateLogger()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "CreateLogger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.EnvironmentLoggerConfigurationExtensions",
            "Name": "WithMachineName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "_configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "LoggerConfiguration"
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "env.EnvironmentName == \"Development\"",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions",
                    "Name": "UseDeveloperExceptionPage"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Builder.BrowserLinkExtensions",
                    "Name": "UseBrowserLink"
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Builder.HstsBuilderExtensions",
                    "Name": "UseHsts"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions",
                    "Name": "UseExceptionHandler",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"/Home/Error\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.StaticFileExtensions",
            "Name": "UseStaticFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions",
            "Name": "UseMvc",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>",
                "Text": "routes =>\r\n            {\r\n                routes.MapRoute(\r\n                    name: \"default\",\r\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions",
            "Name": "MapRoute",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"default\""
              },
              {
                "Type": "string",
                "Text": "\"{controller=Home}/{action=Index}/{id?}\""
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.TimeService.Events.DayHasPassed",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "DayHasPassed",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.TimeService.Program",
    "Methods": [
      {
        "Name": "Main",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.TimeService.Program",
            "Name": "CreateHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
            "Name": "RunAsync"
          }
        ],
        "Modifiers": 274
      },
      {
        "Name": "CreateHostBuilder",
        "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingHostBuilderExtensions",
            "Name": "UseConsoleLifetime"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogHostBuilderExtensions",
            "Name": "UseSerilog",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>",
                "Text": "(hostContext, loggerConfiguration) =>\r\n                {\r\n                    loggerConfiguration.ReadFrom.Configuration(hostContext.Configuration);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureServices",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection>",
                "Text": "(hostContext, services) =>\r\n                {\r\n                    services.AddTransient<IMessagePublisher>((svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessagePublisher(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\");\r\n                    });\r\n\r\n                    services.AddHostedService<TimeManager>();\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureAppConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "(hostContext, config) =>\r\n                {\r\n                    config.AddJsonFile($\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\", optional: false);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureHostConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "configHost =>\r\n                {\r\n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\r\n                    configHost.AddJsonFile(\"hostsettings.json\", optional: true);\r\n                    configHost.AddJsonFile($\"appsettings.json\", optional: false);\r\n                    configHost.AddEnvironmentVariables();\r\n                    configHost.AddEnvironmentVariables(\"PITSTOP_\");\r\n                    configHost.AddCommandLine(args);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.Host",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.FileConfigurationExtensions",
            "Name": "SetBasePath",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"hostsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PITSTOP_\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions",
            "Name": "AddCommandLine",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessagePublisher>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessagePublisher>",
                "Text": "(svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessagePublisher(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\");\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RabbitMQMessagePublisher(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessagePublisher",
            "Name": "RabbitMQMessagePublisher",
            "Arguments": [
              {
                "Type": "string",
                "Text": "rabbitMQHost"
              },
              {
                "Type": "string",
                "Text": "rabbitMQUserName"
              },
              {
                "Type": "string",
                "Text": "rabbitMQPassword"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions",
            "Name": "AddHostedService<TimeManager>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "hostContext.Configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "hostBuilder"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.TimeService.TimeManager",
    "BaseTypes": [
      "Microsoft.Extensions.Hosting.IHostedService"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_lastCheck",
        "Type": "System.DateTime"
      },
      {
        "Name": "_cancellationTokenSource",
        "Type": "System.Threading.CancellationTokenSource"
      },
      {
        "Name": "_task",
        "Type": "System.Threading.Tasks.Task"
      },
      {
        "Name": "_messagePublisher",
        "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher"
      }
    ],
    "Constructors": [
      {
        "Name": "TimeManager",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
            "Name": "messagePublisher"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_cancellationTokenSource",
            "Operator": "=",
            "Right": "new CancellationTokenSource()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.CancellationTokenSource",
            "Name": "CancellationTokenSource"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_lastCheck",
            "Operator": "=",
            "Right": "DateTime.Now"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messagePublisher",
            "Operator": "=",
            "Right": "messagePublisher"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "StartAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_task",
            "Operator": "=",
            "Right": "Task.Run(() => Worker(), _cancellationTokenSource.Token)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Tasks.Task",
            "Name": "Run",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => Worker()"
              },
              {
                "Type": "System.Threading.CancellationToken",
                "Text": "_cancellationTokenSource.Token"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.TimeService.TimeManager",
            "Name": "Worker"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StopAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.CancellationTokenSource",
            "Name": "Cancel"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Worker",
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "DateTime.Now.Subtract(_lastCheck).Days > 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Serilog.Log",
                    "Name": "Information",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"Day has passed!\""
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "_lastCheck",
                    "Operator": "=",
                    "Right": "DateTime.Now"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.DateTime",
                    "Name": "AddDays",
                    "Arguments": [
                      {
                        "Type": "int",
                        "Text": "-1"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.TimeService.Events.DayHasPassed",
                    "Name": "DayHasPassed",
                    "Arguments": [
                      {
                        "Type": "System.Guid",
                        "Text": "Guid.NewGuid()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Guid",
                    "Name": "NewGuid"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
                    "Name": "PublishMessageAsync",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "e.MessageType"
                      },
                      {
                        "Type": "Pitstop.TimeService.Events.DayHasPassed",
                        "Text": "e"
                      },
                      {
                        "Type": "string",
                        "Text": "\"\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Threading.Thread",
            "Name": "Sleep",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10000"
              }
            ]
          }
        ],
        "Modifiers": 260
      }
    ]
  },
  {
    "FullName": "Pitstop.VehicleManagementAPI.Mappers.Mappers",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "MapToVehicle",
        "ReturnType": "Pitstop.Application.VehicleManagement.Model.Vehicle",
        "Parameters": [
          {
            "Type": "Pitstop.Application.VehicleManagement.Commands.RegisterVehicle",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new Vehicle\r\n        {\r\n            LicenseNumber = command.LicenseNumber,\r\n            Brand = command.Brand,\r\n            Type = command.Type,\r\n            OwnerId = command.OwnerId\r\n        }"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Application.VehicleManagement.Model.Vehicle",
            "Name": "Vehicle",
            "Arguments": [
              {
                "Type": "string",
                "Text": "LicenseNumber = command.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "Brand = command.Brand"
              },
              {
                "Type": "string",
                "Text": "Type = command.Type"
              },
              {
                "Type": "string",
                "Text": "OwnerId = command.OwnerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "command.LicenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "command.Brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "command.Type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "command.OwnerId"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.CustomerManagementDetailsViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Customer",
        "Type": "Pitstop.Models.Customer",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.CustomerManagementNewViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Customer",
        "Type": "Pitstop.Models.Customer",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.CustomerManagementOfflineViewModel",
    "Modifiers": 2
  },
  {
    "FullName": "Pitstop.ViewModels.CustomerManagementViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Customers",
        "Type": "System.Collections.Generic.IEnumerable<Pitstop.Models.Customer>",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.VehicleManagementDetailsViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Vehicle",
        "Type": "Pitstop.Models.Vehicle",
        "Modifiers": 2
      },
      {
        "Name": "Owner",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.VehicleManagementNewViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Vehicle",
        "Type": "Pitstop.Models.Vehicle",
        "Modifiers": 2
      },
      {
        "Name": "Customers",
        "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
        "Modifiers": 2
      },
      {
        "Name": "SelectedCustomerId",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required",
            "Arguments": [
              {
                "Name": "ErrorMessage",
                "Type": "string",
                "Value": "Owner is required"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.VehicleManagementOfflineViewModel",
    "Modifiers": 2
  },
  {
    "FullName": "Pitstop.ViewModels.VehicleManagementViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Vehicles",
        "Type": "System.Collections.Generic.IEnumerable<Pitstop.Models.Vehicle>",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.WorkshopManagementDetailsViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "MaintenanceJob",
        "Type": "Pitstop.Models.MaintenanceJob",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.WorkshopManagementFinishViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "Modifiers": 2
      },
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "ActualStartTime",
        "Type": "System.DateTime?",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Started at"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DataTypeAttribute",
            "Name": "DataType",
            "Arguments": [
              {
                "Name": "DataType.Time",
                "Type": "System.ComponentModel.DataAnnotations.DataType",
                "Value": "DataType.Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "ActualEndTime",
        "Type": "System.DateTime?",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Completed at"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DataTypeAttribute",
            "Name": "DataType",
            "Arguments": [
              {
                "Name": "DataType.Time",
                "Type": "System.ComponentModel.DataAnnotations.DataType",
                "Value": "DataType.Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Mechanic notes"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.WorkshopManagementNewViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "Modifiers": 2
      },
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DataTypeAttribute",
            "Name": "DataType",
            "Arguments": [
              {
                "Name": "DataType.Time",
                "Type": "System.ComponentModel.DataAnnotations.DataType",
                "Value": "DataType.Time"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Start Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "End Time"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DataTypeAttribute",
            "Name": "DataType",
            "Arguments": [
              {
                "Name": "DataType.Time",
                "Type": "System.ComponentModel.DataAnnotations.DataType",
                "Value": "DataType.Time"
              }
            ]
          }
        ]
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required"
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Description"
              }
            ]
          }
        ]
      },
      {
        "Name": "Vehicles",
        "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
        "Modifiers": 2
      },
      {
        "Name": "SelectedVehicleLicenseNumber",
        "Type": "string",
        "Modifiers": 2,
        "Attributes": [
          {
            "Type": "System.ComponentModel.DataAnnotations.RequiredAttribute",
            "Name": "Required",
            "Arguments": [
              {
                "Name": "ErrorMessage",
                "Type": "string",
                "Value": "Vehicle is required"
              }
            ]
          },
          {
            "Type": "System.ComponentModel.DataAnnotations.DisplayAttribute",
            "Name": "Display",
            "Arguments": [
              {
                "Name": "Name",
                "Type": "string",
                "Value": "Vehicle"
              }
            ]
          }
        ]
      },
      {
        "Name": "Error",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.ViewModels.WorkshopManagementOfflineViewModel",
    "Modifiers": 2
  },
  {
    "FullName": "Pitstop.ViewModels.WorkshopManagementViewModel",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "MaintenanceJobs",
        "Type": "System.Collections.Generic.List<Pitstop.Models.MaintenanceJob>",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WebApp.Mappers.Mappers",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "MapToRegisterCustomer",
        "ReturnType": "WebApp.Commands.RegisterCustomer",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.CustomerManagementNewViewModel",
            "Name": "source"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RegisterCustomer\r\n        (\r\n            Guid.NewGuid(),\r\n            Guid.NewGuid().ToString(\"N\"),\r\n            source.Customer.Name,\r\n            source.Customer.Address,\r\n            source.Customer.PostalCode,\r\n            source.Customer.City,\r\n            source.Customer.TelephoneNumber,\r\n            source.Customer.EmailAddress\r\n        )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.Commands.RegisterCustomer",
            "Name": "RegisterCustomer",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "string",
                "Text": "Guid.NewGuid().ToString(\"N\")"
              },
              {
                "Type": "string",
                "Text": "source.Customer.Name"
              },
              {
                "Type": "string",
                "Text": "source.Customer.Address"
              },
              {
                "Type": "string",
                "Text": "source.Customer.PostalCode"
              },
              {
                "Type": "string",
                "Text": "source.Customer.City"
              },
              {
                "Type": "string",
                "Text": "source.Customer.TelephoneNumber"
              },
              {
                "Type": "string",
                "Text": "source.Customer.EmailAddress"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"N\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "MapToRegisterVehicle",
        "ReturnType": "WebApp.Commands.RegisterVehicle",
        "Parameters": [
          {
            "Type": "Pitstop.ViewModels.VehicleManagementNewViewModel",
            "Name": "source"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RegisterVehicle(\r\n            Guid.NewGuid(),\r\n            source.Vehicle.LicenseNumber,\r\n            source.Vehicle.Brand,\r\n            source.Vehicle.Type,\r\n            source.SelectedCustomerId\r\n        )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.Commands.RegisterVehicle",
            "Name": "RegisterVehicle",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "string",
                "Text": "source.Vehicle.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "source.Vehicle.Brand"
              },
              {
                "Type": "string",
                "Text": "source.Vehicle.Type"
              },
              {
                "Type": "string",
                "Text": "source.SelectedCustomerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "FinishMaintenanceJob",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "string",
            "Name": "notes"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Notes",
            "Operator": "=",
            "Right": "notes"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "PlanMaintenanceJob",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Controllers.RefDataController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
        "Name": "Route",
        "Arguments": [
          {
            "Name": "\"/api/[controller]\"",
            "Type": "string",
            "Value": "/api/[controller]"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "_customerRepo",
        "Type": "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository"
      },
      {
        "Name": "_vehicleRepo",
        "Type": "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository"
      }
    ],
    "Constructors": [
      {
        "Name": "RefDataController",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository",
            "Name": "customerRepo"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository",
            "Name": "vehicleRepo"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_customerRepo",
            "Operator": "=",
            "Right": "customerRepo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_vehicleRepo",
            "Operator": "=",
            "Right": "vehicleRepo"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(await _customerRepo.GetCustomersAsync())"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
                "Text": "await _customerRepo.GetCustomersAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository",
            "Name": "GetCustomersAsync"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"customers\"",
                "Type": "string",
                "Value": "customers"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetCustomerByCustomerId",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository",
            "Name": "GetCustomerAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "customerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "customer == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "NotFound()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "NotFound"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(customer)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Repositories.Model.Customer",
                "Text": "customer"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"customers/{customerId}\"",
                "Type": "string",
                "Value": "customers/{customerId}"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(await _vehicleRepo.GetVehiclesAsync())"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
                "Text": "await _vehicleRepo.GetVehiclesAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository",
            "Name": "GetVehiclesAsync"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"vehicles\"",
                "Type": "string",
                "Value": "vehicles"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository",
            "Name": "GetVehicleAsync",
            "Arguments": [
              {
                "Type": "string",
                "Text": "licenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "vehicle == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "NotFound()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "NotFound"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(vehicle)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle",
                "Text": "vehicle"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"vehicles/{licenseNumber}\"",
                "Type": "string",
                "Value": "vehicles/{licenseNumber}"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Controllers.WorkshopPlanningController",
    "BaseTypes": [
      "Microsoft.AspNetCore.Mvc.Controller"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
        "Name": "Route",
        "Arguments": [
          {
            "Name": "\"/api/[controller]\"",
            "Type": "string",
            "Value": "/api/[controller]"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "_planningRepo",
        "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
        "Modifiers": 132
      },
      {
        "Name": "_planMaintenanceJobCommandHandler",
        "Type": "WorkshopManagementAPI.CommandHandlers.IPlanMaintenanceJobCommandHandler",
        "Modifiers": 132
      },
      {
        "Name": "_finishMaintenanceJobCommandHandler",
        "Type": "WorkshopManagementAPI.CommandHandlers.IFinishMaintenanceJobCommandHandler",
        "Modifiers": 132
      }
    ],
    "Constructors": [
      {
        "Name": "WorkshopPlanningController",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "planningRepo"
          },
          {
            "Type": "WorkshopManagementAPI.CommandHandlers.IPlanMaintenanceJobCommandHandler",
            "Name": "planMaintenanceJobCommandHandler"
          },
          {
            "Type": "WorkshopManagementAPI.CommandHandlers.IFinishMaintenanceJobCommandHandler",
            "Name": "finishMaintenanceJobCommand"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_planningRepo",
            "Operator": "=",
            "Right": "planningRepo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_planMaintenanceJobCommandHandler",
            "Operator": "=",
            "Right": "planMaintenanceJobCommandHandler"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_finishMaintenanceJobCommandHandler",
            "Operator": "=",
            "Right": "finishMaintenanceJobCommand"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetByDate",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "GetWorkshopPlanningAsync",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "planningDate"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "NotFound()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "NotFound"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Ok(planning)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "Ok",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
                "Text": "planning"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "ex.ToString()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Exception",
            "Name": "ToString"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{planningDate}\"",
                "Type": "string",
                "Value": "{planningDate}"
              },
              {
                "Name": "Name",
                "Type": "string",
                "Value": "GetByDate"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
                    "Name": "GetWorkshopPlanningAsync",
                    "Arguments": [
                      {
                        "Type": "System.DateTime",
                        "Text": "planningDate"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "planning == null || planning.Jobs == null",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                            "Expression": "NotFound()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                            "Name": "NotFound"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Linq.Enumerable",
                    "Name": "FirstOrDefault",
                    "Arguments": [
                      {
                        "Type": "System.Func<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob, bool>",
                        "Text": "j => j.Id == jobId"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "job == null",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                            "Expression": "NotFound()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                            "Name": "NotFound"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "Ok(job)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "Ok",
                    "Arguments": [
                      {
                        "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
                        "Text": "job"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Serilog.Log",
                    "Name": "Error",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "ex.ToString()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Exception",
                    "Name": "ToString"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "BadRequest()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "BadRequest"
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpGetAttribute",
            "Name": "HttpGet"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{planningDate}/jobs/{jobId}\"",
                "Type": "string",
                "Value": "{planningDate}/jobs/{jobId}"
              }
            ]
          }
        ]
      },
      {
        "Name": "PlanMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromBodyAttribute",
                "Name": "FromBody"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WorkshopManagementAPI.CommandHandlers.IPlanMaintenanceJobCommandHandler",
                    "Name": "HandleCommandAsync",
                    "Arguments": [
                      {
                        "Type": "System.DateTime",
                        "Text": "planningDate"
                      },
                      {
                        "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
                        "Text": "command"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "planning == null",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                            "Expression": "NotFound()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                            "Name": "NotFound"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "CreatedAtRoute(\"GetByDate\", new { planningDate = planning.Id }, planning)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "CreatedAtRoute",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"GetByDate\""
                      },
                      {
                        "Type": "<anonymous type: Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId planningDate>",
                        "Text": "new { planningDate = planning.Id }"
                      },
                      {
                        "Type": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
                        "Text": "planning"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "StatusCode(StatusCodes.Status409Conflict, new BusinessRuleViolation { ErrorMessage = ex.Message })"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "StatusCode",
                    "Arguments": [
                      {
                        "Type": "int",
                        "Text": "StatusCodes.Status409Conflict"
                      },
                      {
                        "Type": "Pitstop.WorkshopManagementAPI.Models.BusinessRuleViolation",
                        "Text": "new BusinessRuleViolation { ErrorMessage = ex.Message }"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Models.BusinessRuleViolation",
                    "Name": "BusinessRuleViolation",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "ErrorMessage = ex.Message"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "ErrorMessage",
                    "Operator": "=",
                    "Right": "ex.Message"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "BadRequest()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "BadRequest"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "errorMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary",
            "Name": "AddModelError",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ErrorMessage\""
              },
              {
                "Type": "string",
                "Text": "errorMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "StatusCode(StatusCodes.Status500InternalServerError)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "StatusCode",
            "Arguments": [
              {
                "Type": "int",
                "Text": "StatusCodes.Status500InternalServerError"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPostAttribute",
            "Name": "HttpPost"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{planningDate}/jobs\"",
                "Type": "string",
                "Value": "{planningDate}/jobs"
              }
            ]
          }
        ]
      },
      {
        "Name": "FinishMaintenanceJobAsync",
        "ReturnType": "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
            "Name": "command",
            "Attributes": [
              {
                "Type": "Microsoft.AspNetCore.Mvc.FromBodyAttribute",
                "Name": "FromBody"
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ModelState.IsValid",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "WorkshopManagementAPI.CommandHandlers.IFinishMaintenanceJobCommandHandler",
                    "Name": "HandleCommandAsync",
                    "Arguments": [
                      {
                        "Type": "System.DateTime",
                        "Text": "planningDate"
                      },
                      {
                        "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
                        "Text": "command"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "planning == null",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                            "Expression": "NotFound()"
                          },
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                            "Name": "NotFound"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "Ok()"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
                    "Name": "Ok"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "BadRequest()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "BadRequest"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "errorMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary",
            "Name": "AddModelError",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"\""
              },
              {
                "Type": "string",
                "Text": "errorMessage"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "StatusCode(StatusCodes.Status500InternalServerError)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Mvc.ControllerBase",
            "Name": "StatusCode",
            "Arguments": [
              {
                "Type": "int",
                "Text": "StatusCodes.Status500InternalServerError"
              }
            ]
          }
        ],
        "Modifiers": 258,
        "Attributes": [
          {
            "Type": "Microsoft.AspNetCore.Mvc.HttpPutAttribute",
            "Name": "HttpPut"
          },
          {
            "Type": "Microsoft.AspNetCore.Mvc.RouteAttribute",
            "Name": "Route",
            "Arguments": [
              {
                "Name": "\"{planningDate}/jobs/{jobId}/finish\"",
                "Type": "string",
                "Value": "{planningDate}/jobs/{jobId}/finish"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.MaintenanceJobRules",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "FinishedMaintenanceJobCanNotBeFinished",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
            "Name": "job"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "job.Status == \"Completed\"",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.BusinessRuleViolationException",
                    "Name": "BusinessRuleViolationException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"An already finished job can not be finished.\""
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.WorkshopPlanningRules",
    "Modifiers": 18,
    "Fields": [
      {
        "Name": "AVAILABLE_WORKSTATIONS",
        "Type": "int",
        "Initializer": "3",
        "DocumentationComments": {
          "Summary": "The maximum number of parallel jobs in the workshop (restricted by the available workstations)."
        }
      }
    ],
    "Methods": [
      {
        "Name": "PlannedMaintenanceJobShouldFallWithinOneBusinessDay",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "planning"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "command.StartTime.Date != command.EndTime.Date",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.BusinessRuleViolationException",
                    "Name": "BusinessRuleViolationException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"Start-time and end-time of a Maintenance Job must be within a 1 day.\""
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "NumberOfParallelMaintenanceJobsMustNotExceedAvailableWorkStations",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "planning"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning.Jobs.Count(j =>\r\n                (j.StartTime >= command.StartTime && j.StartTime <= command.EndTime) ||\r\n                (j.EndTime >= command.StartTime && j.EndTime <= command.EndTime)) >= AVAILABLE_WORKSTATIONS",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.BusinessRuleViolationException",
                    "Name": "BusinessRuleViolationException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"Maintenancejob overlaps with more than {AVAILABLE_WORKSTATIONS} other jobs.\""
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "NumberOfParallelMaintenanceJobsOnAVehicleIsOne",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "planning"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning.Jobs.Any(j => j.Vehicle.Id == command.VehicleInfo.LicenseNumber &&\r\n                    (j.StartTime >= command.StartTime && j.StartTime <= command.EndTime ||\r\n                    j.EndTime >= command.StartTime && j.EndTime <= command.EndTime))",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.BusinessRuleViolationException",
                    "Name": "BusinessRuleViolationException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"Only 1 maintenance job can be executed on a vehicle during a certain time-slot.\""
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<TId>",
    "DocumentationComments": {
      "Remarks": "In a real-world project, this class should be shared over domains in a NuGet package.",
      "Summary": "Represents an aggregate-root of a domain aggregate (DDD). An aggregate-root is always an entity.",
      "TypeParams": {
        "TId": "The type of the Id of the entity."
      }
    },
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Domain.Core.Entity<TId>"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_events",
        "Type": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
        "DocumentationComments": {
          "Summary": "The list of events that occur while handling commands."
        }
      }
    ],
    "Constructors": [
      {
        "Name": "AggregateRoot",
        "Parameters": [
          {
            "Type": "TId",
            "Name": "id"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OriginalVersion",
            "Operator": "=",
            "Right": "0"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Version",
            "Operator": "=",
            "Right": "0"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_events",
            "Operator": "=",
            "Right": "new List<Event>()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "List<Event>"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "Constructor for creating an empty aggregate.",
          "Params": {
            "id": "The unique id of the aggregate-root."
          }
        }
      },
      {
        "Name": "AggregateRoot",
        "Parameters": [
          {
            "Type": "TId",
            "Name": "id"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "events"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "IsReplaying",
            "Operator": "=",
            "Right": "true"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "e in events",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<TId>",
                "Name": "When",
                "Arguments": [
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "e"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "IsReplaying",
            "Operator": "=",
            "Right": "false"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "Constructor for creating an aggregate of which the state is intialized by replaying the list of events specified.",
          "Params": {
            "id": "The unique Id of the aggregate.",
            "events": "The events to replay."
          }
        }
      }
    ],
    "Properties": [
      {
        "Name": "IsReplaying",
        "Type": "bool",
        "Initializer": "false",
        "DocumentationComments": {
          "Summary": "Indication whether the aggregate is replaying events (true) or not (false)."
        }
      },
      {
        "Name": "Version",
        "Type": "int",
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "The original version of the aggregate after replaying all events in the event-store."
        }
      },
      {
        "Name": "OriginalVersion",
        "Type": "int",
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "The current version after handling any commands."
        }
      }
    ],
    "Methods": [
      {
        "Name": "GetEvents",
        "ReturnType": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "_events"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "Get the list of events that occured while handling commands."
        }
      },
      {
        "Name": "RaiseEvent",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.Event",
            "Name": "@event"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<TId>",
            "Name": "When",
            "Arguments": [
              {
                "Type": "Pitstop.Infrastructure.Messaging.Event",
                "Text": "@event"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "Pitstop.Infrastructure.Messaging.Event",
                "Text": "@event"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Version",
            "Operator": "+=",
            "Right": "1"
          }
        ],
        "Modifiers": 8,
        "DocumentationComments": {
          "Remarks": "Use GetEvents to retrieve the list of events.",
          "Summary": "Let the aggregate handle an event and save it in the list of events so it can be used outside the aggregate (persisted, published on a bus, ...).",
          "Params": {
            "event": "The event to handle."
          }
        }
      },
      {
        "Name": "ClearEvents",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "Clear"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "Clear the list of events that occorred while handling a command."
        }
      },
      {
        "Name": "When",
        "Parameters": [
          {
            "Type": "dynamic",
            "Name": "@event"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.NotImplementedException",
            "Name": "NotImplementedException"
          }
        ],
        "Modifiers": 8,
        "DocumentationComments": {
          "Summary": "Handle a specific event. Derived classes should overide this method and implement the handling of different types of events.",
          "Params": {
            "@event": "The event to handle."
          }
        }
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Core.Entity<TId>",
    "DocumentationComments": {
      "Remarks": "In a real-world project, this class should be shared over domains in a NuGet package.",
      "Summary": "Represents an Entity in the domain (DDD).",
      "TypeParams": {
        "TId": "The type of the Id of the entity."
      }
    },
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "Entity",
        "Parameters": [
          {
            "Type": "TId",
            "Name": "id"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Id",
            "Operator": "=",
            "Right": "id"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Id",
        "Type": "TId",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Core.ObjectAsEnumerableWrapper",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "AsEnumerable",
        "ReturnType": "System.Collections.Generic.IEnumerable<T>",
        "Parameters": [
          {
            "Type": "T",
            "Name": "item"
          }
        ],
        "Modifiers": 18,
        "DocumentationComments": {
          "Remarks": "In a real-world project, this class should be shared over domains in a NuGet package.",
          "Returns": "An IEnumerable of type T.",
          "Summary": "Wrap an object in an Enumerable. This is a convenience method that is handy when you need to return an IEnumerable but only have 1 item. You don't have to wrap the item yourself.",
          "Params": {
            "item": "The item to wrap."
          },
          "TypeParams": {
            "T": "The type of the item to wrap."
          }
        }
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Entities.Customer",
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Domain.Core.Entity<string>"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "Customer",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "Vehicle",
        "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Vehicle",
        "Modifiers": 2
      },
      {
        "Name": "Customer",
        "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Customer",
        "Modifiers": 2
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "ActualStartTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "ActualEndTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Status",
        "Type": "string",
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Plan",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "id"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Vehicle",
            "Name": "vehicle"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Customer",
            "Name": "customer"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Id",
            "Operator": "=",
            "Right": "id"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicle",
            "Operator": "=",
            "Right": "vehicle"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customer",
            "Operator": "=",
            "Right": "customer"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Finish",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "actualStartTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "actualEndTime"
          },
          {
            "Type": "string",
            "Name": "notes"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "ActualStartTime",
            "Operator": "=",
            "Right": "actualStartTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "ActualEndTime",
            "Operator": "=",
            "Right": "actualEndTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Notes",
            "Operator": "=",
            "Right": "notes"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Entities.Vehicle",
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Domain.Core.Entity<string>"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "Vehicle",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          },
          {
            "Type": "string",
            "Name": "brand"
          },
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "ownerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "ownerId"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.BusinessRuleViolationException",
    "BaseTypes": [
      "System.Exception"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "BusinessRuleViolationException",
        "Modifiers": 2
      },
      {
        "Name": "BusinessRuleViolationException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "BusinessRuleViolationException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          },
          {
            "Type": "System.Exception",
            "Name": "innerException"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.MaintenanceJobNotFoundException",
    "BaseTypes": [
      "System.Exception"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "MaintenanceJobNotFoundException",
        "Modifiers": 2
      },
      {
        "Name": "MaintenanceJobNotFoundException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "MaintenanceJobNotFoundException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          },
          {
            "Type": "System.Exception",
            "Name": "innerException"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "DATE_FORMAT",
        "Type": "string",
        "Initializer": "\"yyyy-MM-dd\""
      },
      {
        "Name": "_id",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "WorkshopPlanningId",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_id",
            "Operator": "=",
            "Right": "date.ToString(DATE_FORMAT)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "DATE_FORMAT"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Value",
        "Type": "string",
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Equals",
        "ReturnType": "bool",
        "Parameters": [
          {
            "Type": "object",
            "Name": "obj"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "obj == null || GetType() != obj.GetType()",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "false"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "string.Equals(this.Value, ((WorkshopPlanningId)obj).Value)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Equals",
            "Arguments": [
              {
                "Type": "string",
                "Text": "this.Value"
              },
              {
                "Type": "string",
                "Text": "((WorkshopPlanningId)obj).Value"
              }
            ]
          }
        ],
        "Modifiers": 66
      },
      {
        "Name": "GetHashCode",
        "ReturnType": "int",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Value.GetHashCode()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "GetHashCode"
          }
        ],
        "Modifiers": 66
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "WorkshopPlanning",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "WorkshopPlanning",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "events"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Jobs",
        "Type": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob>",
        "Modifiers": 2,
        "DocumentationComments": {
          "Summary": "The list of maintenance-jobs for this day."
        }
      }
    ],
    "Methods": [
      {
        "Name": "Create",
        "ReturnType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "WorkshopPlanning",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "date"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Events.WorkshopPlanningCreated",
            "Name": "WorkshopPlanningCreated",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "System.DateTime",
                "Text": "date"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>",
            "Name": "RaiseEvent",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Events.WorkshopPlanningCreated",
                "Text": "e"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "planning"
          }
        ],
        "Modifiers": 18,
        "DocumentationComments": {
          "Summary": "Creates a new instance of a workshop-planning for the specified date.",
          "Params": {
            "date": "The date to create the planning for."
          }
        }
      },
      {
        "Name": "PlanMaintenanceJob",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.WorkshopPlanningRules",
            "Name": "PlannedMaintenanceJobShouldFallWithinOneBusinessDay",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
                "Text": "command"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.WorkshopPlanningRules",
            "Name": "NumberOfParallelMaintenanceJobsMustNotExceedAvailableWorkStations",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
                "Text": "command"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.WorkshopPlanningRules",
            "Name": "NumberOfParallelMaintenanceJobsOnAVehicleIsOne",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
                "Text": "command"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Mappers.Mappers",
            "Name": "MapToMaintenanceJobPlanned"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>",
            "Name": "RaiseEvent",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobPlanned",
                "Text": "e"
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "FinishMaintenanceJob",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "System.Func<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob, bool>",
                "Text": "j => j.Id == command.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "job == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Exceptions.MaintenanceJobNotFoundException",
                    "Name": "MaintenanceJobNotFoundException",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "$\"Maintenance job with id {command.JobId} found.\""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.BusinessRules.MaintenanceJobRules",
            "Name": "FinishedMaintenanceJobCanNotBeFinished"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Mappers.Mappers",
            "Name": "MapToMaintenanceJobFinished"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>",
            "Name": "RaiseEvent",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobFinished",
                "Text": "e"
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "When",
        "Parameters": [
          {
            "Type": "dynamic",
            "Name": "@event"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "Handle",
            "Arguments": [
              {
                "Type": "dynamic",
                "Text": "@event"
              }
            ]
          }
        ],
        "Modifiers": 72,
        "DocumentationComments": {
          "Remarks": "Caution: this handles is also called while replaying events to restore state.\nSo, do not execute any checks that could fail or introduce any side-effects in this handler.",
          "Summary": "Handles an event and updates the aggregate version."
        }
      },
      {
        "Name": "Handle",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Events.WorkshopPlanningCreated",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Jobs",
            "Operator": "=",
            "Right": "new List<MaintenanceJob>()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob>",
            "Name": "List<MaintenanceJob>"
          }
        ]
      },
      {
        "Name": "Handle",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobPlanned",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
            "Name": "MaintenanceJob"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Entities.Customer",
            "Name": "Customer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "e.CustomerInfo.Id"
              },
              {
                "Type": "string",
                "Text": "e.CustomerInfo.Name"
              },
              {
                "Type": "string",
                "Text": "e.CustomerInfo.TelephoneNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Entities.Vehicle",
            "Name": "Vehicle",
            "Arguments": [
              {
                "Type": "string",
                "Text": "e.VehicleInfo.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "e.VehicleInfo.Brand"
              },
              {
                "Type": "string",
                "Text": "e.VehicleInfo.Type"
              },
              {
                "Type": "string",
                "Text": "customer.Id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
            "Name": "Plan",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "e.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.EndTime"
              },
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Vehicle",
                "Text": "vehicle"
              },
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.Customer",
                "Text": "customer"
              },
              {
                "Type": "string",
                "Text": "e.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob>",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
                "Text": "job"
              }
            ]
          }
        ]
      },
      {
        "Name": "Handle",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobFinished",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Linq.Enumerable",
            "Name": "FirstOrDefault",
            "Arguments": [
              {
                "Type": "System.Func<Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob, bool>",
                "Text": "j => j.Id == e.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Entities.MaintenanceJob",
            "Name": "Finish",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "e.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.EndTime"
              },
              {
                "Type": "string",
                "Text": "e.Notes"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobFinished",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobFinished",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "string",
            "Name": "notes"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Notes",
            "Operator": "=",
            "Right": "notes"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobPlanned",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobPlanned",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Events.WorkshopPlanningCreated",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "Date",
        "Type": "System.DateTime",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "WorkshopPlanningCreated",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Date",
            "Operator": "=",
            "Right": "date"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Mappers.Mappers",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "MapToMaintenanceJobPlanned",
        "ReturnType": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobPlanned",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "source"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new MaintenanceJobPlanned(\r\n            Guid.NewGuid(),\r\n            source.JobId,\r\n            source.StartTime,\r\n            source.EndTime,\r\n            source.CustomerInfo,\r\n            source.VehicleInfo,\r\n            source.Description\r\n        )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobPlanned",
            "Name": "MaintenanceJobPlanned",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "System.Guid",
                "Text": "source.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "source.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "source.EndTime"
              },
              {
                "Type": "(string Id, string Name, string TelephoneNumber)",
                "Text": "source.CustomerInfo"
              },
              {
                "Type": "(string LicenseNumber, string Brand, string Type)",
                "Text": "source.VehicleInfo"
              },
              {
                "Type": "string",
                "Text": "source.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      },
      {
        "Name": "MapToMaintenanceJobFinished",
        "ReturnType": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobFinished",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
            "Name": "source"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new MaintenanceJobFinished\r\n        (\r\n            Guid.NewGuid(),\r\n            source.JobId,\r\n            source.StartTime,\r\n            source.EndTime,\r\n            source.Notes\r\n        )"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Events.MaintenanceJobFinished",
            "Name": "MaintenanceJobFinished",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Guid.NewGuid()"
              },
              {
                "Type": "System.Guid",
                "Text": "source.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "source.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "source.EndTime"
              },
              {
                "Type": "string",
                "Text": "source.Notes"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Guid",
            "Name": "NewGuid"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Models.BusinessRuleViolation",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "ErrorMessage",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Program",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "Main",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostExtensions",
            "Name": "Run"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.IWebHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions",
            "Name": "UseStartup<Startup>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Hosting.HealthCheckWebHostBuilderExtension",
            "Name": "UseHealthChecks",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/hc\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogWebHostBuilderExtensions",
            "Name": "UseSerilog"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.WebHost",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.ConcurrencyException",
    "BaseTypes": [
      "System.Exception"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "ConcurrencyException",
        "Modifiers": 2
      },
      {
        "Name": "ConcurrencyException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "ConcurrencyException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          },
          {
            "Type": "System.Exception",
            "Name": "innerException"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.DatabaseNotCreatedException",
    "BaseTypes": [
      "System.Exception"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "DatabaseNotCreatedException",
        "Modifiers": 2
      },
      {
        "Name": "DatabaseNotCreatedException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "DatabaseNotCreatedException",
        "Parameters": [
          {
            "Type": "string",
            "Name": "message"
          },
          {
            "Type": "System.Exception",
            "Name": "innerException"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "DatabaseNotCreatedException",
        "Parameters": [
          {
            "Type": "System.Runtime.Serialization.SerializationInfo",
            "Name": "info"
          },
          {
            "Type": "System.Runtime.Serialization.StreamingContext",
            "Name": "context"
          }
        ],
        "Modifiers": 8
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "GetCustomersAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>>"
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "GetVehiclesAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>>"
      },
      {
        "Name": "GetVehicleAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "EnsureDatabase"
      },
      {
        "Name": "GetWorkshopPlanningAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ]
      },
      {
        "Name": "SaveWorkshopPlanningAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningId"
          },
          {
            "Type": "int",
            "Name": "originalVersion"
          },
          {
            "Type": "int",
            "Name": "newVersion"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "newEvents"
          }
        ]
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.Model.Aggregate",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "CurrentVersion",
        "Type": "int",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.Model.AggregateEvent",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Version",
        "Type": "int",
        "Modifiers": 2
      },
      {
        "Name": "Timestamp",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "MessageType",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "EventData",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.Model.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository",
      "Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_connectionString",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SqlServerRefDataRepository",
        "Parameters": [
          {
            "Type": "string",
            "Name": "connectionString"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_connectionString",
            "Operator": "=",
            "Right": "connectionString"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetCustomersAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
            "Name": "List<Customer>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<Customer>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "customersSelection != null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
                    "Name": "AddRange",
                    "Arguments": [
                      {
                        "Type": "System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
                        "Text": "customersSelection"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "HandleSqlException",
            "Arguments": [
              {
                "Type": "System.Data.SqlClient.SqlException",
                "Text": "ex"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "customers"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetVehiclesAsync",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
            "Name": "List<Vehicle>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<Vehicle>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Vehicle\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "vehicleSelection != null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Collections.Generic.List<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
                    "Name": "AddRange",
                    "Arguments": [
                      {
                        "Type": "System.Collections.Generic.IEnumerable<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
                        "Text": "vehicleSelection"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "HandleSqlException",
            "Arguments": [
              {
                "Type": "System.Data.SqlClient.SqlException",
                "Text": "ex"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "vehicles"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetVehicleAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Repositories.Model.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryFirstOrDefaultAsync<Vehicle>(\"select * from Vehicle where LicenseNumber = @LicenseNumber\",\r\n                        new { LicenseNumber = licenseNumber })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryFirstOrDefaultAsync<Vehicle>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Vehicle where LicenseNumber = @LicenseNumber\""
              },
              {
                "Type": "<anonymous type: string LicenseNumber>",
                "Text": "new { LicenseNumber = licenseNumber }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "HandleSqlException",
            "Arguments": [
              {
                "Type": "System.Data.SqlClient.SqlException",
                "Text": "ex"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "null"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetCustomerAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Repositories.Model.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await conn.QueryFirstOrDefaultAsync<Customer>(\"select * from Customer where CustomerId = @CustomerId\",\r\n                        new { CustomerId = customerId })"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryFirstOrDefaultAsync<Customer>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from Customer where CustomerId = @CustomerId\""
              },
              {
                "Type": "<anonymous type: string CustomerId>",
                "Text": "new { CustomerId = customerId }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "HandleSqlException",
            "Arguments": [
              {
                "Type": "System.Data.SqlClient.SqlException",
                "Text": "ex"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "null"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "HandleSqlException",
        "Parameters": [
          {
            "Type": "System.Data.SqlClient.SqlException",
            "Name": "ex"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.Errors.Count > 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                    "Sections": [
                      {
                        "Condition": "ex.Errors[i].Number == 4060",
                        "Statements": [
                          {
                            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.DatabaseNotCreatedException",
                            "Name": "DatabaseNotCreatedException",
                            "Arguments": [
                              {
                                "Type": "string",
                                "Text": "\"WorkshopManagement database not found. This database is automatically created by the WorkshopManagementEventHandler. Run this service first.\""
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Runtime.ExceptionServices.ExceptionDispatchInfo",
            "Name": "Throw"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Runtime.ExceptionServices.ExceptionDispatchInfo",
            "Name": "Capture",
            "Arguments": [
              {
                "Type": "System.Data.SqlClient.SqlException",
                "Text": "ex"
              }
            ]
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerWorkshopPlanningRepository",
    "BaseTypes": [
      "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_serializerSettings",
        "Type": "Newtonsoft.Json.JsonSerializerSettings",
        "Modifiers": 148
      },
      {
        "Name": "_store",
        "Type": "System.Collections.Generic.Dictionary<System.DateTime, string>",
        "Initializer": "new Dictionary<DateTime, string>()",
        "Modifiers": 148
      },
      {
        "Name": "_connectionString",
        "Type": "string"
      }
    ],
    "Constructors": [
      {
        "Name": "SqlServerWorkshopPlanningRepository",
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_serializerSettings",
            "Operator": "=",
            "Right": "new JsonSerializerSettings()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonSerializerSettings",
            "Name": "JsonSerializerSettings"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_serializerSettings.Formatting",
            "Operator": "=",
            "Right": "Formatting.Indented"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.ICollection<Newtonsoft.Json.JsonConverter>",
            "Name": "Add",
            "Arguments": [
              {
                "Type": "Newtonsoft.Json.Converters.StringEnumConverter",
                "Text": "new StringEnumConverter \r\n            { \r\n                NamingStrategy = new CamelCaseNamingStrategy() \r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Converters.StringEnumConverter",
            "Name": "StringEnumConverter",
            "Arguments": [
              {
                "Type": "Newtonsoft.Json.Serialization.NamingStrategy",
                "Text": "NamingStrategy = new CamelCaseNamingStrategy()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "NamingStrategy",
            "Operator": "=",
            "Right": "new CamelCaseNamingStrategy()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Serialization.CamelCaseNamingStrategy",
            "Name": "CamelCaseNamingStrategy"
          }
        ],
        "Modifiers": 20
      },
      {
        "Name": "SqlServerWorkshopPlanningRepository",
        "Parameters": [
          {
            "Type": "string",
            "Name": "connectionString"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_connectionString",
            "Operator": "=",
            "Right": "connectionString"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetWorkshopPlanningAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "date"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "() => conn.OpenAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncRetrySyntax",
            "Name": "WaitAndRetryAsync",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(5)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => \r\n                        { Console.WriteLine(\"Error connecting to DB. Retrying in 5 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 5 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.Common.DbConnection",
            "Name": "OpenAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QuerySingleOrDefaultAsync<Aggregate>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from WorkshopPlanning where Id = @Id\""
              },
              {
                "Type": "<anonymous type: string Id>",
                "Text": "new { Id = date.ToString(\"yyyy-MM-dd\") }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "aggregate == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<AggregateEvent>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from WorkshopPlanningEvent where Id = @Id order by [Version];\""
              },
              {
                "Type": "<anonymous type: string Id>",
                "Text": "new { Id = date.ToString(\"yyyy-MM-dd\") }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.DateTime",
            "Name": "ToString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"yyyy-MM-dd\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "List<Event>"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "aggregateEvent in aggregateEvents",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
                "Name": "Add",
                "Arguments": [
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "DeserializeEventData(aggregateEvent.MessageType, aggregateEvent.EventData)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerWorkshopPlanningRepository",
                "Name": "DeserializeEventData",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "aggregateEvent.MessageType"
                  },
                  {
                    "Type": "string",
                    "Text": "aggregateEvent.EventData"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "planning",
            "Operator": "=",
            "Right": "new WorkshopPlanning(date, events)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "WorkshopPlanning",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "date"
              },
              {
                "Type": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
                "Text": "events"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "planning"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "SaveWorkshopPlanningAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningId"
          },
          {
            "Type": "int",
            "Name": "originalVersion"
          },
          {
            "Type": "int",
            "Name": "newVersion"
          },
          {
            "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "newEvents"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncPolicy",
            "Name": "ExecuteAsync",
            "Arguments": [
              {
                "Type": "System.Func<System.Threading.Tasks.Task>",
                "Text": "() => conn.OpenAsync()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.AsyncRetrySyntax",
            "Name": "WaitAndRetryAsync",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(5)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => \r\n                        { Console.WriteLine(\"Error connecting to DB. Retrying in 5 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 5 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.Common.DbConnection",
            "Name": "OpenAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "BeginTransaction"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QuerySingleOrDefaultAsync<Aggregate>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from WorkshopPlanning where Id = @Id\""
              },
              {
                "Type": "<anonymous type: string Id>",
                "Text": "new { Id = planningId }"
              },
              {
                "Type": "System.Data.SqlClient.SqlTransaction",
                "Text": "transaction"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "aggregate != null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "affectedRows",
                    "Operator": "=",
                    "Right": "await conn.ExecuteAsync(\r\n                            @\"update WorkshopPlanning\r\n                              set [CurrentVersion] = @NewVersion\r\n                              where [Id] = @Id\r\n                              and [CurrentVersion] = @CurrentVersion;\",\r\n                            new { \r\n                                Id = planningId, \r\n                                NewVersion = newVersion,\r\n                                CurrentVersion = originalVersion\r\n                            },\r\n                            transaction)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Dapper.SqlMapper",
                    "Name": "ExecuteAsync",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "@\"update WorkshopPlanning\r\n                              set [CurrentVersion] = @NewVersion\r\n                              where [Id] = @Id\r\n                              and [CurrentVersion] = @CurrentVersion;\""
                      },
                      {
                        "Type": "<anonymous type: string Id, int NewVersion, int CurrentVersion>",
                        "Text": "new { \r\n                                Id = planningId, \r\n                                NewVersion = newVersion,\r\n                                CurrentVersion = originalVersion\r\n                            }"
                      },
                      {
                        "Type": "System.Data.SqlClient.SqlTransaction",
                        "Text": "transaction"
                      }
                    ]
                  }
                ]
              },
              {
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "affectedRows",
                    "Operator": "=",
                    "Right": "await conn.ExecuteAsync(\r\n                            \"insert WorkshopPlanning ([Id], [CurrentVersion]) values (@Id, @CurrentVersion)\",\r\n                            new { Id = planningId, CurrentVersion = newVersion },\r\n                            transaction)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Dapper.SqlMapper",
                    "Name": "ExecuteAsync",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "\"insert WorkshopPlanning ([Id], [CurrentVersion]) values (@Id, @CurrentVersion)\""
                      },
                      {
                        "Type": "<anonymous type: string Id, int CurrentVersion>",
                        "Text": "new { Id = planningId, CurrentVersion = newVersion }"
                      },
                      {
                        "Type": "System.Data.SqlClient.SqlTransaction",
                        "Text": "transaction"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "affectedRows == 0",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "System.Data.SqlClient.SqlTransaction",
                    "Name": "Rollback"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.ConcurrencyException",
                    "Name": "ConcurrencyException"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "e in newEvents",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Dapper.SqlMapper",
                "Name": "ExecuteAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "@\"insert WorkshopPlanningEvent ([Id], [Version], [Timestamp], [MessageType], [EventData])\r\n                              values (@Id, @NewVersion, @Timestamp, @MessageType,@EventData);\""
                  },
                  {
                    "Type": "<anonymous type: string Id, int NewVersion, System.DateTime Timestamp, string MessageType, string EventData>",
                    "Text": "new { \r\n                                Id = planningId, \r\n                                NewVersion = eventVersion,\r\n                                Timestamp = DateTime.Now,\r\n                                MessageType = e.MessageType,\r\n                                EventData = SerializeEventData(e) \r\n                            }"
                  },
                  {
                    "Type": "System.Data.SqlClient.SqlTransaction",
                    "Text": "transaction"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerWorkshopPlanningRepository",
                "Name": "SerializeEventData",
                "Arguments": [
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "e"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlTransaction",
            "Name": "Commit"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "EnsureDatabase",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "SqlConnection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "_connectionString.Replace(\"WorkshopManagementEventStore\", \"master\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "string",
            "Name": "Replace",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementEventStore\""
              },
              {
                "Type": "string",
                "Text": "\"master\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Ensure database exists\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => conn.Open()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(5)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => \r\n                        { Console.WriteLine(\"Error connecting to DB. Retrying in 5 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "5"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 5 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "Open"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Data.SqlClient.SqlConnection",
            "Name": "ChangeDatabase",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementEventStore\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "sql",
            "Operator": "=",
            "Right": "@\" \r\n                    if OBJECT_ID('WorkshopPlanning') IS NULL \r\n                    CREATE TABLE WorkshopPlanning (\r\n                        [Id] varchar(50) NOT NULL,\r\n                        [CurrentVersion] int NOT NULL,\r\n                    PRIMARY KEY([Id]));\r\n                   \r\n                    if OBJECT_ID('WorkshopPlanningEvent') IS NULL\r\n                    CREATE TABLE WorkshopPlanningEvent (\r\n                        [Id] varchar(50) NOT NULL REFERENCES WorkshopPlanning([Id]),\r\n                        [Version] int NOT NULL,\r\n                        [Timestamp] datetime2(7) NOT NULL,\r\n                        [MessageType] varchar(75) NOT NULL,\r\n                        [EventData] text,\r\n                    PRIMARY KEY([Id], [Version]));\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sql"
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "GetAggregateEvents",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningId"
          },
          {
            "Type": "System.Data.SqlClient.SqlConnection",
            "Name": "conn"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Dapper.SqlMapper",
            "Name": "QueryAsync<AggregateEvent>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"select * from WorkshopPlanningEvent where Id = @Id order by [Version]\""
              },
              {
                "Type": "<anonymous type: string Id>",
                "Text": "new { Id = planningId }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
            "Name": "List<Event>"
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "aggregateEvent in aggregateEvents",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "System.Collections.Generic.List<Pitstop.Infrastructure.Messaging.Event>",
                "Name": "Add",
                "Arguments": [
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "DeserializeEventData(aggregateEvent.MessageType, aggregateEvent.EventData)"
                  }
                ]
              },
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerWorkshopPlanningRepository",
                "Name": "DeserializeEventData",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "aggregateEvent.MessageType"
                  },
                  {
                    "Type": "string",
                    "Text": "aggregateEvent.EventData"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "events"
          }
        ],
        "Modifiers": 260,
        "DocumentationComments": {
          "Summary": "Get events for a certain aggregate.",
          "Params": {
            "planningId": "The id of the planning.",
            "conn": "The SQL connection to use."
          }
        }
      },
      {
        "Name": "SerializeEventData",
        "ReturnType": "string",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.Event",
            "Name": "eventData"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "JsonConvert.SerializeObject(eventData, _serializerSettings)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonConvert",
            "Name": "SerializeObject",
            "Arguments": [
              {
                "Type": "Pitstop.Infrastructure.Messaging.Event",
                "Text": "eventData"
              },
              {
                "Type": "Newtonsoft.Json.JsonSerializerSettings",
                "Text": "_serializerSettings"
              }
            ]
          }
        ],
        "DocumentationComments": {
          "Summary": "Serialize event-data to JSON.",
          "Params": {
            "eventData": "The event-data to serialize."
          }
        }
      },
      {
        "Name": "DeserializeEventData",
        "ReturnType": "Pitstop.Infrastructure.Messaging.Event",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "eventData"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Type",
            "Name": "GetType",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Pitstop.WorkshopManagementAPI.Events.{messageType}\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.JsonConvert",
            "Name": "DeserializeObject<JObject>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "eventData"
              },
              {
                "Type": "Newtonsoft.Json.JsonSerializerSettings",
                "Text": "_serializerSettings"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "obj.ToObject(eventType) as Event"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Linq.JToken",
            "Name": "ToObject",
            "Arguments": [
              {
                "Type": "System.Type",
                "Text": "eventType"
              }
            ]
          }
        ],
        "DocumentationComments": {
          "Summary": "Deserialize event-data from JSON.",
          "Params": {
            "messageType": "The message-type of the event.",
            "eventData": "The event-data JSON to deserialize."
          }
        }
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementAPI.Startup",
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_configuration",
        "Type": "Microsoft.Extensions.Configuration.IConfiguration"
      }
    ],
    "Constructors": [
      {
        "Name": "Startup",
        "Parameters": [
          {
            "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
            "Name": "env"
          },
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "configuration"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_configuration",
            "Operator": "=",
            "Right": "configuration"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "ConfigureServices",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
            "Name": "services"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EventStoreCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IWorkshopPlanningRepository>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository>",
                "Text": "(sp) => \r\n                new SqlServerWorkshopPlanningRepository(eventStoreConnectionString)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerWorkshopPlanningRepository",
            "Name": "SqlServerWorkshopPlanningRepository",
            "Arguments": [
              {
                "Type": "string",
                "Text": "eventStoreConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IVehicleRepository>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.WorkshopManagementAPI.Repositories.IVehicleRepository>",
                "Text": "(sp) => new SqlServerRefDataRepository(workshopManagementConnectionString)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "SqlServerRefDataRepository",
            "Arguments": [
              {
                "Type": "string",
                "Text": "workshopManagementConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<ICustomerRepository>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.WorkshopManagementAPI.Repositories.ICustomerRepository>",
                "Text": "(sp) => new SqlServerRefDataRepository(workshopManagementConnectionString)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.SqlServerRefDataRepository",
            "Name": "SqlServerRefDataRepository",
            "Arguments": [
              {
                "Type": "string",
                "Text": "workshopManagementConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessagePublisher>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessagePublisher>",
                "Text": "(sp) => new RabbitMQMessagePublisher(host, userName, password, \"Pitstop\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessagePublisher",
            "Name": "RabbitMQMessagePublisher",
            "Arguments": [
              {
                "Type": "string",
                "Text": "host"
              },
              {
                "Type": "string",
                "Text": "userName"
              },
              {
                "Type": "string",
                "Text": "password"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WorkshopManagementAPI.CommandHandlers.CommandHandlersDIRegistration",
            "Name": "AddCommandHandlers"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions",
            "Name": "AddNewtonsoftJson"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
            "Name": "AddMvc",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>",
                "Text": "(options) => options.EnableEndpointRouting = false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "options.EnableEndpointRouting",
            "Operator": "=",
            "Right": "false"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenServiceCollectionExtensions",
            "Name": "AddSwaggerGen",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerDoc(\"v1\", new OpenApiInfo  { Title = \"WorkshopManagement API\", Version = \"v1\" });\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions",
            "Name": "SwaggerDoc",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"v1\""
              },
              {
                "Type": "Microsoft.OpenApi.Models.OpenApiInfo",
                "Text": "new OpenApiInfo  { Title = \"WorkshopManagement API\", Version = \"v1\" }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.OpenApi.Models.OpenApiInfo",
            "Name": "OpenApiInfo",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Title = \"WorkshopManagement API\""
              },
              {
                "Type": "string",
                "Text": "Version = \"v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Title",
            "Operator": "=",
            "Right": "\"WorkshopManagement API\""
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Version",
            "Operator": "=",
            "Right": "\"v1\""
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions",
            "Name": "AddHealthChecks",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.HealthChecks.HealthCheckBuilder>",
                "Text": "checks =>\r\n            {\r\n                checks.WithDefaultCacheDuration(TimeSpan.FromSeconds(1));\r\n                checks.AddSqlCheck(\"EventStoreCN\", _configuration.GetConnectionString(\"EventStoreCN\"));\r\n                checks.AddSqlCheck(\"WorkshopManagementCN\", _configuration.GetConnectionString(\"WorkshopManagementCN\"));\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilder",
            "Name": "WithDefaultCacheDuration",
            "Arguments": [
              {
                "Type": "System.TimeSpan",
                "Text": "TimeSpan.FromSeconds(1)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "1"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilderSqlServerExtensions",
            "Name": "AddSqlCheck",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EventStoreCN\""
              },
              {
                "Type": "string",
                "Text": "_configuration.GetConnectionString(\"EventStoreCN\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EventStoreCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.HealthChecks.HealthCheckBuilderSqlServerExtensions",
            "Name": "AddSqlCheck",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementCN\""
              },
              {
                "Type": "string",
                "Text": "_configuration.GetConnectionString(\"WorkshopManagementCN\")"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementCN\""
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Configure",
        "Parameters": [
          {
            "Type": "Microsoft.AspNetCore.Builder.IApplicationBuilder",
            "Name": "app"
          },
          {
            "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
            "Name": "env"
          },
          {
            "Type": "Microsoft.Extensions.Hosting.IHostApplicationLifetime",
            "Name": "lifetime"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "workshopPlanningRepo"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Log.Logger",
            "Operator": "=",
            "Right": "new LoggerConfiguration()\r\n                .ReadFrom.Configuration(_configuration)\r\n                .Enrich.WithMachineName()\r\n                .CreateLogger()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "CreateLogger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.EnvironmentLoggerConfigurationExtensions",
            "Name": "WithMachineName"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "_configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.LoggerConfiguration",
            "Name": "LoggerConfiguration"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions",
            "Name": "UseMvc"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.DefaultFilesExtensions",
            "Name": "UseDefaultFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.StaticFileExtensions",
            "Name": "UseStaticFiles"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerBuilderExtensions",
            "Name": "UseSwagger"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions",
            "Name": "UseSwaggerUI",
            "Arguments": [
              {
                "Type": "System.Action<Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions>",
                "Text": "c =>\r\n            {\r\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"WorkshopManagement API - v1\");\r\n            }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions",
            "Name": "SwaggerEndpoint",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"/swagger/v1/swagger.json\""
              },
              {
                "Type": "string",
                "Text": "\"WorkshopManagement API - v1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "EnsureDatabase"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Customer",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.DataAccess.DBInitializer",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "Initialize",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext",
            "Name": "context"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => context.Database.Migrate()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions",
            "Name": "Migrate"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.DbContext"
    ],
    "Modifiers": 2,
    "Constructors": [
      {
        "Name": "WorkshopManagementDBContext",
        "Modifiers": 2
      },
      {
        "Name": "WorkshopManagementDBContext",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.DbContextOptions<Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext>",
            "Name": "options"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Properties": [
      {
        "Name": "Vehicles",
        "Type": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Model.Vehicle>",
        "Modifiers": 2
      },
      {
        "Name": "Customers",
        "Type": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Customer>",
        "Modifiers": 2
      },
      {
        "Name": "MaintenanceJobs",
        "Type": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob>",
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "OnModelCreating",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "builder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Pitstop.WorkshopManagementEventHandler.Model.Vehicle>",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Model.Vehicle, object>>",
                "Text": "entity => entity.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Vehicle>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Vehicle>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Pitstop.WorkshopManagementEventHandler.Customer>",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Customer, object>>",
                "Text": "entity => entity.CustomerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Customer>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<Customer>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob>",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob, object>>",
                "Text": "entity => entity.Id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<MaintenanceJob>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity<MaintenanceJob>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "OnModelCreating",
            "Arguments": [
              {
                "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
                "Text": "builder"
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.EventHandler",
    "BaseTypes": [
      "Microsoft.Extensions.Hosting.IHostedService",
      "Pitstop.Infrastructure.Messaging.IMessageHandlerCallback"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_dbContext",
        "Type": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext"
      },
      {
        "Name": "_messageHandler",
        "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler"
      }
    ],
    "Constructors": [
      {
        "Name": "EventHandler",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "messageHandler"
          },
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext",
            "Name": "dbContext"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messageHandler",
            "Operator": "=",
            "Right": "messageHandler"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_dbContext",
            "Operator": "=",
            "Right": "dbContext"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "Start",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Start",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                "Text": "this"
              }
            ]
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "Stop",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Stop"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StartAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Start",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                "Text": "this"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "StopAsync",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "System.Threading.CancellationToken",
            "Name": "cancellationToken"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.IMessageHandler",
            "Name": "Stop"
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "Task.CompletedTask"
          }
        ],
        "Modifiers": 2
      },
      {
        "Name": "HandleMessageAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "messageType"
          },
          {
            "Type": "string",
            "Name": "message"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.MessageSerializer",
            "Name": "Deserialize",
            "Arguments": [
              {
                "Type": "string",
                "Text": "message"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.Switch, LivingDocumentation.Statements",
            "Sections": [
              {
                "Labels": [
                  "\"CustomerRegistered\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.WorkshopManagementEventHandler.Events.CustomerRegistered",
                        "Text": "messageObject.ToObject<CustomerRegistered>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<CustomerRegistered>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"VehicleRegistered\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.WorkshopManagementEventHandler.Events.VehicleRegistered",
                        "Text": "messageObject.ToObject<VehicleRegistered>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<VehicleRegistered>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobPlanned\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobPlanned",
                        "Text": "messageObject.ToObject<MaintenanceJobPlanned>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobPlanned>"
                  }
                ]
              },
              {
                "Labels": [
                  "\"MaintenanceJobFinished\""
                ],
                "Statements": [
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.EventHandler",
                    "Name": "HandleAsync",
                    "Arguments": [
                      {
                        "Type": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobFinished",
                        "Text": "messageObject.ToObject<MaintenanceJobFinished>()"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Newtonsoft.Json.Linq.JToken",
                    "Name": "ToObject<MaintenanceJobFinished>"
                  }
                ]
              }
            ],
            "Expression": "messageType"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Linq.JObject",
            "Name": "Property",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MessageId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Linq.Extensions",
            "Name": "Value<string>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Newtonsoft.Json.Linq.JObject",
            "Name": "Property",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MessageId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "System.Exception",
                "Text": "ex"
              },
              {
                "Type": "string",
                "Text": "\"Error while handling {MessageType} message with id {MessageId}.\""
              },
              {
                "Type": "string",
                "Text": "messageType"
              },
              {
                "Type": "string",
                "Text": "messageId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.Events.VehicleRegistered",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register Vehicle: {LicenseNumber}, {Brand}, {Type}, Owner Id: {OwnerId}\""
              },
              {
                "Type": "string",
                "Text": "e.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "e.Brand"
              },
              {
                "Type": "string",
                "Text": "e.Type"
              },
              {
                "Type": "string",
                "Text": "e.OwnerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Model.Vehicle>",
            "Name": "AddAsync",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
                "Text": "new Vehicle\r\n                {\r\n                    LicenseNumber = e.LicenseNumber,\r\n                    Brand = e.Brand,\r\n                    Type = e.Type,\r\n                    OwnerId = e.OwnerId\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
            "Name": "Vehicle",
            "Arguments": [
              {
                "Type": "string",
                "Text": "LicenseNumber = e.LicenseNumber"
              },
              {
                "Type": "string",
                "Text": "Brand = e.Brand"
              },
              {
                "Type": "string",
                "Text": "Type = e.Type"
              },
              {
                "Type": "string",
                "Text": "OwnerId = e.OwnerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "e.LicenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "e.Brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "e.Type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "e.OwnerId"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "SaveChangesAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Console",
            "Name": "WriteLine",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"Skipped adding vehicle with license number {e.LicenseNumber}.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.Events.CustomerRegistered",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register Customer: {CustomerId}, {Name}, {TelephoneNumber}\""
              },
              {
                "Type": "string",
                "Text": "e.CustomerId"
              },
              {
                "Type": "string",
                "Text": "e.Name"
              },
              {
                "Type": "string",
                "Text": "e.TelephoneNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Customer>",
            "Name": "AddAsync",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.Customer",
                "Text": "new Customer\r\n                {\r\n                    CustomerId = e.CustomerId,\r\n                    Name = e.Name,\r\n                    TelephoneNumber = e.TelephoneNumber\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.Customer",
            "Name": "Customer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "CustomerId = e.CustomerId"
              },
              {
                "Type": "string",
                "Text": "Name = e.Name"
              },
              {
                "Type": "string",
                "Text": "TelephoneNumber = e.TelephoneNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "e.CustomerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "e.Name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "e.TelephoneNumber"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "SaveChangesAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Warning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Skipped adding customer with customer id {CustomerId}.\""
              },
              {
                "Type": "string",
                "Text": "e.CustomerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobPlanned",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Register Maintenance Job: {JobId}, {StartTime}, {EndTime}, {CustomerName}, {LicenseNumber}\""
              },
              {
                "Type": "System.Guid",
                "Text": "e.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.EndTime"
              },
              {
                "Type": "string",
                "Text": "e.CustomerInfo.Name"
              },
              {
                "Type": "string",
                "Text": "e.VehicleInfo.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "FirstOrDefaultAsync",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Customer, bool>>",
                "Text": "c => c.CustomerId == e.CustomerInfo.Id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "customer == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "customer",
                    "Operator": "=",
                    "Right": "new Customer\r\n                    {\r\n                        CustomerId = e.CustomerInfo.Id,\r\n                        Name = e.CustomerInfo.Name,\r\n                        TelephoneNumber = e.CustomerInfo.TelephoneNumber\r\n                    }"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.Customer",
                    "Name": "Customer",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "CustomerId = e.CustomerInfo.Id"
                      },
                      {
                        "Type": "string",
                        "Text": "Name = e.CustomerInfo.Name"
                      },
                      {
                        "Type": "string",
                        "Text": "TelephoneNumber = e.CustomerInfo.TelephoneNumber"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "CustomerId",
                    "Operator": "=",
                    "Right": "e.CustomerInfo.Id"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Name",
                    "Operator": "=",
                    "Right": "e.CustomerInfo.Name"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "TelephoneNumber",
                    "Operator": "=",
                    "Right": "e.CustomerInfo.TelephoneNumber"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "FirstOrDefaultAsync",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Model.Vehicle, bool>>",
                "Text": "v => v.LicenseNumber == e.VehicleInfo.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "vehicle == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "vehicle",
                    "Operator": "=",
                    "Right": "new Vehicle\r\n                    {\r\n                        LicenseNumber = e.VehicleInfo.LicenseNumber,\r\n                        Brand = e.VehicleInfo.Brand,\r\n                        Type = e.VehicleInfo.Type,\r\n                        OwnerId = customer.CustomerId\r\n                    }"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
                    "Name": "Vehicle",
                    "Arguments": [
                      {
                        "Type": "string",
                        "Text": "LicenseNumber = e.VehicleInfo.LicenseNumber"
                      },
                      {
                        "Type": "string",
                        "Text": "Brand = e.VehicleInfo.Brand"
                      },
                      {
                        "Type": "string",
                        "Text": "Type = e.VehicleInfo.Type"
                      },
                      {
                        "Type": "string",
                        "Text": "OwnerId = customer.CustomerId"
                      }
                    ]
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "LicenseNumber",
                    "Operator": "=",
                    "Right": "e.VehicleInfo.LicenseNumber"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Brand",
                    "Operator": "=",
                    "Right": "e.VehicleInfo.Brand"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "Type",
                    "Operator": "=",
                    "Right": "e.VehicleInfo.Type"
                  },
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "OwnerId",
                    "Operator": "=",
                    "Right": "customer.CustomerId"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbSet<Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob>",
            "Name": "AddAsync",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob",
                "Text": "new MaintenanceJob\r\n                {\r\n                    Id = e.JobId,\r\n                    StartTime = e.StartTime,\r\n                    EndTime = e.EndTime,\r\n                    Customer = customer,\r\n                    Vehicle = vehicle,       \r\n                    WorkshopPlanningDate = e.StartTime.Date,\r\n                    Description = e.Description\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob",
            "Name": "MaintenanceJob",
            "Arguments": [
              {
                "Type": "System.Guid",
                "Text": "Id = e.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "StartTime = e.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "EndTime = e.EndTime"
              },
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.Customer",
                "Text": "Customer = customer"
              },
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
                "Text": "Vehicle = vehicle"
              },
              {
                "Type": "System.DateTime",
                "Text": "WorkshopPlanningDate = e.StartTime.Date"
              },
              {
                "Type": "string",
                "Text": "Description = e.Description"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Id",
            "Operator": "=",
            "Right": "e.JobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "e.StartTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "e.EndTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Customer",
            "Operator": "=",
            "Right": "customer"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Vehicle",
            "Operator": "=",
            "Right": "vehicle"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "WorkshopPlanningDate",
            "Operator": "=",
            "Right": "e.StartTime.Date"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "e.Description"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "SaveChangesAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Warning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Skipped adding maintenance job with id {JobId}.\""
              },
              {
                "Type": "System.Guid",
                "Text": "e.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 260
      },
      {
        "Name": "HandleAsync",
        "ReturnType": "System.Threading.Tasks.Task<bool>",
        "Parameters": [
          {
            "Type": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobFinished",
            "Name": "e"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Information",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Finish Maintenance job: {JobId}, {ActualStartTime}, {EndTime}\""
              },
              {
                "Type": "System.Guid",
                "Text": "e.JobId"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.StartTime"
              },
              {
                "Type": "System.DateTime",
                "Text": "e.EndTime"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions",
            "Name": "FirstOrDefaultAsync",
            "Arguments": [
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob, bool>>",
                "Text": "j => j.Id == e.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "job.ActualStartTime",
            "Operator": "=",
            "Right": "e.StartTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "job.ActualEndTime",
            "Operator": "=",
            "Right": "e.EndTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "job.Notes",
            "Operator": "=",
            "Right": "e.Notes"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContext",
            "Name": "SaveChangesAsync"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Warning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Skipped adding maintenance job with id {JobId}.\""
              },
              {
                "Type": "System.Guid",
                "Text": "e.JobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "true"
          }
        ],
        "Modifiers": 260
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Events.CustomerRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobFinished",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobFinished",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "string",
            "Name": "notes"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Notes",
            "Operator": "=",
            "Right": "notes"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Events.MaintenanceJobPlanned",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "MaintenanceJobPlanned",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Events.VehicleRegistered",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Event"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "VehicleRegistered",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "licenseNumber"
          },
          {
            "Type": "string",
            "Name": "brand"
          },
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "ownerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "licenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "ownerId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Migrations.v1",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Migrations.Migration"
    ],
    "Modifiers": 2,
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(WorkshopManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(WorkshopManagementDBContext)"
          }
        ]
      },
      {
        "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute",
        "Name": "Migration",
        "Arguments": [
          {
            "Name": "\"20170525045944_v1\"",
            "Type": "string",
            "Value": "20170525045944_v1"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "Up",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              },
              {
                "Type": "System.Func<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder, <anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>",
                "Text": "table => new\r\n                {\r\n                    CustomerId = table.Column<string>(nullable: false),\r\n                    Name = table.Column<string>(nullable: true),\r\n                    TelephoneNumber = table.Column<string>(nullable: true)\r\n                }"
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>>",
                "Text": "table =>\r\n                {\r\n                    table.PrimaryKey(\"PK_Customer\", x => x.CustomerId);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>>",
            "Name": "PrimaryKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PK_Customer\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Name, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> TelephoneNumber>, object>>",
                "Text": "x => x.CustomerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              },
              {
                "Type": "System.Func<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder, <anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>",
                "Text": "table => new\r\n                {\r\n                    LicenseNumber = table.Column<string>(nullable: false),\r\n                    Brand = table.Column<string>(nullable: true),\r\n                    OwnerId = table.Column<string>(nullable: true),\r\n                    Type = table.Column<string>(nullable: true)\r\n                }"
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>>",
                "Text": "table =>\r\n                {\r\n                    table.PrimaryKey(\"PK_Vehicle\", x => x.LicenseNumber);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>>",
            "Name": "PrimaryKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PK_Vehicle\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> LicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Brand, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> OwnerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Type>, object>>",
                "Text": "x => x.LicenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              },
              {
                "Type": "System.Func<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder, <anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>>",
                "Text": "table => new\r\n                {\r\n                    Id = table.Column<Guid>(nullable: false),\r\n                    ActualEndTime = table.Column<DateTime>(nullable: true),\r\n                    ActualStartTime = table.Column<DateTime>(nullable: true),\r\n                    CustomerId = table.Column<string>(nullable: true),\r\n                    Description = table.Column<string>(nullable: true),\r\n                    EndTime = table.Column<DateTime>(nullable: false),\r\n                    Notes = table.Column<string>(nullable: true),\r\n                    StartTime = table.Column<DateTime>(nullable: false),\r\n                    VehicleLicenseNumber = table.Column<string>(nullable: true),\r\n                    WorkshopPlanningDate = table.Column<DateTime>(nullable: false)\r\n                }"
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>>>",
                "Text": "table =>\r\n                {\r\n                    table.PrimaryKey(\"PK_MaintenanceJob\", x => x.Id);\r\n                    table.ForeignKey(\r\n                        name: \"FK_MaintenanceJob_Customer_CustomerId\",\r\n                        column: x => x.CustomerId,\r\n                        principalTable: \"Customer\",\r\n                        principalColumn: \"CustomerId\",\r\n                        onDelete: ReferentialAction.Restrict);\r\n                    table.ForeignKey(\r\n                        name: \"FK_MaintenanceJob_Vehicle_VehicleLicenseNumber\",\r\n                        column: x => x.VehicleLicenseNumber,\r\n                        principalTable: \"Vehicle\",\r\n                        principalColumn: \"LicenseNumber\",\r\n                        onDelete: ReferentialAction.Restrict);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<Guid>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTime>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTime>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTime>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTime>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<string>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder",
            "Name": "Column<DateTime>",
            "Arguments": [
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>>",
            "Name": "PrimaryKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PK_MaintenanceJob\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>, object>>",
                "Text": "x => x.Id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>>",
            "Name": "ForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"FK_MaintenanceJob_Customer_CustomerId\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>, object>>",
                "Text": "x => x.CustomerId"
              },
              {
                "Type": "string",
                "Text": "\"Customer\""
              },
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              },
              {
                "Type": "Microsoft.EntityFrameworkCore.Migrations.ReferentialAction",
                "Text": "ReferentialAction.Restrict"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>>",
            "Name": "ForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"FK_MaintenanceJob_Vehicle_VehicleLicenseNumber\""
              },
              {
                "Type": "System.Linq.Expressions.Expression<System.Func<<anonymous type: Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Id, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualEndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> ActualStartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> CustomerId, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Description, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> EndTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> Notes, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> StartTime, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> VehicleLicenseNumber, Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder<Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation> WorkshopPlanningDate>, object>>",
                "Text": "x => x.VehicleLicenseNumber"
              },
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              },
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              },
              {
                "Type": "Microsoft.EntityFrameworkCore.Migrations.ReferentialAction",
                "Text": "ReferentialAction.Restrict"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"IX_MaintenanceJob_CustomerId\""
              },
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              },
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "CreateIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"IX_MaintenanceJob_VehicleLicenseNumber\""
              },
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              },
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "Down",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "migrationBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder",
            "Name": "DropTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      },
      {
        "Name": "BuildTargetModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Customer\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"CustomerId\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Name\");\r\n\r\n                    b.Property<string>(\"TelephoneNumber\");\r\n\r\n                    b.HasKey(\"CustomerId\");\r\n\r\n                    b.ToTable(\"Customer\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Name\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"TelephoneNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<Guid>(\"Id\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<DateTime?>(\"ActualEndTime\");\r\n\r\n                    b.Property<DateTime?>(\"ActualStartTime\");\r\n\r\n                    b.Property<string>(\"CustomerId\");\r\n\r\n                    b.Property<string>(\"Description\");\r\n\r\n                    b.Property<DateTime>(\"EndTime\");\r\n\r\n                    b.Property<string>(\"Notes\");\r\n\r\n                    b.Property<DateTime>(\"StartTime\");\r\n\r\n                    b.Property<string>(\"VehicleLicenseNumber\");\r\n\r\n                    b.Property<DateTime>(\"WorkshopPlanningDate\");\r\n\r\n                    b.HasKey(\"Id\");\r\n\r\n                    b.HasIndex(\"CustomerId\");\r\n\r\n                    b.HasIndex(\"VehicleLicenseNumber\");\r\n\r\n                    b.ToTable(\"MaintenanceJob\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<System.Guid>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<Guid>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Id\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime?>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ActualEndTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime?>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ActualStartTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Description\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EndTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Notes\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"StartTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopPlanningDate\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Id\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"LicenseNumber\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Brand\");\r\n\r\n                    b.Property<string>(\"OwnerId\");\r\n\r\n                    b.Property<string>(\"Type\");\r\n\r\n                    b.HasKey(\"LicenseNumber\");\r\n\r\n                    b.ToTable(\"Vehicle\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Brand\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"OwnerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Type\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.HasOne(\"Pitstop.WorkshopManagementEventHandler.Customer\", \"Customer\")\r\n                        .WithMany()\r\n                        .HasForeignKey(\"CustomerId\");\r\n\r\n                    b.HasOne(\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\", \"Vehicle\")\r\n                        .WithMany()\r\n                        .HasForeignKey(\"VehicleLicenseNumber\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder",
            "Name": "HasForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder",
            "Name": "WithMany"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasOne",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Customer\""
              },
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder",
            "Name": "HasForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder",
            "Name": "WithMany"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasOne",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\""
              },
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Migrations.WorkshopManagementDBContextModelSnapshot",
    "BaseTypes": [
      "Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot"
    ],
    "Attributes": [
      {
        "Type": "Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute",
        "Name": "DbContext",
        "Arguments": [
          {
            "Name": "typeof(WorkshopManagementDBContext)",
            "Type": "System.Type",
            "Value": "typeof(WorkshopManagementDBContext)"
          }
        ]
      }
    ],
    "Methods": [
      {
        "Name": "BuildModel",
        "Parameters": [
          {
            "Type": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "modelBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "HasAnnotation",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ProductVersion\""
              },
              {
                "Type": "string",
                "Text": "\"1.1.1\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Customer\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"CustomerId\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Name\");\r\n\r\n                    b.Property<string>(\"TelephoneNumber\");\r\n\r\n                    b.HasKey(\"CustomerId\");\r\n\r\n                    b.ToTable(\"Customer\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Name\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"TelephoneNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<Guid>(\"Id\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<DateTime?>(\"ActualEndTime\");\r\n\r\n                    b.Property<DateTime?>(\"ActualStartTime\");\r\n\r\n                    b.Property<string>(\"CustomerId\");\r\n\r\n                    b.Property<string>(\"Description\");\r\n\r\n                    b.Property<DateTime>(\"EndTime\");\r\n\r\n                    b.Property<string>(\"Notes\");\r\n\r\n                    b.Property<DateTime>(\"StartTime\");\r\n\r\n                    b.Property<string>(\"VehicleLicenseNumber\");\r\n\r\n                    b.Property<DateTime>(\"WorkshopPlanningDate\");\r\n\r\n                    b.HasKey(\"Id\");\r\n\r\n                    b.HasIndex(\"CustomerId\");\r\n\r\n                    b.HasIndex(\"VehicleLicenseNumber\");\r\n\r\n                    b.ToTable(\"MaintenanceJob\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<System.Guid>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<Guid>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Id\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime?>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ActualEndTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime?>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"ActualStartTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Description\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"EndTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Notes\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"StartTime\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<DateTime>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopPlanningDate\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Id\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasIndex",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"MaintenanceJob\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.Property<string>(\"LicenseNumber\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Brand\");\r\n\r\n                    b.Property<string>(\"OwnerId\");\r\n\r\n                    b.Property<string>(\"Type\");\r\n\r\n                    b.HasKey(\"LicenseNumber\");\r\n\r\n                    b.ToTable(\"Vehicle\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<string>",
            "Name": "ValueGeneratedOnAdd"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Brand\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"OwnerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "Property<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Type\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"LicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions",
            "Name": "ToTable",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.ModelBuilder",
            "Name": "Entity",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob\""
              },
              {
                "Type": "System.Action<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>",
                "Text": "b =>\r\n                {\r\n                    b.HasOne(\"Pitstop.WorkshopManagementEventHandler.Customer\", \"Customer\")\r\n                        .WithMany()\r\n                        .HasForeignKey(\"CustomerId\");\r\n\r\n                    b.HasOne(\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\", \"Vehicle\")\r\n                        .WithMany()\r\n                        .HasForeignKey(\"VehicleLicenseNumber\");\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder",
            "Name": "HasForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerId\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder",
            "Name": "WithMany"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasOne",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Customer\""
              },
              {
                "Type": "string",
                "Text": "\"Customer\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder",
            "Name": "HasForeignKey",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleLicenseNumber\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder",
            "Name": "WithMany"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder",
            "Name": "HasOne",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Pitstop.WorkshopManagementEventHandler.Model.Vehicle\""
              },
              {
                "Type": "string",
                "Text": "\"Vehicle\""
              }
            ]
          }
        ],
        "Modifiers": 72
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Model.MaintenanceJob",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "Modifiers": 2
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 2
      },
      {
        "Name": "Vehicle",
        "Type": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
        "Modifiers": 2
      },
      {
        "Name": "Customer",
        "Type": "Pitstop.WorkshopManagementEventHandler.Customer",
        "Modifiers": 2
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "ActualStartTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "ActualEndTime",
        "Type": "System.DateTime?",
        "Modifiers": 2
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "WorkshopPlanningDate",
        "Type": "System.DateTime",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Model.Vehicle",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 2
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "Pitstop.WorkshopManagementEventHandler.Program",
    "Methods": [
      {
        "Name": "Main",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "Build"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.Program",
            "Name": "CreateHostBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
            "Name": "RunAsync"
          }
        ],
        "Modifiers": 274
      },
      {
        "Name": "CreateHostBuilder",
        "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
        "Parameters": [
          {
            "Type": "string[]",
            "Name": "args"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.HostingHostBuilderExtensions",
            "Name": "UseConsoleLifetime"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.SerilogHostBuilderExtensions",
            "Name": "UseSerilog",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>",
                "Text": "(hostContext, loggerConfiguration) =>\r\n                {\r\n                    loggerConfiguration.ReadFrom.Configuration(hostContext.Configuration);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureServices",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection>",
                "Text": "(hostContext, services) =>\r\n                {\r\n                    services.AddTransient<IMessageHandler>((svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"WorkshopManagement\", \"\"); ;\r\n                    });\r\n\r\n                    services.AddTransient<WorkshopManagementDBContext>((svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"WorkshopManagementCN\");\r\n                        var dbContextOptions = new DbContextOptionsBuilder<WorkshopManagementDBContext>()\r\n                            .UseSqlServer(sqlConnectionString)\r\n                            .Options;\r\n                        var dbContext = new WorkshopManagementDBContext(dbContextOptions);\r\n\r\n                        Policy\r\n                            .Handle<Exception>()\r\n                            .WaitAndRetry(10, r => TimeSpan.FromSeconds(10), (ex, ts) => { Log.Error(\"Error connecting to DB. Retrying in 10 sec.\"); })\r\n                            .Execute(() => DBInitializer.Initialize(dbContext));\r\n\r\n                        return dbContext;\r\n                    });\r\n\r\n                    services.AddHostedService<EventHandler>();\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureAppConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "(hostContext, config) =>\r\n                {\r\n                    config.AddJsonFile($\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\", optional: false);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
            "Name": "ConfigureHostConfiguration",
            "Arguments": [
              {
                "Type": "System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>",
                "Text": "configHost =>\r\n                {\r\n                    configHost.SetBasePath(Directory.GetCurrentDirectory());\r\n                    configHost.AddJsonFile(\"hostsettings.json\", optional: true);\r\n                    configHost.AddJsonFile($\"appsettings.json\", optional: false);\r\n                    configHost.AddEnvironmentVariables();\r\n                    configHost.AddEnvironmentVariables(\"PITSTOP_\");\r\n                    configHost.AddCommandLine(args);\r\n                }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Hosting.Host",
            "Name": "CreateDefaultBuilder",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.FileConfigurationExtensions",
            "Name": "SetBasePath",
            "Arguments": [
              {
                "Type": "string",
                "Text": "Directory.GetCurrentDirectory()"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.IO.Directory",
            "Name": "GetCurrentDirectory"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"hostsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "true"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions",
            "Name": "AddEnvironmentVariables",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PITSTOP_\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions",
            "Name": "AddCommandLine",
            "Arguments": [
              {
                "Type": "string[]",
                "Text": "args"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.JsonConfigurationExtensions",
            "Name": "AddJsonFile",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\""
              },
              {
                "Type": "bool",
                "Text": "false"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IMessageHandler>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.Infrastructure.Messaging.IMessageHandler>",
                "Text": "(svc) =>\r\n                    {\r\n                        var rabbitMQConfigSection = hostContext.Configuration.GetSection(\"RabbitMQ\");\r\n                        string rabbitMQHost = rabbitMQConfigSection[\"Host\"];\r\n                        string rabbitMQUserName = rabbitMQConfigSection[\"UserName\"];\r\n                        string rabbitMQPassword = rabbitMQConfigSection[\"Password\"];\r\n                        return new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"WorkshopManagement\", \"\"); ;\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RabbitMQ\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "new RabbitMQMessageHandler(rabbitMQHost, rabbitMQUserName, rabbitMQPassword, \"Pitstop\", \"WorkshopManagement\", \"\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.Infrastructure.Messaging.RabbitMQMessageHandler",
            "Name": "RabbitMQMessageHandler",
            "Arguments": [
              {
                "Type": "string",
                "Text": "rabbitMQHost"
              },
              {
                "Type": "string",
                "Text": "rabbitMQUserName"
              },
              {
                "Type": "string",
                "Text": "rabbitMQPassword"
              },
              {
                "Type": "string",
                "Text": "\"Pitstop\""
              },
              {
                "Type": "string",
                "Text": "\"WorkshopManagement\""
              },
              {
                "Type": "string",
                "Text": "\"\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<WorkshopManagementDBContext>",
            "Arguments": [
              {
                "Type": "System.Func<System.IServiceProvider, Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext>",
                "Text": "(svc) =>\r\n                    {\r\n                        var sqlConnectionString = hostContext.Configuration.GetConnectionString(\"WorkshopManagementCN\");\r\n                        var dbContextOptions = new DbContextOptionsBuilder<WorkshopManagementDBContext>()\r\n                            .UseSqlServer(sqlConnectionString)\r\n                            .Options;\r\n                        var dbContext = new WorkshopManagementDBContext(dbContextOptions);\r\n\r\n                        Policy\r\n                            .Handle<Exception>()\r\n                            .WaitAndRetry(10, r => TimeSpan.FromSeconds(10), (ex, ts) => { Log.Error(\"Error connecting to DB. Retrying in 10 sec.\"); })\r\n                            .Execute(() => DBInitializer.Initialize(dbContext));\r\n\r\n                        return dbContext;\r\n                    }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationExtensions",
            "Name": "GetConnectionString",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementCN\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions",
            "Name": "UseSqlServer",
            "Arguments": [
              {
                "Type": "string",
                "Text": "sqlConnectionString"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.EntityFrameworkCore.DbContextOptionsBuilder<Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext>",
            "Name": "DbContextOptionsBuilder<WorkshopManagementDBContext>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext",
            "Name": "WorkshopManagementDBContext",
            "Arguments": [
              {
                "Type": "Microsoft.EntityFrameworkCore.DbContextOptions<Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext>",
                "Text": "dbContextOptions"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Execute",
            "Arguments": [
              {
                "Type": "System.Action",
                "Text": "() => DBInitializer.Initialize(dbContext)"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.RetrySyntax",
            "Name": "WaitAndRetry",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              },
              {
                "Type": "System.Func<int, System.TimeSpan>",
                "Text": "r => TimeSpan.FromSeconds(10)"
              },
              {
                "Type": "System.Action<System.Exception, System.TimeSpan>",
                "Text": "(ex, ts) => { Log.Error(\"Error connecting to DB. Retrying in 10 sec.\"); }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Polly.Policy",
            "Name": "Handle<Exception>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.TimeSpan",
            "Name": "FromSeconds",
            "Arguments": [
              {
                "Type": "int",
                "Text": "10"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.Log",
            "Name": "Error",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"Error connecting to DB. Retrying in 10 sec.\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementEventHandler.DataAccess.DBInitializer",
            "Name": "Initialize",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementEventHandler.DataAccess.WorkshopManagementDBContext",
                "Text": "dbContext"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "dbContext"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions",
            "Name": "AddHostedService<EventHandler>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Serilog.ConfigurationLoggerConfigurationExtensions",
            "Name": "Configuration",
            "Arguments": [
              {
                "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                "Text": "hostContext.Configuration"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "hostBuilder"
          }
        ],
        "Modifiers": 20
      }
    ]
  },
  {
    "FullName": "WebApp.Commands.FinishMaintenanceJob",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "Notes",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "FinishMaintenanceJob",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "string",
            "Name": "notes"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Notes",
            "Operator": "=",
            "Right": "notes"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.Commands.PlanMaintenanceJob",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "JobId",
        "Type": "System.Guid",
        "Modifiers": 130
      },
      {
        "Name": "StartTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "EndTime",
        "Type": "System.DateTime",
        "Modifiers": 130
      },
      {
        "Name": "CustomerInfo",
        "Type": "(string Id, string Name, string TelephoneNumber)",
        "Modifiers": 130
      },
      {
        "Name": "VehicleInfo",
        "Type": "(string LicenseNumber, string Brand, string Type)",
        "Modifiers": 130
      },
      {
        "Name": "Description",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "PlanMaintenanceJob",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.Guid",
            "Name": "jobId"
          },
          {
            "Type": "System.DateTime",
            "Name": "startTime"
          },
          {
            "Type": "System.DateTime",
            "Name": "endTime"
          },
          {
            "Type": "(string Id, string Name, string TelephoneNumber)",
            "Name": "customerInfo"
          },
          {
            "Type": "(string LicenseNumber, string Brand, string Type)",
            "Name": "vehicleInfo"
          },
          {
            "Type": "string",
            "Name": "description"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "JobId",
            "Operator": "=",
            "Right": "jobId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "StartTime",
            "Operator": "=",
            "Right": "startTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EndTime",
            "Operator": "=",
            "Right": "endTime"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerInfo",
            "Operator": "=",
            "Right": "customerInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "VehicleInfo",
            "Operator": "=",
            "Right": "vehicleInfo"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Description",
            "Operator": "=",
            "Right": "description"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.Commands.RegisterCustomer",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "CustomerId",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Name",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Address",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "PostalCode",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "City",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "TelephoneNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "EmailAddress",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterCustomer",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "customerId"
          },
          {
            "Type": "string",
            "Name": "name"
          },
          {
            "Type": "string",
            "Name": "address"
          },
          {
            "Type": "string",
            "Name": "postalCode"
          },
          {
            "Type": "string",
            "Name": "city"
          },
          {
            "Type": "string",
            "Name": "telephoneNumber"
          },
          {
            "Type": "string",
            "Name": "emailAddress"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "CustomerId",
            "Operator": "=",
            "Right": "customerId"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Name",
            "Operator": "=",
            "Right": "name"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Address",
            "Operator": "=",
            "Right": "address"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PostalCode",
            "Operator": "=",
            "Right": "postalCode"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "City",
            "Operator": "=",
            "Right": "city"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "TelephoneNumber",
            "Operator": "=",
            "Right": "telephoneNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "EmailAddress",
            "Operator": "=",
            "Right": "emailAddress"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.Commands.RegisterPlanning",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "PlanningDate",
        "Type": "System.DateTime",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterPlanning",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PlanningDate",
            "Operator": "=",
            "Right": "planningDate"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.Commands.RegisterVehicle",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "LicenseNumber",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Brand",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "Type",
        "Type": "string",
        "Modifiers": 130
      },
      {
        "Name": "OwnerId",
        "Type": "string",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterVehicle",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "string",
            "Name": "licenseNumber"
          },
          {
            "Type": "string",
            "Name": "brand"
          },
          {
            "Type": "string",
            "Name": "type"
          },
          {
            "Type": "string",
            "Name": "ownerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "LicenseNumber",
            "Operator": "=",
            "Right": "licenseNumber"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Brand",
            "Operator": "=",
            "Right": "brand"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Type",
            "Operator": "=",
            "Right": "type"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "OwnerId",
            "Operator": "=",
            "Right": "ownerId"
          }
        ],
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.Models.BusinessRuleViolation",
    "Modifiers": 2,
    "Properties": [
      {
        "Name": "ErrorMessage",
        "Type": "string",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.RefitInternalGenerated.PreserveAttribute",
    "BaseTypes": [
      "System.Attribute"
    ],
    "Attributes": [
      {
        "Type": "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute",
        "Name": "global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage"
      },
      {
        "Type": "System.AttributeUsageAttribute",
        "Name": "AttributeUsage",
        "Arguments": [
          {
            "Name": "AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate",
            "Type": "System.AttributeTargets",
            "Value": "AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "AllMembers",
        "Type": "bool",
        "Modifiers": 2
      },
      {
        "Name": "Conditional",
        "Type": "bool",
        "Modifiers": 2
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.AutoGeneratedICustomerManagementAPI",
    "DocumentationComments": {},
    "BaseTypes": [
      "WebApp.RESTClients.ICustomerManagementAPI"
    ],
    "Attributes": [
      {
        "Type": "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute",
        "Name": "global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage"
      },
      {
        "Type": "System.Diagnostics.DebuggerNonUserCodeAttribute",
        "Name": "global::System.Diagnostics.DebuggerNonUserCode"
      },
      {
        "Type": "WebApp.RefitInternalGenerated.PreserveAttribute",
        "Name": "Preserve"
      },
      {
        "Type": "System.Reflection.ObfuscationAttribute",
        "Name": "global::System.Reflection.Obfuscation",
        "Arguments": [
          {
            "Name": "Exclude",
            "Type": "bool",
            "Value": "true"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "requestBuilder",
        "Type": "Refit.IRequestBuilder",
        "Modifiers": 132
      }
    ],
    "Constructors": [
      {
        "Name": "AutoGeneratedICustomerManagementAPI",
        "Parameters": [
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "client"
          },
          {
            "Type": "Refit.IRequestBuilder",
            "Name": "requestBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Client",
            "Operator": "=",
            "Right": "client"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "this.requestBuilder",
            "Operator": "=",
            "Right": "requestBuilder"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Properties": [
      {
        "Name": "Client",
        "Type": "System.Net.Http.HttpClient",
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Methods": [
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetCustomers\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] {  }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<List<Customer>>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedICustomerManagementAPI.WebApp.RESTClients.ICustomerManagementAPI.GetCustomers()",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetCustomerById\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<Customer>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedICustomerManagementAPI.WebApp.RESTClients.ICustomerManagementAPI.GetCustomerById(string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "RegisterCustomer",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterCustomer",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RegisterCustomer\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(RegisterCustomer) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedICustomerManagementAPI.WebApp.RESTClients.ICustomerManagementAPI.RegisterCustomer(WebApp.Commands.RegisterCustomer)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.AutoGeneratedIVehicleManagementAPI",
    "DocumentationComments": {},
    "BaseTypes": [
      "WebApp.RESTClients.IVehicleManagementAPI"
    ],
    "Attributes": [
      {
        "Type": "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute",
        "Name": "global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage"
      },
      {
        "Type": "System.Diagnostics.DebuggerNonUserCodeAttribute",
        "Name": "global::System.Diagnostics.DebuggerNonUserCode"
      },
      {
        "Type": "WebApp.RefitInternalGenerated.PreserveAttribute",
        "Name": "Preserve"
      },
      {
        "Type": "System.Reflection.ObfuscationAttribute",
        "Name": "global::System.Reflection.Obfuscation",
        "Arguments": [
          {
            "Name": "Exclude",
            "Type": "bool",
            "Value": "true"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "requestBuilder",
        "Type": "Refit.IRequestBuilder",
        "Modifiers": 132
      }
    ],
    "Constructors": [
      {
        "Name": "AutoGeneratedIVehicleManagementAPI",
        "Parameters": [
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "client"
          },
          {
            "Type": "Refit.IRequestBuilder",
            "Name": "requestBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Client",
            "Operator": "=",
            "Right": "client"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "this.requestBuilder",
            "Operator": "=",
            "Right": "requestBuilder"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Properties": [
      {
        "Name": "Client",
        "Type": "System.Net.Http.HttpClient",
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Methods": [
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetVehicles\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] {  }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<List<Vehicle>>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIVehicleManagementAPI.WebApp.RESTClients.IVehicleManagementAPI.GetVehicles()",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetVehicleByLicenseNumber\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<Vehicle>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIVehicleManagementAPI.WebApp.RESTClients.IVehicleManagementAPI.GetVehicleByLicenseNumber(string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "RegisterVehicle",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterVehicle",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RegisterVehicle\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(RegisterVehicle) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIVehicleManagementAPI.WebApp.RESTClients.IVehicleManagementAPI.RegisterVehicle(WebApp.Commands.RegisterVehicle)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI",
    "DocumentationComments": {},
    "BaseTypes": [
      "WebApp.RESTClients.IWorkshopManagementAPI"
    ],
    "Attributes": [
      {
        "Type": "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute",
        "Name": "global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage"
      },
      {
        "Type": "System.Diagnostics.DebuggerNonUserCodeAttribute",
        "Name": "global::System.Diagnostics.DebuggerNonUserCode"
      },
      {
        "Type": "WebApp.RefitInternalGenerated.PreserveAttribute",
        "Name": "Preserve"
      },
      {
        "Type": "System.Reflection.ObfuscationAttribute",
        "Name": "global::System.Reflection.Obfuscation",
        "Arguments": [
          {
            "Name": "Exclude",
            "Type": "bool",
            "Value": "true"
          }
        ]
      }
    ],
    "Fields": [
      {
        "Name": "requestBuilder",
        "Type": "Refit.IRequestBuilder",
        "Modifiers": 132
      }
    ],
    "Constructors": [
      {
        "Name": "AutoGeneratedIWorkshopManagementAPI",
        "Parameters": [
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "client"
          },
          {
            "Type": "Refit.IRequestBuilder",
            "Name": "requestBuilder"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "Client",
            "Operator": "=",
            "Right": "client"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "this.requestBuilder",
            "Operator": "=",
            "Right": "requestBuilder"
          }
        ],
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Properties": [
      {
        "Name": "Client",
        "Type": "System.Net.Http.HttpClient",
        "Modifiers": 2,
        "DocumentationComments": {}
      }
    ],
    "Methods": [
      {
        "Name": "GetWorkshopPlanning",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetWorkshopPlanning\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<WorkshopPlanning>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetWorkshopPlanning(string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.MaintenanceJob>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetMaintenanceJob\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string), typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<MaintenanceJob>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetMaintenanceJob(string, string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "RegisterPlanning",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.RegisterPlanning",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"RegisterPlanning\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string), typeof(RegisterPlanning) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.RegisterPlanning(string, WebApp.Commands.RegisterPlanning)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "PlanMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.PlanMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"PlanMaintenanceJob\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string), typeof(PlanMaintenanceJob) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.PlanMaintenanceJob(string, WebApp.Commands.PlanMaintenanceJob)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "FinishMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "WebApp.Commands.FinishMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"FinishMaintenanceJob\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string), typeof(string), typeof(FinishMaintenanceJob) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.FinishMaintenanceJob(string, string, WebApp.Commands.FinishMaintenanceJob)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetCustomers\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] {  }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<List<Customer>>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetCustomers()",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "id"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetCustomerById\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<Customer>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetCustomerById(string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetVehicles\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] {  }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<List<Vehicle>>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetVehicles()",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.IRequestBuilder",
            "Name": "BuildRestResultFuncForMethod",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"GetVehicleByLicenseNumber\""
              },
              {
                "Type": "System.Type[]",
                "Text": "new Type[] { typeof(string) }"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "(Task<Vehicle>)func(Client, arguments)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.AutoGeneratedIWorkshopManagementAPI.WebApp.RESTClients.IWorkshopManagementAPI.GetVehicleByLicenseNumber(string)",
            "Name": "func",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "Client"
              },
              {
                "Type": "object[]",
                "Text": "arguments"
              }
            ]
          }
        ],
        "DocumentationComments": {}
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.CustomerManagementAPI",
    "BaseTypes": [
      "WebApp.RESTClients.ICustomerManagementAPI"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_restClient",
        "Type": "WebApp.RESTClients.ICustomerManagementAPI"
      }
    ],
    "Constructors": [
      {
        "Name": "CustomerManagementAPI",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "config"
          },
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "httpClient"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationBinder",
            "Name": "GetValue<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"CustomerManagementAPI\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"APIServiceLocations\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "httpClient.BaseAddress",
            "Operator": "=",
            "Right": "new Uri($\"http://{apiHostAndPort}/api\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Uri",
            "Name": "Uri",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"http://{apiHostAndPort}/api\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_restClient",
            "Operator": "=",
            "Right": "RestService.For<ICustomerManagementAPI>(httpClient)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.RestService",
            "Name": "For<ICustomerManagementAPI>",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "httpClient"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetCustomers()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomers"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetCustomerById(customerId)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "GetCustomerById",
            "Arguments": [
              {
                "Type": "string",
                "Text": "customerId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterCustomer",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterCustomer",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.ICustomerManagementAPI",
            "Name": "RegisterCustomer",
            "Arguments": [
              {
                "Type": "WebApp.Commands.RegisterCustomer",
                "Text": "command"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "WebApp.RESTClients.ICustomerManagementAPI",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/customers\"",
                "Type": "string",
                "Value": "/customers"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "customerId",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/customers/{id}\"",
                "Type": "string",
                "Value": "/customers/{id}"
              }
            ]
          }
        ]
      },
      {
        "Name": "RegisterCustomer",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterCustomer",
            "Name": "command"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.PostAttribute",
            "Name": "Post",
            "Arguments": [
              {
                "Name": "\"/customers\"",
                "Type": "string",
                "Value": "/customers"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "WebApp.RESTClients.IVehicleManagementAPI",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/vehicles\"",
                "Type": "string",
                "Value": "/vehicles"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/vehicles/{id}\"",
                "Type": "string",
                "Value": "/vehicles/{id}"
              }
            ]
          }
        ]
      },
      {
        "Name": "RegisterVehicle",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterVehicle",
            "Name": "command"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.PostAttribute",
            "Name": "Post",
            "Arguments": [
              {
                "Name": "\"/vehicles\"",
                "Type": "string",
                "Value": "/vehicles"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "WebApp.RESTClients.IWorkshopManagementAPI",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "GetWorkshopPlanning",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/workshopplanning/{planningDate}\"",
                "Type": "string",
                "Value": "/workshopplanning/{planningDate}"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.MaintenanceJob>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/workshopplanning/{planningDate}/jobs/{jobId}\"",
                "Type": "string",
                "Value": "/workshopplanning/{planningDate}/jobs/{jobId}"
              }
            ]
          }
        ]
      },
      {
        "Name": "RegisterPlanning",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.RegisterPlanning",
            "Name": "cmd"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.PostAttribute",
            "Name": "Post",
            "Arguments": [
              {
                "Name": "\"/workshopplanning/{planningDate}\"",
                "Type": "string",
                "Value": "/workshopplanning/{planningDate}"
              }
            ]
          }
        ]
      },
      {
        "Name": "PlanMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.PlanMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.PostAttribute",
            "Name": "Post",
            "Arguments": [
              {
                "Name": "\"/workshopplanning/{planningDate}/jobs\"",
                "Type": "string",
                "Value": "/workshopplanning/{planningDate}/jobs"
              }
            ]
          }
        ]
      },
      {
        "Name": "FinishMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "WebApp.Commands.FinishMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.PutAttribute",
            "Name": "Put",
            "Arguments": [
              {
                "Name": "\"/workshopplanning/{planningDate}/jobs/{jobId}/finish\"",
                "Type": "string",
                "Value": "/workshopplanning/{planningDate}/jobs/{jobId}/finish"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/refdata/customers\"",
                "Type": "string",
                "Value": "/refdata/customers"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "id"
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/refdata/customers/{id}\"",
                "Type": "string",
                "Value": "/refdata/customers/{id}"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/refdata/vehicles\"",
                "Type": "string",
                "Value": "/refdata/vehicles"
              }
            ]
          }
        ]
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Attributes": [
          {
            "Type": "Refit.GetAttribute",
            "Name": "Get",
            "Arguments": [
              {
                "Name": "\"/refdata/vehicles/{id}\"",
                "Type": "string",
                "Value": "/refdata/vehicles/{id}"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.VehicleManagementAPI",
    "BaseTypes": [
      "WebApp.RESTClients.IVehicleManagementAPI"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_restClient",
        "Type": "WebApp.RESTClients.IVehicleManagementAPI"
      }
    ],
    "Constructors": [
      {
        "Name": "VehicleManagementAPI",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "config"
          },
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "httpClient"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationBinder",
            "Name": "GetValue<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"VehicleManagementAPI\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"APIServiceLocations\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "httpClient.BaseAddress",
            "Operator": "=",
            "Right": "new Uri($\"http://{apiHostAndPort}/api\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Uri",
            "Name": "Uri",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"http://{apiHostAndPort}/api\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_restClient",
            "Operator": "=",
            "Right": "RestService.For<IVehicleManagementAPI>(httpClient)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.RestService",
            "Name": "For<IVehicleManagementAPI>",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "httpClient"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetVehicles()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "GetVehicles"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetVehicleByLicenseNumber(licenseNumber)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "GetVehicleByLicenseNumber",
            "Arguments": [
              {
                "Type": "string",
                "Text": "licenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterVehicle",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "WebApp.Commands.RegisterVehicle",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IVehicleManagementAPI",
            "Name": "RegisterVehicle",
            "Arguments": [
              {
                "Type": "WebApp.Commands.RegisterVehicle",
                "Text": "command"
              }
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "WebApp.RESTClients.WorkshopManagementAPI",
    "BaseTypes": [
      "WebApp.RESTClients.IWorkshopManagementAPI"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_restClient",
        "Type": "WebApp.RESTClients.IWorkshopManagementAPI"
      }
    ],
    "Constructors": [
      {
        "Name": "WorkshopManagementAPI",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "config"
          },
          {
            "Type": "System.Net.Http.HttpClient",
            "Name": "httpClient"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationBinder",
            "Name": "GetValue<string>",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"WorkshopManagementAPI\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.Configuration.IConfiguration",
            "Name": "GetSection",
            "Arguments": [
              {
                "Type": "string",
                "Text": "\"APIServiceLocations\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "httpClient.BaseAddress",
            "Operator": "=",
            "Right": "new Uri($\"http://{apiHostAndPort}/api\")"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "System.Uri",
            "Name": "Uri",
            "Arguments": [
              {
                "Type": "string",
                "Text": "$\"http://{apiHostAndPort}/api\""
              }
            ]
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_restClient",
            "Operator": "=",
            "Right": "RestService.For<IWorkshopManagementAPI>(httpClient)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Refit.RestService",
            "Name": "For<IWorkshopManagementAPI>",
            "Arguments": [
              {
                "Type": "System.Net.Http.HttpClient",
                "Text": "httpClient"
              }
            ]
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "GetWorkshopPlanning",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetWorkshopPlanning(planningDate)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetWorkshopPlanning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "planningDate"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.MaintenanceJob>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetMaintenanceJob(planningDate, jobId)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetMaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "planningDate"
              },
              {
                "Type": "string",
                "Text": "jobId"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "RegisterPlanning",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.RegisterPlanning",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "RegisterPlanning",
            "Arguments": [
              {
                "Type": "string",
                "Text": "planningDate"
              },
              {
                "Type": "WebApp.Commands.RegisterPlanning",
                "Text": "cmd"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "PlanMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "WebApp.Commands.PlanMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "PlanMaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "planningDate"
              },
              {
                "Type": "WebApp.Commands.PlanMaintenanceJob",
                "Text": "cmd"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "FinishMaintenanceJob",
        "ReturnType": "System.Threading.Tasks.Task",
        "Parameters": [
          {
            "Type": "string",
            "Name": "planningDate"
          },
          {
            "Type": "string",
            "Name": "jobId"
          },
          {
            "Type": "WebApp.Commands.FinishMaintenanceJob",
            "Name": "cmd"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "FinishMaintenanceJob",
            "Arguments": [
              {
                "Type": "string",
                "Text": "planningDate"
              },
              {
                "Type": "string",
                "Text": "jobId"
              },
              {
                "Type": "WebApp.Commands.FinishMaintenanceJob",
                "Text": "cmd"
              }
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetCustomers",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Customer>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetCustomers()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetCustomers"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetCustomerById",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Customer>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "id"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetCustomerById(id)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetCustomerById",
            "Arguments": [
              {
                "Type": "string",
                "Text": "id"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetVehicles",
        "ReturnType": "System.Threading.Tasks.Task<System.Collections.Generic.List<Pitstop.Models.Vehicle>>",
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetVehicles()"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetVehicles"
          }
        ],
        "Modifiers": 258
      },
      {
        "Name": "GetVehicleByLicenseNumber",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.Models.Vehicle>",
        "Parameters": [
          {
            "Type": "string",
            "Name": "licenseNumber",
            "Attributes": [
              {
                "Type": "Refit.AliasAsAttribute",
                "Name": "AliasAs",
                "Arguments": [
                  {
                    "Name": "\"id\"",
                    "Type": "string",
                    "Value": "id"
                  }
                ]
              }
            ]
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "await _restClient.GetVehicleByLicenseNumber(licenseNumber)"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "WebApp.RESTClients.IWorkshopManagementAPI",
            "Name": "GetVehicleByLicenseNumber",
            "Arguments": [
              {
                "Type": "string",
                "Text": "licenseNumber"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "ex.StatusCode == HttpStatusCode.NotFound",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              },
              {}
            ]
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "WorkshopManagementAPI.CommandHandlers.CommandHandlersDIRegistration",
    "Modifiers": 18,
    "Methods": [
      {
        "Name": "AddCommandHandlers",
        "Parameters": [
          {
            "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
            "Name": "services"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IPlanMaintenanceJobCommandHandler, PlanMaintenanceJobCommandHandler>"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions",
            "Name": "AddTransient<IFinishMaintenanceJobCommandHandler, FinishMaintenanceJobCommandHandler>"
          }
        ],
        "Modifiers": 18
      }
    ]
  },
  {
    "FullName": "WorkshopManagementAPI.CommandHandlers.FinishMaintenanceJobCommandHandler",
    "BaseTypes": [
      "WorkshopManagementAPI.CommandHandlers.IFinishMaintenanceJobCommandHandler"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_messagePublisher",
        "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher"
      },
      {
        "Name": "_planningRepo",
        "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository"
      }
    ],
    "Constructors": [
      {
        "Name": "FinishMaintenanceJobCommandHandler",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
            "Name": "messagePublisher"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "planningRepo"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messagePublisher",
            "Operator": "=",
            "Right": "messagePublisher"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_planningRepo",
            "Operator": "=",
            "Right": "planningRepo"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "HandleCommandAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "GetWorkshopPlanningAsync",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "planningDate"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                    "Expression": "null"
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "FinishMaintenanceJob",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
                "Text": "command"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>",
            "Name": "GetEvents"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "SaveWorkshopPlanningAsync",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId",
                "Text": "planning.Id"
              },
              {
                "Type": "int",
                "Text": "planning.OriginalVersion"
              },
              {
                "Type": "int",
                "Text": "planning.Version"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
                "Text": "events"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "e in events",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
                "Name": "PublishMessageAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "e.MessageType"
                  },
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "e"
                  },
                  {
                    "Type": "string",
                    "Text": "\"\""
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "planning"
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "WorkshopManagementAPI.CommandHandlers.IFinishMaintenanceJobCommandHandler",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "HandleCommandAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.FinishMaintenanceJob",
            "Name": "command"
          }
        ]
      }
    ]
  },
  {
    "Type": 1,
    "FullName": "WorkshopManagementAPI.CommandHandlers.IPlanMaintenanceJobCommandHandler",
    "Modifiers": 2,
    "Methods": [
      {
        "Name": "HandleCommandAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ]
      }
    ]
  },
  {
    "FullName": "WorkshopManagementAPI.CommandHandlers.PlanMaintenanceJobCommandHandler",
    "BaseTypes": [
      "WorkshopManagementAPI.CommandHandlers.IPlanMaintenanceJobCommandHandler"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "_messagePublisher",
        "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher"
      },
      {
        "Name": "_planningRepo",
        "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository"
      }
    ],
    "Constructors": [
      {
        "Name": "PlanMaintenanceJobCommandHandler",
        "Parameters": [
          {
            "Type": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
            "Name": "messagePublisher"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "planningRepo"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_messagePublisher",
            "Operator": "=",
            "Right": "messagePublisher"
          },
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "_planningRepo",
            "Operator": "=",
            "Right": "planningRepo"
          }
        ],
        "Modifiers": 2
      }
    ],
    "Methods": [
      {
        "Name": "HandleCommandAsync",
        "ReturnType": "System.Threading.Tasks.Task<Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning>",
        "Parameters": [
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          },
          {
            "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
            "Name": "command"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "GetWorkshopPlanningAsync",
            "Arguments": [
              {
                "Type": "System.DateTime",
                "Text": "planningDate"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
            "Sections": [
              {
                "Condition": "planning == null",
                "Statements": [
                  {
                    "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
                    "Left": "planning",
                    "Operator": "=",
                    "Right": "WorkshopPlanning.Create(planningDate)"
                  },
                  {
                    "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                    "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
                    "Name": "Create",
                    "Arguments": [
                      {
                        "Type": "System.DateTime",
                        "Text": "planningDate"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.WorkshopPlanning",
            "Name": "PlanMaintenanceJob",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Commands.PlanMaintenanceJob",
                "Text": "command"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Domain.Core.AggregateRoot<Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId>",
            "Name": "GetEvents"
          },
          {
            "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
            "ContainingType": "Pitstop.WorkshopManagementAPI.Repositories.IWorkshopPlanningRepository",
            "Name": "SaveWorkshopPlanningAsync",
            "Arguments": [
              {
                "Type": "Pitstop.WorkshopManagementAPI.Domain.ValueObjects.WorkshopPlanningId",
                "Text": "planning.Id"
              },
              {
                "Type": "int",
                "Text": "planning.OriginalVersion"
              },
              {
                "Type": "int",
                "Text": "planning.Version"
              },
              {
                "Type": "System.Collections.Generic.IEnumerable<Pitstop.Infrastructure.Messaging.Event>",
                "Text": "events"
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
            "Expression": "e in events",
            "Statements": [
              {
                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                "ContainingType": "Pitstop.Infrastructure.Messaging.IMessagePublisher",
                "Name": "PublishMessageAsync",
                "Arguments": [
                  {
                    "Type": "string",
                    "Text": "e.MessageType"
                  },
                  {
                    "Type": "Pitstop.Infrastructure.Messaging.Event",
                    "Text": "e"
                  },
                  {
                    "Type": "string",
                    "Text": "\"\""
                  }
                ]
              }
            ]
          },
          {
            "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
            "Expression": "planning"
          }
        ],
        "Modifiers": 258
      }
    ]
  },
  {
    "FullName": "WorkshopManagementAPI.Commands.RegisterPlanning",
    "BaseTypes": [
      "Pitstop.Infrastructure.Messaging.Command"
    ],
    "Modifiers": 2,
    "Fields": [
      {
        "Name": "PlanningDate",
        "Type": "System.DateTime",
        "Modifiers": 130
      }
    ],
    "Constructors": [
      {
        "Name": "RegisterPlanning",
        "Parameters": [
          {
            "Type": "System.Guid",
            "Name": "messageId"
          },
          {
            "Type": "System.DateTime",
            "Name": "planningDate"
          }
        ],
        "Statements": [
          {
            "$type": "LivingDocumentation.AssignmentDescription, LivingDocumentation.Descriptions",
            "Left": "PlanningDate",
            "Operator": "=",
            "Right": "planningDate"
          }
        ],
        "Modifiers": 2
      }
    ]
  }
]